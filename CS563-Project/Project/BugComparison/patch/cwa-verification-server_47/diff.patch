diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 00000000..2dc12354
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1,26 @@
+* text=auto eol=lf
+
+*.java          text diff=java
+*.gradle        text diff=groovy
+*.gradle.kts    text diff=groovy
+*.css           text diff=css
+*.df            text
+*.htm           text diff=html
+*.html          text diff=html
+*.js            text
+*.jsp           text
+*.jspf          text
+*.jspx          text
+*.properties    text
+*.tld           text
+*.tag           text
+*.tagx          text
+*.xml           text
+
+*.class         binary
+*.dll           binary
+*.ear           binary
+*.jar           binary
+*.so            binary
+*.war           binary
+*.jks           binary
diff --git a/.github/workflows/ci-dockerfile.yml b/.github/workflows/ci-dockerfile.yml
new file mode 100644
index 00000000..cdf701e3
--- /dev/null
+++ b/.github/workflows/ci-dockerfile.yml
@@ -0,0 +1,21 @@
+name: ci-dockerfile
+on:
+  push:
+    branches:
+    - master
+    paths:
+    - Dockerfile
+    pull_request:
+      types:
+      - opened
+      - synchronize
+      - reopened
+      paths:
+      - Dockerfile
+jobs:
+  lint:
+    runs-on: ubuntu-latest
+    steps:
+    - uses: actions/checkout@v2
+    - run: docker pull hadolint/hadolint
+    - run: docker run --rm --interactive hadolint/hadolint < Dockerfile
diff --git a/.github/workflows/ci-master.yml b/.github/workflows/ci-master.yml
new file mode 100644
index 00000000..baf33505
--- /dev/null
+++ b/.github/workflows/ci-master.yml
@@ -0,0 +1,85 @@
+name: ci-master
+on:
+  push:
+    branches:
+    - master
+jobs:
+  build:
+    runs-on: ubuntu-latest
+    steps:
+    - uses: actions/checkout@v2
+      with:
+        fetch-depth: 0
+    - uses: actions/cache@v1
+      env:
+        cache-name: m2
+      with:
+        path: ~/.m2/repository
+        key: ${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
+        restore-keys: ${{ env.cache-name }}-
+    - uses: actions/setup-java@v1
+      with:
+        java-version: 11
+    - name: environment
+      run: |
+        sudo apt-get install --yes --no-install-recommends libxml-xpath-perl
+        export ARTIFACT_ID=$(xpath -q -e "/project/artifactId/text()" pom.xml)
+        echo "::set-env name=ARTIFACT_ID::${ARTIFACT_ID}"
+        export VERSION=$(xpath -q -e "/project/version/text()" pom.xml)
+        export VERSION=${VERSION//-SNAPSHOT}-$(git rev-parse --short ${GITHUB_SHA})
+        echo "::set-env name=VERSION::${VERSION}"
+    - name: mvn version
+      run: mvn --batch-mode versions:set -DgenerateBackupPoms=false -DnewVersion=${VERSION}
+    - name: mvn deploy
+      run: mvn --batch-mode deploy
+      env:
+        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+    - name: mvn sonar
+      run: |
+        mvn --batch-mode verify sonar:sonar \
+        -Dsonar.login=${SONAR_TOKEN} \
+        -Dsonar.host.url=${SONAR_URL} \
+        -Dsonar.organization=${GITHUB_REPOSITORY_OWNER} \
+        -Dsonar.projectKey=${GITHUB_REPOSITORY/\//_}
+      env:
+        SONAR_URL: https://sonarcloud.io
+        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
+        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+    - uses: actions/upload-artifact@v1
+      with:
+        name: target
+        path: target
+    - name: docker build
+      run: |
+        docker build \
+        --tag docker.pkg.github.com/${GITHUB_REPOSITORY}/${ARTIFACT_ID}:${VERSION} \
+        --tag ${TRUSTED_URL}/${TRUSTED_REPOSITORY}/${ARTIFACT_ID}:${VERSION} \
+        .
+      env:
+        TRUSTED_URL: ${{ secrets.TRUSTED_URL }}
+        TRUSTED_REPOSITORY: ${{ secrets.TRUSTED_REPOSITORY }}
+    - name: docker push github
+      run: |
+        echo ${GITHUB_TOKEN} | docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY_OWNER} --password-stdin
+        docker push docker.pkg.github.com/${GITHUB_REPOSITORY}/${ARTIFACT_ID}:${VERSION}
+      env:
+        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
+    - name: docker push trusted
+      run: |
+        echo ${TRUSTED_TOKEN} | docker login ${TRUSTED_URL} -u ${TRUSTED_USER} --password-stdin
+        export DOCKER_CONTENT_TRUST=1
+        export DOCKER_CONTENT_TRUST_SERVER=${TRUSTED_SERVER_URL}
+        export DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE=${TRUSTED_TOKEN}
+        export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=${TRUSTED_TOKEN}
+        gpg --quiet --batch --yes --decrypt --passphrase=${TRUSTED_TOKEN} \
+        --output trusted.key trusted.key.gpg
+        chmod 600 trusted.key
+        docker trust key load trusted.key --name user
+        docker trust sign ${TRUSTED_URL}/${TRUSTED_REPOSITORY}/${ARTIFACT_ID}:${VERSION}
+        docker push ${TRUSTED_URL}/${TRUSTED_REPOSITORY}/${ARTIFACT_ID}:${VERSION}
+      env:
+        TRUSTED_URL: ${{ secrets.TRUSTED_URL }}
+        TRUSTED_SERVER_URL: ${{ secrets.TRUSTED_SERVER_URL }}
+        TRUSTED_REPOSITORY: ${{ secrets.TRUSTED_REPOSITORY }}
+        TRUSTED_USER: ${{ secrets.TRUSTED_USER }}
+        TRUSTED_TOKEN: ${{ secrets.TRUSTED_TOKEN }}
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci-pull-request.yml
similarity index 72%
rename from .github/workflows/ci.yml
rename to .github/workflows/ci-pull-request.yml
index 4e376f5a..1ed86144 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci-pull-request.yml
@@ -1,8 +1,5 @@
-name: ci
+name: ci-pull-request
 on:
-  push:
-    branches:
-    - master
   pull_request:
     types:
     - opened
@@ -13,6 +10,8 @@ jobs:
     runs-on: ubuntu-latest
     steps:
     - uses: actions/checkout@v2
+      with:
+        fetch-depth: 0
     - uses: actions/cache@v1
       env:
         cache-name: m2
@@ -23,9 +22,7 @@ jobs:
     - uses: actions/setup-java@v1
       with:
         java-version: 11
-    - run: |
-        mvn --batch-mode package
-    - uses: actions/upload-artifact@v1
-      with:
-        name: target
-        path: target
+    - name: mvn package
+      run: mvn --batch-mode package
+    - name: docker build
+      run: docker build .
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 2daf5c97..700fef4c 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -4,9 +4,9 @@
 
 All members of the project community must abide by the [Contributor Covenant, version 2.0](CODE_OF_CONDUCT.md).
 Only by respecting each other can we develop a productive, collaborative community.
-Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting [opensource@telekom.de](mailto:opensource@telekom.de) and/or a project maintainer. 
+Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting [opensource@telekom.de](mailto:opensource@telekom.de) and/or a project maintainer.
 
-We appreciate your courtesy of avoiding political questions here. Issues which are not related to the project itself will be closed by our community managers. 
+We appreciate your courtesy of avoiding political questions here. Issues which are not related to the project itself will be closed by our community managers.
 
 ## Engaging in our project
 
@@ -35,8 +35,8 @@ You are welcome to contribute code in order to fix a bug or to implement a new f
 The following rule governs code contributions:
 
 * Contributions must be licensed under the [Apache 2.0 License](LICENSE)
-* Newly created files must be opened by an instatiated version fo the file 'templates/file-header.txt'
-* At least if you add a new file to the repository, add your name into the contributor section of the file NOTICE (please respect the preset entry structure) 
+* Newly created files must be opened by an instantiated version of the file 'templates/file-header.txt'
+* At least if you add a new file to the repository, add your name into the contributor section of the file NOTICE (please respect the preset entry structure)
 
 ## Contributing Documentation
 
@@ -66,7 +66,7 @@ The following rule governs documentation contributions:
 
 ## Issues and Planning
 
-* We use GitHub issues to track bugs and enhancement requests. 
+* We use GitHub issues to track bugs and enhancement requests.
 
 * Please provide as much context as possible when you open an issue. The information you provide must be comprehensive enough to reproduce that issue for the assignee. Therefore, contributors may use but aren't restricted to the issue template provided by the project maintainers.
 
diff --git a/Dockerfile b/Dockerfile
index d6caf119..ad505f46 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,18 +1,4 @@
-FROM maven:3.6.3-jdk-11 as build
-
-ARG WORK_DIR=/build
-
-COPY . ${WORK_DIR}/
-WORKDIR ${WORK_DIR}
-
-RUN mkdir -p /root/.m2 /usr/tsi/verification-server
-RUN cd ${WORK_DIR}
-RUN mvn -B ${MAVEN_ARGS} install
-RUN cp ${WORK_DIR}/target/cwa-verification-server*.jar /usr/tsi/verification-server/verification.jar
-
 FROM gcr.io/distroless/java:11
-COPY --from=build /usr/tsi/verification-server/verification.jar .
-CMD ["verification.jar"]
+COPY target/*.jar app.jar
+CMD ["app.jar"]
 EXPOSE 8080
-LABEL Version="0.3.2-SNAPSHOT"
-LABEL Name="cwa-verification-server"
diff --git a/DockerfileCi b/DockerfileCi
deleted file mode 100644
index 464ac312..00000000
--- a/DockerfileCi
+++ /dev/null
@@ -1,6 +0,0 @@
-FROM gcr.io/distroless/java:11
-COPY target/cwa-verification-server-*.jar verification.jar
-CMD ["verification.jar"]
-EXPOSE 8080
-LABEL Version="0.3.2-SNAPSHOT"
-LABEL Name="cwa-verification-server"
diff --git a/DockerfilePaaS b/DockerfilePaaS
new file mode 100644
index 00000000..47762d3a
--- /dev/null
+++ b/DockerfilePaaS
@@ -0,0 +1,15 @@
+FROM maven:3.6.3-jdk-11 as build
+
+ARG WORK_DIR=/build
+
+COPY . ${WORK_DIR}/
+WORKDIR ${WORK_DIR}
+
+RUN mkdir -p /root/.m2 /usr/tsi
+RUN mvn -B -DskipTests=true ${MAVEN_ARGS} install
+RUN cp ${WORK_DIR}/target/*.jar /usr/tsi/app.jar
+
+FROM gcr.io/distroless/java:11
+COPY --from=build /usr/tsi/app.jar .
+CMD ["app.jar"]
+EXPOSE 8080
diff --git a/Jenkinsfile b/Jenkinsfile
index c45b6c21..62d94ef9 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -8,7 +8,6 @@
  */
 sbsBuild(
   jdk: 'jdk11',
-  dockerfile: 'DockerfileCi',
   dockerAlternateRegistries: [
     'MTR_SBS@mtr.external.otc.telekomcloud.com/sbs/cwa-verification-server'
   ]
diff --git a/NOTICE b/NOTICE
index 23a0b696..447c1f1a 100644
--- a/NOTICE
+++ b/NOTICE
@@ -15,3 +15,4 @@ Andreas Scheibal [ascheibal], T-Systems International GmbH
 Michael Schulte [mschulte-tsi], T-Systems International GmbH
 Lars Stelzner [lstelzne-tech], T-Systems International GmbH
 Andreas Mandel [amandel], T-Systems International GmbH
+Martin Scheffler [martinschefflerTSI] T-Systems International GmbH
diff --git a/README.md b/README.md
index c2dbee2b..aee4abfc 100644
--- a/README.md
+++ b/README.md
@@ -20,38 +20,54 @@
 
 The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from [Apple](https://www.apple.com/covid19/contacttracing/) and [Google](https://www.google.com/covid19/exposurenotifications/). The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the **verification service** for the Corona-Warn-App. This implementation is still a **work in progress**, and the code it contains is currently alpha-quality code.
 
-## Architecture Overview
-You can find an architectural overview of the component in the [solution architecture document](https://github.com/corona-warn-app/cwa-documentation/blob/master/solution_architecture.md)  
-This component of the Corona-warn-app whereas named **verification process** provides indeed two functionalities:  
-1. prove that a pretended positive case is indeed positive  
-2. provide the result of a Covid-19 Test  
+## Status
+![ci](https://github.com/corona-warn-app/cwa-verification-server/workflows/ci/badge.svg)
+[![quality gate](https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-verification-server&metric=alert_status)](https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-verification-server)
+[![coverage](https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-verification-server&metric=coverage)](https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-verification-server)
+[![bugs](https://sonarcloud.io/api/project_badges/measure?project=corona-warn-app_cwa-verification-server&metric=bugs)](https://sonarcloud.io/dashboard?id=corona-warn-app_cwa-verification-server)
+
+## About this component
+
+In the world of the Corona Warn App the Verification Server helps validating whether upload requests from the mobile App are valid or not. The parts of the verification component cooperate in the following manner:
 
-To achieve this, the verification service gets the result of covid-19 tests from LIS (**L**abor **I**nformation **S**ystem) which deliver test results to it. The complete process is described in [cwa-documentation/Solution Architecture](https://github.com/corona-warn-app/cwa-documentation/blob/master/solution_architecture.md) to which you may refer for detailed information about the workflow.
+- The Verification Server of the Corona Warn App (repository: cwa-verification-server) helps validating whether upload requests from the mobile App are valid or not.
+- The Verification Portal of the Corona Warn App (repository: cwa-verification-portal) allows hotline employees to generate teleTANs which are used by users of the mobile App to upload their diagnostic keys.
+- The Verification Identity and Access of the Corona Warn App (repository: cwa-verification-iam) ensures that only authorized health personnel get access to the Verification Portal.
+- The Test Result Server of the Corona Warn App (repository: cwa-testresult-server) receives the results from laboratories and delivers these results to the app via the verification-server.
+
+## Architecture overview
+You can find an architectural overview of the component in the [solution architecture document](https://github.com/corona-warn-app/cwa-documentation/blob/master/solution_architecture.md).  
+This component of the Corona-Warn-App whereas named **verification process** provides indeed two functionalities:  
+1. prove that a pretended positive case is indeed positive  
+2. provide the result of a COVID-19 test  
 
-The software stack of the verification server is based on spring boot, currently with an in-memory H2 database. As the persistence relies on the liquibase.
+To achieve this, the verification service gets the result of COVID-19 tests from LIS (**L**abor **I**nformation **S**ystem) which delivers test results to it. The complete process is described in [cwa-documentation/Solution Architecture](https://github.com/corona-warn-app/cwa-documentation/blob/master/solution_architecture.md) to which you may refer for detailed information about the workflow.
 
+The software stack of the verification server is based on [Spring Boot](https://spring.io/projects/spring-boot), currently with an in-memory H2 database. As the persistence relies on [Liquibase](https://www.liquibase.org).
 
 ## Development
+This component can be locally build in order to test the functionality of the interfaces and verify the concepts it is built upon.  
 
-This component can be locally build in order to test the functionality of the interfaces and verify the concepts it is build upon.  
 There are two ways to build:
  - [Maven](https:///maven.apache.org) build - to run this component as spring application on your local machine
  - [Docker](https://www.docker.com) build - to run it as docker container build from the provided docker build [file](https://github.com/corona-warn-app/cwa-verification-server/blob/master/Dockerfile)
- ### Prerequisites
- [Open JDK 11](https://openjdk.java.net)  
- [Maven](https://apache.maven.org)  
- *(optional)*: [Docker](https://www.docker.com)  
- ### Build
- Whether you cloned or downloaded the 'zipped' sources you will either find the sources in the chosen checkout-directory or get a zip file with the source code, which you can expand to a folder of your choice.
-
- In either case open a terminal pointing to the directory you put the sources in. The local build process is described afterwards depending on the way you choose.
+
+### Prerequisites
+ - [Open JDK 11](https://openjdk.java.net)  
+ - [Maven](https://maven.apache.org)
+ - *(optional)*: [Docker](https://www.docker.com)  
+
+### Build
+Whether you cloned or downloaded the 'zipped' sources you will either find the sources in the chosen checkout-directory or get a zip file with the source code, which you can expand to a folder of your choice.
+
+In either case open a terminal pointing to the directory you put the sources in. The local build process is described afterwards depending on the way you choose.
+
 #### Maven based build
-For actively take part on the development this is the way you should choose.   
-Please check, whether following prerequisites are fulfilled
+This is the recommended way for taking part in the development.  
+Please check, whether following prerequisites are installed on your machine:
 - [Open JDK 11](https://openjdk.java.net) or a similar JDK 11 compatible VM  
-- [Maven](https://apache.maven.org)  
+- [Maven](https://maven.apache.org)
 
-is installed on your machine.  
 You can then open a terminal pointing to the root directory of the verification server and do the following:
 
     mvn package
@@ -60,12 +76,9 @@ You can then open a terminal pointing to the root directory of the verification
 The verification server will start up and run locally on your machine available on port 8080.
 
 #### Docker based build  
-We recommend that you first check the prerequisites to ensure that  
-- [Docker](https://www.docker.com)  
-
-is installed on you machine  
+We recommend that you first check to ensure that [Docker](https://www.docker.com) is installed on your machine.
 
-On the commandline do the following:
+On the command line do the following:
 ```bash
 docker build -f|--file <path to dockerfile>  -t <imagename>  <path-to-verificationserver-root>
 docker run -p 127.0.0.1:8080:8080/tcp -it <imagename>
@@ -77,49 +90,40 @@ docker run -p 127.0.0.1:8080:8080/tcp -it cwa-verificationserver
 ```
 if you are in the root of the checked out repository.  
 The docker image will then run on your local machine on port 8080 assuming you configured docker for shared network mode.
-#### API Documentation  
 
-Along with the application there comes a swagger2 api documentation which you can access in your web browser, when the verification server applications runs:
+#### API documentation  
+Along with the application there comes a [swagger2](https://swagger.io) API documentation, which you can access in your web browser when the verification server applications runs:
 
     <base-url>/swagger-ui.html#/verification-controller
 
-mostly like:  
-
+Which results in the following URL on your local machine:
 http://localhost:8080/swagger-ui.html#/verification-controller
 
-
-
 #### Remarks
 This repository contains files which support our CI/CD pipeline and will be removed without further notice  
  - DockerfileCi - used for the GitHub build chain
  - Jenkinsfile - used for Telekom internal SBS (**S**oftware**B**uild**S**ervice)
 
-
-
-## Documentation
-
+## Documentation  
 The full documentation for the Corona-Warn-App can be found in the [cwa-documentation](https://github.com/corona-warn-app/cwa-documentation) repository. The documentation repository contains technical documents, architecture information, and white papers related to this implementation.
 
-## Support and Feedback
+## Support and feedback
 The following channels are available for discussions, feedback, and support requests:
 
 | Type                     | Channel                                                |
 | ------------------------ | ------------------------------------------------------ |
-| **General Discussion**   | <a href="https://github.com/corona-warn-app/cwa-verification-server/issues/new/choose" title="General Discussion"><img src="https://img.shields.io/github/issues/corona-warn-app/cwa-verification-server/question.svg?style=flat-square"></a> </a>   |
-| **Concept Feedback**    | <a href="https://github.com/corona-warn-app/cwa-verification-server/issues/new/choose" title="Open Concept Feedback"><img src="https://img.shields.io/github/issues/corona-warn-app/cwa-verification-server/architecture.svg?style=flat-square"></a>  |
-| **Verification Server Issue**    | <a href="https://github.com/corona-warn-app/cwa-verification-server/issues" title="Open Issues"><img src="https://img.shields.io/github/issues/corona-warn-app/cwa-verification-server?style=flat"></a>  |
-| **Other Requests**    | <a href="mailto:opensource@telekom.de" title="Email CWA Team"><img src="https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white"></a>   |
-
-## How to Contribute
+| **General Discussion**   | <a href="https://github.com/corona-warn-app/cwa-documentation/issues/new/choose" title="General Discussion"><img src="https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/question.svg?style=flat-square"></a> </a>   |
+| **Concept Feedback**    | <a href="https://github.com/corona-warn-app/cwa-documentation/issues/new/choose" title="Open Concept Feedback"><img src="https://img.shields.io/github/issues/corona-warn-app/cwa-documentation/architecture.svg?style=flat-square"></a>  |
+| **Verification server issues**    | <a href="https://github.com/corona-warn-app/cwa-verification-server/issues" title="Open Issues"><img src="https://img.shields.io/github/issues/corona-warn-app/cwa-verification-server?style=flat"></a>  |
+| **Other requests**    | <a href="mailto:opensource@telekom.de" title="Email CWA Team"><img src="https://img.shields.io/badge/email-CWA%20team-green?logo=mail.ru&style=flat-square&logoColor=white"></a>   |
 
+## How to contribute  
 Contribution and feedback is encouraged and always welcome. For more information about how to contribute, the project structure, as well as additional contribution information, see our [Contribution Guidelines](./CONTRIBUTING.md). By participating in this project, you agree to abide by its [Code of Conduct](./CODE_OF_CONDUCT.md) at all times.
 
-## Contributors
-
+## Contributors  
 The German government has asked SAP AG and Deutsche Telekom AG to develop the Corona-Warn-App for Germany as open source software. Deutsche Telekom is providing the network and mobile technology and will operate and run the backend for the app in a safe, scalable and stable manner. SAP is responsible for the app development, its framework and the underlying platform. Therefore, development teams of SAP and Deutsche Telekom are contributing to this project. At the same time our commitment to open source means that we are enabling -in fact encouraging- all interested parties to contribute and become part of its developer community.
 
 ## Repositories
-
 The following public repositories are currently available for the Corona-Warn-App:
 
 | Repository          | Description                                                           |
@@ -127,13 +131,18 @@ The following public repositories are currently available for the Corona-Warn-Ap
 | [cwa-documentation] | Project overview, general documentation, and white papers             |
 | [cwa-server]        | Backend implementation for the Apple/Google exposure notification API |
 | [cwa-verification-server] | Backend implementation of the verification process|
+| [cwa-verification-portal] | The portal to interact with the verification server |
+| [cwa-verification-iam] | The identy and access management to interact with the verification server |
+| [cwa-testresult-server] | receives the test results from connected laboratories |
 
 [cwa-documentation]: https://github.com/corona-warn-app/cwa-documentation
 [cwa-server]: https://github.com/corona-warn-app/cwa-server
 [cwa-verification-server]: https://github.com/corona-warn-app/cwa-verification-server
+[cwa-verification-portal]: https://github.com/corona-warn-app/cwa-verification-portal
+[cwa-verification-iam]: https://github.com/corona-warn-app/cwa-verification-iam
+[cwa-testresult-server]: https://github.com/corona-warn-app/cwa-testresult-server
 
 ## Licensing
-
 Copyright (c) 2020 Deutsche Telekom AG.
 
 Licensed under the **Apache License, Version 2.0** (the "License"); you may not use this file except in compliance with the License.
diff --git a/docs/architecture-overview.md b/docs/architecture-overview.md
index 6c1f7511..14ab7b71 100644
--- a/docs/architecture-overview.md
+++ b/docs/architecture-overview.md
@@ -2,79 +2,80 @@
 by Alexander Stiefel (alexander.stiefel@t-systems.com)
 
 ##	Introduction
-This document describes the component Verification Server for the System “Corona Warn App”. In the world of the Corona Warn App the Verification Server helps validating whether upload request from the mobile App are valid or not.
+This document describes the component Verification Server for the System “Corona Warn App”. In the world of the Corona Warn App the Verification Server helps validating whether upload requests from the mobile App are valid or not.
 This document links the overall system architecture with the software design of the Verification Server, it links user stories with implementation inside the Verification Server.
 This document is intended to be read by people who want to get insights how verification works in detail, it is our guideline for implementation.
 Please be aware that several aspects in this document are not final, certain important information is missing.
 
 #	Overview
 ##	Purpose of the Software System Component
-The primary scope of the component is to provide a proof whether users were positive tested for SARS-CoV-2. The secondary scope is to provide information about the status of a SARS-CoV-2 test and to provide the ability for privileged users (Health Authorities) to obtain a proof document on behalf of tested users.
+The primary scope of the component is to provide a proof whether users were tested positive for SARS-CoV-2. The secondary scope is to provide information about the status of a SARS-CoV-2 test and to provide the ability for privileged users (Health Authorities) to obtain a proof document on behalf of tested users.
 
 
 ##	Context
 The Verification Server provides proof of a positive SARS-CoV-2 test to other components of the system. In addition it also provides information about specific SARS-CoV-2 test results. The Verification Server uses several sources to provide such proof and information.
 
-![Overview Architecture](https://github.com/corona-warn-app/cwa-documentation/raw/master/images/solution_architecture/figure_1.svg?sanitize=true)
+![Overview Architecture](architecture_overview.svg?sanitize=true)
 
-- The Corona-Warn-App is a system which request test result status and obtains proofs. 
+- The Corona-Warn-App is a system which requests test result status and obtains proofs. 
 - The Corona-Warn-App Server is a system which needs to verify proof.
 - The Portal Server is a system which creates and obtains proof and therefore acts as source for proof.
-- The Lab Server/Laboratory Information System (LIS) is a system which acts as trusted source for proof.
+- The Test Result Server is a system which acts as trusted source for proof.
 
 Proof is represented by a Transaction Authorization Number (TAN), which is not bound to a specific transaction.
 
 
 ##	Core Entities
-|Entitiy|	Definition|	
+|Entity|	Definition|	
 | ------------- |:-------------:|
-|GUID|	Identifier for a SARS-CoV-2 Test. This component will deal only with hashed instances of the GUID. For the details of the hashing see Used cryptographic algorithms. The GUID has a length of 152 Bit, it consists of a prefix of 24 bit and a main part of 128 Bit. Only the main part is generated by a cryptographical reliable process.	|
+|GUID|	Identifier for a SARS-CoV-2 Test. This component will deal only with hashed instances of the GUID. For the details of the hashing see Used cryptographic algorithms. The GUID has a length of 152 bits, it consists of a prefix of 24 bits and a main part of 128 bits. Only the main part is generated by a cryptographically reliable process.	|
 |TAN|	Is a proof that the user has a SARS-CoV-2 Test with status positive. Depending on the context the TAN has a different length. Has a default length of 128 Bit.	|
 |teleTAN|	Is a subtype of TAN with reduced length and life time. This TAN is handed over via phone and contains only uppercase letters and numbers, excluding 0,O and I,1. Length of teleTAN is 7 characters. The lifetime of a teleTAN is 1h.	|
-|SARS-CoV-2 Test|	A SARS-CoV-2 Test aggregates several probes donated by a single person to verified whether they proof an infection with the SARS-CoV-2 virus or not. A SARS-CoV-2 Test can have multiple states, “positive”, “negative”, “unknow”, “erroneous”	|
-|Registration Token|	Identifies a long term session between a mobile app and the Verification Server. The Registration Token has a length of 128 Bit.	|
+|SARS-CoV-2 Test|	A SARS-CoV-2 Test aggregates several probes donated by a single person to check whether they detect an infection with the SARS-CoV-2 virus or not. A SARS-CoV-2 Test can have multiple states, “positive”, “negative”, “unknown”, “erroneous”	|
+|Registration Token|	Identifies a long term session between a mobile app and the Verification Server. The Registration Token has a length of 128 bits.	|
 
 
 # Software Design
 
 ##	Privacy Constraints
-The Verification Server handles pseudonym data this data needs a high level of protection. The data is protected by several measures. 
+The Verification Server handles pseudonym data, this data needs a high level of protection. The data is protected by several measures. 
 
 ### Measures
 |ID|	Measure	|Comment|
 | ------------- |:-------------:| -----:|
 |M1|	Not persisting IP addresses anywhere in the Verification Server 	|
 |M2|	Early deletion of data 	|For all entities a deletion strategy is defined|
-|M3|	Make sure that application logfiles does not contain any data that is personal relatable, no hashed GUID, no GUID, no test results, no Registration Tokens	|
+|M3|	Make sure that application logfiles do not contain any data that is personal relatable, no hashed GUID, no GUID, no test results, no Registration Tokens	|
 |M4|	Persist only hashed values for personal relatable data	|
 
 
 ##	Measures to increase data privacy
 ###	Separate Operation of Verification Server and Corona-Warn-App Server
-The Verification Server and the Corona-Warn-App Server are operated by different people and run in different cloud subscriptions.
+The Verification Server and the Corona-Warn-App Server are operated by different people and run in different namespaces in one cloud tenant. The namespaces organize access rights of people for resources.
+
 ###	Logging
 Primary key or pseudonymous data must not be part of a logging statement, the only exception is detected abuse cases.
 Logfiles are kept for 30 days.
 ##	Important Assumptions
--	Diagnostic Key upload and TAN verification is executed only a defined number of times per user and test
+-	Diagnosis Keys upload and TAN verification is executed only a defined number of times per user and test
 -	The whole process of verification and upload is pseudonym not anonym
--	Only one single mobile device can access the test result via GUID and only this single one device is able to upload diagnostic keys
+-	Only one single mobile device can access the test result via GUID and only this single one device is able to upload Diagnosis Keys
 
 
 ##	Actors
 - **User/Patient**: Person, who is tested for SARS-CoV-2, is equipped with a smartphone, Corona Warn App installed 
 - **Test Center**: Facility where the user can donate a probe to be tested for SARS-CoV-2, such as hospitals or practicing doctors 
 - **Lab**: Facility which tests the probe of the user and produces a trusted test result on SARS-CoV-2. 
-- **Verification Server**: Software service which proves a user taking part in the Corona Warn App and who is willing to file his Diagnosis keys to be really tested positive by an established authority 
-- **Lab Server**: Software service, that imports the test results provided by the Labs and stores them for further use. 
-- **Corona Warn App Backend**: Software service, which collects the diagnosis keys of users, proves them to be valid, i.e. they are really from an infected person and transmits them to other users who have been exposed to the User during last two weeks.
+- **Verification Server**: Software service which proves that a user, who is taking part in the Corona Warn App and who is willing to file his Diagnosis Keys, has been really tested positive by an established authority 
+- **Test Result Server**: Software service, that imports the SARS-CoV-2 test results provided by the Labs and stores them for further use. 
+- **Corona Warn App Backend**: Software service, which collects the Diagnosis Keys of users, proves them to be valid, i.e. they are really from an infected person and transmits them to other users who have been exposed to the user during last two weeks.
 - **Hotline User**: user with the role “c19hotline”
 - **Health Authority User**: user with the role “c19healthauthority”
 
 ##	Big Picture - User Journeys
 ###	User Journey TAN Verification based on integrated Laboratories 
 
-![User Journey TAN Verification based on integrated Laboratories](https://github.com/corona-warn-app/cwa-documentation/raw/master/images/solution_architecture/figure_3.svg?sanitize=true )
+![User Journey TAN Verification based on integrated Laboratories](sw_design_verification.svg?sanitize=true )
 
 
 Steps:
@@ -87,27 +88,27 @@ Steps:
 5.	Polling for result, at a regular interval the mobile app uses the Registration Token to request the result of the test
 - defined in User Story E07.02 – Notify user if a test result is available
 - partly implemented in Use Case Get Test Result
-6.	The Lab Server is requested whether a result is available, for interface definition see [Lab Server API]
-7.	The Lab Server is returning the Test result, if no test is available a result with state “pending” is returned
+6.	The Test Result Server is requested whether a result is available, for interface definition see [Test Result Server API]
+7.	The Test Result Server is returning the Test result, if no test is available a result with state “pending” is returned
 8.	The result is returned to the mobile App
 9.	The mobile app will request a TAN if a positive test result becomes available
-- defined in User Story E07.04 Upload my Diagnostic Keys
+- defined in User Story E07.04 Upload my Diagnosis Keys
 - implemented in Use Case Create TAN
 10.	A TAN is generated by the Verification Server and the TAN is stored hashed at the Verification Server
 11.	The TAN is delivered to the mobile App
-12.	The App obtains the diagnostic keys and sends the together with the TAN string to the Corona Warn App Backend
-- defined in User Story E07.04 Upload my Diagnostic Keys
+12.	The App obtains the Diagnosis Keys and sends them together with the TAN string to the Corona Warn App Backend
+- defined in User Story E07.04 Upload my Diagnosis Keys
 13.	The Corona Warn App Backend verifies the upload request, by verifying the TAN at the Verification Server, to avoid false positive warnings and duplicate warnings.
 defined in User Story E06.01 – Avoid false positive reports
 14.	The Verification Server verifies the TAN and returns the result of the verification
 - implemented in Use Case Verify TAN
 15.	The result is returned to the Corona-Warn-App Backend
-16.	The Corona-Warn-App Backend processes the diagnostic keys.
+16.	The Corona-Warn-App Backend processes the Diagnosis Keys.
 
-Subsequent Diagnostic Key upload will repeat the steps 9. until 16..
+Subsequent Diagnosis Keys upload will repeat the steps 9. until 16.
 
-###	User Journey TAN Verification based Health Authority is-sued teleTAN
-This flow is for users which can not participate in the flow based on integrated Laboratories which relies on printed GUIDs.
+###	User Journey TAN Verification based on Health Authority issued teleTAN
+This flow is for users who can not participate in the flow based on integrated Laboratories which relies on printed GUIDs.
 
 ![User Journey TAN Verification based on integrated Laboratories](https://github.com/corona-warn-app/cwa-documentation/raw/master/images/solution_architecture/figure_4.svg?sanitize=true )
  
@@ -117,7 +118,7 @@ This flow is for users which can not participate in the flow based on integrated
 Steps
 1.	Request the creation of a teleTAN via Web Interface
 - defined in User Story E06.04 – Use Call Center for Verification
-- implemented in see Use Cases Portal Server
+- implemented in Use Cases Portal Server
 2.	The Portal Server requests a teleTAN
 
 3.	The Verification Server generates a teleTAN
@@ -130,11 +131,12 @@ implemented in Use Case Create teleTAN
 9.	The RegistrationToken is generated by the Verification Server
 - implemented in Use Case Create RegistrationKey based on teleTAN
 10.	The Registration Token is returned to the mobile app
-Steps 11. until 17. are the same as in the other TAN user journey.
-Subsequent Diagnostic Key upload will repeat the steps 11. until 17..
+
+Steps 11. until 17. are the same as steps 9. until 16. in the other TAN user journey.
+Subsequent Diagnosis Keys upload will repeat the steps 11. until 17.
 
 ##	Supported User Stories 
-The implementation of user stories around verification involved several components, this chapter documents the mapping between Verification User Stories and Verification Server Use Cases. The user stories are detailed in [Scoping].
+The implementation of user stories around verification involves several components, this chapter documents the mapping between Verification User Stories and Verification Server Use Cases. The user stories are detailed in [Scoping].
 ###	User Story E05.01 – Avoid false positive reports
 Implemented by
 * Use Case Verify TAN
@@ -144,7 +146,7 @@ Not relevant for Verification Server.
 Implemented by
 * Use Case Get Test Result
 
-###	User Story E06.03 – Submit Diagnostic keys after notification
+###	User Story E06.03 – Submit Diagnosis Keys after notification
 
 In Verification Sever implemented by
 * Use Case Create TAN
@@ -166,30 +168,32 @@ In Verification Sever implemented by
 ###	Use Case Get Test Result 
 API Endpoint:
 -	Method: POST /testresult
--	Body: { “registrationToken”: “<<registrationToken >>” }
+-	Body: { “registrationToken”: “<< registrationToken >>” }
 -	Authentication: none
 
 Steps:
 1.	Verify whether the provided RegistrationToken exists, if not exit with error HTTP 400
 2.	Obtain hashed GUID by RegistrationToken
-3.	Get Test status from Lab Server
+3.	Get Test status from Test Result Server
 4.	Return Result of API Call
 
 ###	Use Case Create Registration Token
 It is important to note, that only one Registration Token will be generated for a specific GUID or teleTAN. The use case generates Registration Tokens from hashed GUIDs xor teleTANs. This is a measure to increase data privacy.
+
 API Endpoint:
 -	Method: POST /registrationToken
-Body: Body: { 
-"key": "<<key>>",
+Body: { 
+"key": "<< key >>",
 "keyType": “teleTAN||hashedGUID” 
 }
 -	Authentication: none
+
 Steps
 1.	Verify whether a registration token with the provided GUID or teleTAN already exists, if yes return error
 1.  If a teleTAN is used for creation, verify teleTAN.
 	1. If verification fails, return HTTP 400
 2.	Create Registration Token
-3.	Store entity AppSession, with hashed Registration Token. If available store  hashed GUID, if available store hashed teleTAN. Mark AppSession.sourceOfTrust
+3.	Store entity AppSession, with hashed Registration Token. If available store hashed GUID, if available store hashed teleTAN. Mark AppSession.sourceOfTrust
 4.	Return Registration Token.sourceOfTrust depending on which source (hashed GUID or teleTAN) was provided
 5.	If teleTAN was provided mark teleTAN as redeemed
 
@@ -198,16 +202,16 @@ The use case creates a TAN. Only a specific number of TANs can be generated for
 
 API Endpoint:
 -	Method: POST /tan
--	Body: { “registrationToken”: “<<registrationToken >>” }
+-	Body: { “registrationToken”: “<< registrationToken >>” }
 -	Authentication: none
 
 1.	Verify registrationToken, if registrationToken is invalid, exit with error HTTP 400
 2.	Verifiy whether the entity AppSession exists for the Registration token
-	1.	If yes, verify if TANcounter > 2
+	1.	If yes, check if TANcounter >= 2
 		1.	If yes, return error HTTP 400
 	1.	If no, return error HTTP 400
 3.	If AppSession.sourceOfTrust == “hashedGUID”
-	1. Get test result from Lab Sever
+	1. Get test result from Test Result Sever
 	1. Verify whether test result is positive, otherwise exit with error HTTP 400
 4.	generate TAN
 	1. Generate random TAN
@@ -230,7 +234,7 @@ API Endpoint:
 ###	Use Case Verify TAN
 API Endpoint:
 -	Method: POST /tan/verify
--	Body: { “tan”: “<<tan>>” }
+-	Body: { “tan”: “<< tan >>” }
 -	Authentication: Client Certificate, IP range
 
 1.	Verify parameter TAN for syntax constraints
@@ -252,7 +256,7 @@ Steps:
 API Endpoint:
 -	Method: POST /tan
 Body: { 
-"key": "<<key>>",
+"key": "<< key >>",
 "keyType": “teleTAN||Token” 
 }
 -	Authentication: none
@@ -280,24 +284,25 @@ The entity TAN represents the authorization (sometimes referred as “proof”)
 | ------------- |:-------------:| -----:| -----:|
 |(PK) TANHash|	Y|	String[64]|	Hashed unique value of a TAN.|
 |validFrom|	Y|	Date|	Timestamp when the TAN is starting to be valid|
-|validUntil|	Y|	Date|	
+|validUntil|	Y|	Date|	Timestamp when the TAN expires|
 |sourceOfTrust|	Y|	String [“connectedLab”, "teleTAN"]|	Defines the type of the TAN|
-|Type	|Y	|String [“TAN”, “teleTAN”]|	Indicates whether this tan is tele-TAN or normal TAN |
+|Type	|Y	|String [“TAN”, “teleTAN”]|	Indicates whether this tan is teleTAN or normal TAN |
 |createdOn|	Y|	Date|	Date of creation|
 
 ###	Data Deletion
-All data is deleted after 14 days.
+All data is deleted after 21 days.
 
 ##	Entity AppSession
-The entity AppSession is a hashed GUID which was used in processing to generate a TAN. The entity basically marks a GUID hash as “used”
+The entity AppSession is a hashed GUID which was used in processing to generate a TAN. The entity basically marks a GUID hash as “used”.
+
 |Name|	Not null|	Type|	Definition|
 | ------------- |:-------------:| -----:| -----:|
-|GUIDHash|	Y|	String[64]|	The hashed GUID.|
-|teleTANHash|	Y|	String[64]|	The hashed GUID.|
-|RegistrationTokenHash|	Y|	String[64]	Hash of the Registration Token.|
-|TANcounter|	Y|Int	Contains the number of TANs generated in the session|
+|GUIDHash||	String[64]|	The hashed GUID.|
+|teleTANHash||	String[64]|	The hashed teleTAN.|
+|RegistrationTokenHash|	Y|	String[64]|	Hash of the Registration Token.|
+|TANcounter|	Y|Int|	Contains the number of TANs generated in the session|
 |sourceOfTrust|	Y|	String [“hashedGUID”, “teleTAN”]|Defines the type of the Session|
-|createdON|	Y|	Date	|
+|createdON|	Y|	Date	|Date of creation|
 
 ###	Data Deletion
 All data is deleted after 14 days.
@@ -308,7 +313,7 @@ All data is deleted after 14 days.
 |Role|	Authentication	|Comment|
 | ------------- |:-------------:| -----:|
 |Anonymous |	None|	 the app uses no authentication for communication with Verification Server|
-|Tracing Server|	TLS Client Certificate, 2nd factor IP Range	|
+|Corona Warn App Server|	TLS Client Certificate, 2nd factor IP Range	|
 |Health Authority User|	Signed JWT, verification of signature	|
 |Hotline User|	Signed JWT, verification of signature	|
 
@@ -316,22 +321,22 @@ All data is deleted after 14 days.
 ###	Authorization of users
 |Role|	Authorization|	Comment|
 | ------------- |:-------------:| -----:|
-|Anonymous| 	None|	the app uses no authentication for communication with Verification Server
-|Corona Warn App Backend User|	Implicit authorization, a user which is authenticated as Corona Warn App Backend User is authorized as Corona Warn App Backend User	|
-|Health Authority User|	Signed JWT, verification of signatureSignature contains role “c19healthauthority”	|
-|Hotline User|	Signed JWT, verification of signature “c19hotline”	|
+|Anonymous| 	None|	the app uses no authorization for communication with Verification Server |
+|Corona Warn App Backend User|	Implicit authorization | a user which is authenticated as Corona Warn App Backend User is authorized as Corona Warn App Backend User	|
+|Health Authority User|	Signed JWT, verification of signature | Signature contains role “c19healthauthority”	|
+|Hotline User|	Signed JWT | verification of signature “c19hotline”	|
 
 ## Threat Model
 **_This chapter is still in work._**
 ###	Threats
-Based STRIDE thread modelling the threats below are anticipated:
+Based on STRIDE threat modelling, the threats below are anticipated:
 |ID|	Category|	Name|	Definition|
 | ------------- |:-------------:| -----:| -----:|
-|T1|	|Brute Force	Brute Force teleTAN| 	Try to guess a teleTAN via brute force attack.
-|T2|		DDoS Attack|	The API is attacked by a high number of requests, leading to an outage of the service
-|T3|		Code injection|	The payload and/header contain code which is executed
+|T1|	Brute Force	| Brute Force teleTAN| 	Try to guess a teleTAN via brute force attack.|
+|T2|		DDoS Attack|	The API is attacked by a high number of requests, leading to an outage of the service|
+|T3|		Code injection|	The payload and/or header contain code which is executed|
 |T4|			
-|T5|		Brute force attack|	By a brute force attack a client want to guess a valid GUID to create a valid TAN
+|T5|		Brute force attack|	By a brute force attack a client wants to guess a valid GUID to create a valid TAN|
 |T6|		Steal secrets from logs	|
 			
 Categories follow STRIDE:
@@ -344,17 +349,17 @@ Categories follow STRIDE:
 
 ###	Measures
 
-|ID|	Thread|	Name|	Definition|
+|ID|	Threat|	Name|	Definition|
 | ------------- |:-------------:| -----:| -----:|
-|MT1||OTC DDoD Protection	Infrastructure Level|
-|MT2||Strong input parameter verifica-tion, with 100% code coverage and very high amount of testing	|
-|MT3||Enforcing TLS 1.2 and above	|
-|MT6|T2|	Use Open Telekom Cloud Anti-DDoS	|
-|MT7|T3|	Strict validation of http headers, body content	|
-|MT9|T5|	Use Throttling @ Code Level in API implementation to reduce the number of 	|
-|MT10|T5|	Detect unusual load scenario and trigger warning for operation	|
-|MT11|T6|	Use only POST requests to avoid logging of secrets at infra-structure components|
-|MT12||	Strict input validation, all REST input parameter are validated in a strict manner|
+|MT1|||OTC DDoD Protection	Infrastructure Level|
+|MT2|||Strong input parameter verification, with 100% code coverage and very high amount of testing	|
+|MT3|||Enforcing TLS 1.2 and above	|
+|MT6|T2||	Use Open Telekom Cloud Anti-DDoS	|
+|MT7|T3||	Strict validation of http headers, body content	|
+|MT9|T5||	Use Throttling @ Code Level in API implementation to reduce the possible frequency of guessing attempts	|
+|MT10|T5||	Detect unusual load scenario and trigger warning for operation	|
+|MT11|T6||	Use only POST requests to avoid logging of secrets at infrastructure components|
+|MT12|||	Strict input validation, all REST input parameter are validated in a strict manner|
 			
 			
 
@@ -367,14 +372,14 @@ Categories follow STRIDE:
 - Creating of teleTAN: tbd.
 
 ##	Complexity of secrets
-- TAN: 128Bit
-- Registration Token: 128 Bit
-- teleTAN: 35 Bit (5Bit per character, 7 characters)
+- TAN: 128 bits
+- Registration Token: 128 bits
+- teleTAN: 35 bits (5 bits per character, 7 characters)
 
 ## Used Timeframes
 TAN
 -	Lifespan of TAN is 14 days
+
 teleTAN
 -	Lifespan of teleTAN is 1h
 
-
diff --git a/docs/architecture_overview.svg b/docs/architecture_overview.svg
new file mode 100644
index 00000000..58f3768f
--- /dev/null
+++ b/docs/architecture_overview.svg
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xl="http://www.w3.org/1999/xlink" version="1.1" viewBox="68 71 975 739" width="975pt" height="739pt" xmlns:dc="http://purl.org/dc/elements/1.1/"><metadata> Produced by OmniGraffle 6.6.2 <dc:date>2020-05-17 06:27:37 +0000</dc:date></metadata><defs><filter id="Shadow" filterUnits="userSpaceOnUse"><feGaussianBlur in="SourceAlpha" result="blur" stdDeviation="1.308"/><feOffset in="blur" result="offset" dx="0" dy="2"/><feFlood flood-color="black" flood-opacity=".5" result="flood"/><feComposite in="flood" in2="offset" operator="in"/></filter><font-face font-family="Helvetica Neue" font-size="16" panose-1="2 0 5 3 0 0 0 2 0 4" units-per-em="1000" underline-position="-100" underline-thickness="50" slope="0" x-height="517" cap-height="714" ascent="951.99585" descent="-212.99744" font-weight="500"><font-face-src><font-face-name name="HelveticaNeue"/></font-face-src></font-face><font-face font-family="Helvetica" font-size="12" units-per-em="1000" underline-position="-75.683594" underline-thickness="49.316406" slope="0" x-height="522.94922" cap-height="717.28516" ascent="770.01953" descent="-229.98047" font-weight="500"><font-face-src><font-face-name name="Helvetica"/></font-face-src></font-face><font-face font-family="Helvetica Neue" font-size="16" panose-1="2 0 8 3 0 0 0 9 0 4" units-per-em="1000" underline-position="-100" underline-thickness="50" slope="0" x-height="517" cap-height="714" ascent="975.0061" descent="-216.99524" font-weight="bold"><font-face-src><font-face-name name="HelveticaNeue-Bold"/></font-face-src></font-face><font-face font-family="Helvetica Neue" font-size="12" panose-1="2 0 5 3 0 0 0 2 0 4" units-per-em="1000" underline-position="-100" underline-thickness="50" slope="0" x-height="517" cap-height="714" ascent="951.99585" descent="-212.99744" font-weight="500"><font-face-src><font-face-name name="HelveticaNeue"/></font-face-src></font-face><font-face font-family="Helvetica" font-size="12" units-per-em="1000" underline-position="-75.683594" underline-thickness="49.316406" slope="0" x-height="532.22656" cap-height="719.72656" ascent="770.01953" descent="-229.98047" font-weight="bold"><font-face-src><font-face-name name="Helvetica-Bold"/></font-face-src></font-face><marker orient="auto" overflow="visible" markerUnits="strokeWidth" id="FilledArrow_Marker" viewBox="-1 -3 7 6" markerWidth="7" markerHeight="6" color="#408002"><g><path d="M 4.8 0 L 0 -1.8 L 0 1.8 Z" fill="currentColor" stroke="currentColor" stroke-width="1"/></g></marker></defs><g stroke="none" stroke-opacity="1" stroke-dasharray="none" fill="none" fill-opacity="1"><title>Figure 1</title><g><title>Ebene 1</title><g><xl:use xl:href="#id896_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id968_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id619_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id504_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id676_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id428_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id969_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id934_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id944_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id1055_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id1056_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id1057_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id1060_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id1103_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id1104_Graphic" filter="url(#Shadow)"/><xl:use xl:href="#id675_Graphic" filter="url(#Shadow)"/></g><rect x="462.04724" y="700.15748" width="144.56693" height="56.692913" fill="#e6e6e6"/><rect x="462.04724" y="700.15748" width="144.56693" height="56.692913" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(467.04724 705.15748)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="0" y="15" textLength="98.688">Mobile Phone</tspan></text><rect x="467.71653" y="730.15748" width="53.858267" height="19.84252" fill="#fecc66"/><rect x="467.71653" y="730.15748" width="53.858267" height="19.84252" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(472.71653 733.07874)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="8.1508134" y="11" textLength="19.992188">CW</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="27.703548" y="11" textLength="8.0039062">A</tspan></text><rect x="413.85827" y="592.44094" width="144.56693" height="56.692913" fill="#e6e6e6"/><rect x="413.85827" y="592.44094" width="144.56693" height="56.692913" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(418.85827 597.44094)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="0" y="15" textLength="98.688">Mobile Phone</tspan></text><rect x="419.52756" y="622.44094" width="53.858267" height="19.84252" fill="#fecc66"/><rect x="419.52756" y="622.44094" width="53.858267" height="19.84252" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(424.52756 625.3622)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="8.1508134" y="11" textLength="19.992188">CW</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="27.703548" y="11" textLength="8.0039062">A</tspan></text><line x1="343.79584" y1="136.06299" x2="343.79584" y2="175.74803" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><line x1="263.62205" y1="136.06299" x2="263.62205" y2="175.74803" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><line x1="311.81102" y1="215.43307" x2="311.81102" y2="269.29134" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><line x1="141.73228" y1="215.43307" x2="141.73228" y2="269.29134" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><rect x="487.55905" y="73.700787" width="552.7559" height="325.98425" fill="#dadada"/><rect x="487.55905" y="73.700787" width="552.7559" height="325.98425" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(492.55905 78.700787)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="0" y="16" textLength="104.56">Mobile Phone</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="0" y="34.464111" textLength="152.912">Apple iPhone or Andr</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="152.624" y="34.464111" textLength="71.728">oid phone</tspan></text><text transform="translate(418.20472 251.28734)" fill="black"><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="2.004" y="11" textLength="47.328">Retrieve </tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="6.33" y="25.335999" textLength="3.996">r</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="10.11" y="25.335999" textLength="31.56">esults</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="7.62" y="39.671997" textLength="17.424">+ T</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="23.94" y="39.671997" textLength="16.44">AN</tspan></text><g id="id896_Graphic"><rect x="513.07086" y="187.08661" width="240.94488" height="192.17548" fill="#fecc66"/><rect x="513.07086" y="187.08661" width="240.94488" height="192.17548" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(518.07086 241.17435)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="bold" x="44.368925" y="11" textLength="57.322266">Corona-W</tspan><tspan font-family="Helvetica" font-size="12" font-weight="bold" x="101.25174" y="11" textLength="73.31836">arn-App (CW</tspan><tspan font-family="Helvetica" font-size="12" font-weight="bold" x="173.91385" y="11" textLength="12.662109">A)</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="27.095487" y="39" textLength="7.330078">T</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="33.095487" y="39" textLength="174.08789">est result retrieval and exposure </tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="63.115995" y="53" textLength="25.347656">notifi</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="88.46365" y="53" textLength="79.365234">cation (tracing)</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="29.749784" y="81" textLength="126.74414">(Apple iOS and Google </tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="155.83767" y="81" textLength="45.357422">Android)</tspan></text></g><line x1="161.5748" y1="311.81102" x2="511.45057" y2="311.81102" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><line x1="141.24016" y1="345.82677" x2="141.24016" y2="399.68504" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><line x1="141.24016" y1="399.68504" x2="141.24016" y2="462.89763" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(175.07874 391.5262)" fill="black"><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x=".058" y="11" textLength="7.332">V</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="6.73" y="11" textLength="19.32">erifi</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="26.05" y="11" textLength="32.892">cation</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="11.5" y="25.335999" textLength="20.664">of T</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="31.06" y="25.335999" textLength="19.776">AN </tspan></text><g id="id968_Graphic"><rect x="844.7244" y="187.08661" width="70.86614" height="195.59055" fill="white"/><rect x="844.7244" y="187.08661" width="70.86614" height="195.59055" stroke="#408002" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(849.7244 263.88189)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="5.0854144" y="11" textLength="54.029297">Exposure </tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".7524066" y="25" textLength="27.339844">Notifi</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="28.09225" y="25" textLength="32.021484">cation</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".43014097" y="39" textLength="60.00586">Framework</tspan></text></g><g id="id619_Graphic"><path d="M 847.812 87.874015 L 917.937 87.874015 C 932.2964 87.874015 943.937 99.51461 943.937 113.874015 L 943.937 121.307615 C 943.937 135.66702 932.2964 147.307615 917.937 147.307615 L 847.812 147.307615 C 833.4526 147.307615 821.812 135.66702 821.812 121.307615 L 821.812 113.874015 C 821.812 99.51461 833.4526 87.874015 847.812 87.874015 Z" fill="white"/><path d="M 847.812 87.874015 L 917.937 87.874015 C 932.2964 87.874015 943.937 99.51461 943.937 113.874015 L 943.937 121.307615 C 943.937 135.66702 932.2964 147.307615 917.937 147.307615 L 847.812 147.307615 C 833.4526 147.307615 821.812 135.66702 821.812 121.307615 L 821.812 113.874015 C 821.812 99.51461 833.4526 87.874015 847.812 87.874015 Z" stroke="#408002" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(826.812 96.590815)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="30.714844" y="11" textLength="54.029297">Exposure </tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="26.381836" y="25" textLength="27.339844">Notifi</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="53.72168" y="25" textLength="32.021484">cation</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="43.388672" y="39" textLength="25.347656">Data</tspan></text></g><path d="M 864.46154 183.17457 C 858.614 180.5631 849.841 178.9301 846.9172 175.33937 C 843.99346 171.74865 843.99346 166.28391 846.9172 161.62807 C 848.2923 159.43838 850.9612 157.21038 854.0111 154.97118" marker-end="url(#FilledArrow_Marker)" stroke="#408002" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><path d="M 905.16996 147.40157 C 909.97856 149.90132 916.7033 151.06181 919.5972 154.90157 C 922.49115 158.74134 924.93953 165.73078 922.5352 170.44247 C 921.45517 172.55906 919.0092 174.48698 916.11774 176.35331" marker-end="url(#FilledArrow_Marker)" stroke="#408002" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><line x1="915.59055" y1="308.97638" x2="1006.4685" y2="308.97638" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><g id="id504_Graphic"><circle cx="936.0945" cy="308.0852" r="12.000019" fill="white"/><circle cx="936.0945" cy="308.0852" r="12.000019" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/></g><line x1="754.01574" y1="308.97638" x2="843.01574" y2="308.97638" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><circle cx="791.52755" cy="308.30883" r="12.000019" fill="white"/><circle cx="791.52755" cy="308.30883" r="12.000019" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(785.04155 323.32283)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".16699219" y="11" textLength="8.6660156">R</tspan></text><path d="M 795.5409 333.3034 L 802.02712 330.10795 L 795.5409 326.9125 Z" fill="black"/><path d="M 795.5409 333.3034 L 802.02712 330.10795 L 795.5409 326.9125 Z" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><g id="id676_Graphic"><circle cx="734.83464" cy="650.55118" r="12.000019" fill="white"/><circle cx="734.83464" cy="650.55118" r="12.000019" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/></g><text transform="translate(830.0866 637.48548)" fill="black"><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x=".66" y="11" textLength="12.216">Br</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="12.66" y="11" textLength="59.34">oadcasting</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="15.552" y="25.335999" textLength="56.448">of RPI and</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="17.988" y="39.671997" textLength="57.348">encrypted </tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="21.312" y="54.007996" textLength="54.024">metadata </tspan></text><text transform="translate(796.65566 586.43436)" fill="black"><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x=".384" y="11" textLength="50.232">Scanning</tspan></text><line x1="722.83464" y1="657.6378" x2="643.46456" y2="671.811" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><line x1="722.83464" y1="650.4567" x2="558.4252" y2="617.95275" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><line x1="610.5758" y1="737.00787" x2="732.7008" y2="663.3071" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><g id="id428_Graphic"><rect x="867.40157" y="559.2756" width="153.3061" height="61.51181" fill="white"/><rect x="867.40157" y="559.2756" width="153.3061" height="61.51181" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(872.40157 576.0315)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="7.949926" y="11" textLength="127.40625">BLE Beacon Mechanics</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="11.9577386" y="25" textLength="119.390625">(No active connection)</tspan></text></g><line x1="746.3642" y1="647.2161" x2="867.40157" y2="612.2044" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1" stroke-dasharray="4,4"/><line x1="957.37813" y1="559.2756" x2="989.52786" y2="485.06138" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1" stroke-dasharray="4,4"/><text transform="translate(713.6614 689.94223)" fill="black"><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x=".384" y="11" textLength="50.232">Scanning</tspan></text><text transform="translate(634.49606 611.94617)" fill="black"><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x=".66" y="11" textLength="12.216">Br</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="12.66" y="11" textLength="59.34">oadcasting</tspan></text><g id="id969_Graphic"><rect x="960.9449" y="187.08661" width="62.362204" height="193.26209" fill="white"/><rect x="960.9449" y="187.08661" width="62.362204" height="193.26209" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(965.9449 234.71766)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".82758656" y="11" textLength="50.70703">Bluetooth</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="15.174266" y="25" textLength="22.013672">Low</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="7.17036" y="39" textLength="38.021484">Energy</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="10.844188" y="53" textLength="30.673828">(BLE)</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".17133656" y="81" textLength="55.353516">Hardware </tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="52.362204" y="81" textLength="3.3339844"> </tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="2.8344225" y="95" textLength="46.69336">Interface</tspan></text></g><g id="id934_Graphic"><rect x="70.374015" y="270.14173" width="317.97244" height="72.850393" fill="white"/><rect x="70.374015" y="270.14173" width="317.97244" height="72.850393" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(75.374015 299.56693)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="bold" x="101.28993" y="11" textLength="8.0039062">V</tspan><tspan font-family="Helvetica" font-size="12" font-weight="bold" x="108.63759" y="11" textLength="22.007812">erifi</tspan><tspan font-family="Helvetica" font-size="12" font-weight="bold" x="130.6454" y="11" textLength="76.03711">cation Server</tspan></text></g><g id="id944_Graphic"><rect x="70.374015" y="462.89763" width="150.23622" height="72.850393" fill="white"/><rect x="70.374015" y="462.89763" width="150.23622" height="72.850393" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(75.374015 485.32283)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="bold" x="18.678657" y="11" textLength="57.322266">Corona-W</tspan><tspan font-family="Helvetica" font-size="12" font-weight="bold" x="75.56147" y="11" textLength="49.330078">arn-App </tspan><tspan font-family="Helvetica" font-size="12" font-weight="bold" x="51.435493" y="25" textLength="37.365234">Server</tspan></text></g><text transform="translate(601.49606 494.7948)" fill="black"><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="1" y="11" textLength="96">Download of keys</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="2.104" y="25.335999" textLength="49.788">and confi</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="51.892" y="25.335999" textLength="47.34">guration </tspan></text><path d="M 221.10236 527.30402 L 720 527.30402 L 720 380.3487" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><circle cx="557.76378" cy="526.57655" r="12.000019" fill="white"/><circle cx="557.76378" cy="526.57655" r="12.000019" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(554.51378 541.59055)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".16699219" y="11" textLength="8.6660156">R</tspan></text><path d="M 552.00035 545.39522 L 545.5141 548.59067 L 552.00035 551.78612 Z" fill="black"/><path d="M 552.00035 545.39522 L 545.5141 548.59067 L 552.00035 551.78612 Z" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><rect x="372.812" y="495.1308" width="122.125" height="36" fill="white"/><rect x="372.812" y="495.1308" width="122.125" height="36" stroke="#408002" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(377.812 506.1308)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="43.063477" y="11" textLength="25.998047">CDN</tspan></text><rect x="384.15059" y="505.47725" width="122.125" height="36" fill="white"/><rect x="384.15059" y="505.47725" width="122.125" height="36" stroke="#408002" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(389.15059 516.47725)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="43.063477" y="11" textLength="25.998047">CDN</tspan></text><rect x="395.48917" y="516.81583" width="122.125" height="36" fill="white"/><rect x="395.48917" y="516.81583" width="122.125" height="36" stroke="#408002" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(400.48917 520.81583)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="11.709961" y="11" textLength="92.03906">Content Delivery </tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="15.395508" y="25" textLength="81.333984">Network (CDN)</tspan></text><circle cx="307.18897" cy="526.57655" r="12.000019" fill="white"/><circle cx="307.18897" cy="526.57655" r="12.000019" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(300.70297 541.59055)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".16699219" y="11" textLength="8.6660156">R</tspan></text><path d="M 311.2023 551.57112 L 317.68854 548.37567 L 311.2023 545.18022 Z" fill="black"/><path d="M 311.2023 551.57112 L 317.68854 548.37567 L 311.2023 545.18022 Z" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><path d="M 557.2992 382.67716 L 557.2992 470.6111 L 221.10236 470.6111" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><circle cx="528.29133" cy="468.43788" r="12.000019" fill="white"/><circle cx="528.29133" cy="468.43788" r="12.000019" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(525.04133 483.45188)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".16699219" y="11" textLength="8.6660156">R</tspan></text><path d="M 522.5279 487.25655 L 516.04166 490.452 L 522.5279 493.64745 Z" fill="black"/><path d="M 522.5279 487.25655 L 516.04166 490.452 L 522.5279 493.64745 Z" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(391.45057 437.43653)" fill="black"><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="17.162" y="11" textLength="80.676">Upload of keys</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x=".02" y="25.335999" textLength="17.196">(+T</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="16.112" y="25.335999" textLength="62.868">AN for verifi</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="78.98" y="25.335999" textLength="36">cation)</tspan></text><text transform="translate(260.99212 481.4444)" fill="black"><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x=".272" y="11" textLength="25.548">Aggr</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="25.604" y="11" textLength="65.124">egated keys</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="5.12" y="25.335999" textLength="36.756">+ confi</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="41.876" y="25.335999" textLength="44.004">guration</tspan></text><g id="id1055_Graphic"><rect x="70.86614" y="87.874015" width="150.23622" height="127.559054" fill="white"/><rect x="70.86614" y="87.874015" width="150.23622" height="127.559054" stroke="#408002" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(75.86614 137.65354)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="bold" x="4.11518" y="11" textLength="135.33984">Test Result Server </tspan><tspan font-family="Helvetica" font-size="12" font-weight="bold" x="33.775336" y="25" textLength="72.685547"></tspan></text></g><g id="id1056_Graphic"><rect x="238.11023" y="175.74803" width="150.23622" height="39.68504" fill="white"/><rect x="238.11023" y="175.74803" width="150.23622" height="39.68504" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(243.11023 188.59055)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="35.105414" y="11" textLength="70.02539">Portal Server</tspan></text></g><g id="id1057_Graphic"><rect x="238.11023" y="87.874015" width="70.86614" height="48.188976" fill="white"/><rect x="238.11023" y="87.874015" width="70.86614" height="48.188976" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(243.11023 97.968503)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="13.089321" y="11" textLength="38.021484">Health </tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="6.7553363" y="25" textLength="47.35547">Authority</tspan></text></g><g id="id1060_Graphic"><rect x="317.48031" y="87.874015" width="70.86614" height="48.188976" fill="white"/><rect x="317.48031" y="87.874015" width="70.86614" height="48.188976" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(322.48031 104.968503)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="11.756313" y="11" textLength="37.353516">Hotline</tspan></text></g><circle cx="311.99212" cy="243.11811" r="12.000019" fill="white"/><circle cx="311.99212" cy="243.11811" r="12.000019" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(328.99212 231.11811)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".16699219" y="11" textLength="8.6660156">R</tspan></text><path d="M 330.29712 245.11811 L 333.49257 251.60435 L 336.68802 245.11811 Z" fill="black"/><path d="M 330.29712 245.11811 L 333.49257 251.60435 L 336.68802 245.11811 Z" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><circle cx="263.80315" cy="155.90551" r="12.000019" fill="white"/><circle cx="263.80315" cy="155.90551" r="12.000019" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(280.80315 143.90551)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".16699219" y="11" textLength="8.6660156">R</tspan></text><path d="M 282.10815 157.90551 L 285.3036 164.39175 L 288.49905 157.90551 Z" fill="black"/><path d="M 282.10815 157.90551 L 285.3036 164.39175 L 288.49905 157.90551 Z" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><circle cx="343.65354" cy="155.90551" r="12.000019" fill="white"/><circle cx="343.65354" cy="155.90551" r="12.000019" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(360.65354 143.90551)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".16699219" y="11" textLength="8.6660156">R</tspan></text><path d="M 361.95854 157.90551 L 365.154 164.39175 L 368.34944 157.90551 Z" fill="black"/><path d="M 361.95854 157.90551 L 365.154 164.39175 L 368.34944 157.90551 Z" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><circle cx="443.1158" cy="311.14348" r="12.000019" fill="white"/><circle cx="443.1158" cy="311.14348" r="12.000019" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(439.8658 326.15748)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".16699219" y="11" textLength="8.6660156">R</tspan></text><path d="M 437.35238 329.96215 L 430.86614 333.1576 L 437.35238 336.35305 Z" fill="black"/><path d="M 437.35238 329.96215 L 430.86614 333.1576 L 437.35238 336.35305 Z" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><circle cx="142.3937" cy="404.0315" r="12.000019" fill="white"/><circle cx="142.3937" cy="404.0315" r="12.000019" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(158.6437 400.7605)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".16699219" y="11" textLength="8.6660156">R</tspan></text><path d="M 165.5126 399.78873 L 162.31715 393.3025 L 159.1217 399.78873 Z" fill="black"/><path d="M 165.5126 399.78873 L 162.31715 393.3025 L 159.1217 399.78873 Z" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><circle cx="142.3937" cy="244.44094" r="12.000019" fill="white"/><circle cx="142.3937" cy="244.44094" r="12.000019" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(158.6437 241.16994)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x=".16699219" y="11" textLength="8.6660156">R</tspan></text><path d="M 165.5126 240.19818 L 162.31715 233.71194 L 159.1217 240.19818 Z" fill="black"/><path d="M 165.5126 240.19818 L 162.31715 233.71194 L 159.1217 240.19818 Z" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(77.3937 226.9514)" fill="black"><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="2.004" y="11" textLength="47.328">Retrieve </tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="6.33" y="25.335999" textLength="3.996">r</tspan><tspan font-family="Helvetica Neue" font-size="12" font-weight="500" x="10.11" y="25.335999" textLength="31.56">esults</tspan></text><rect x="498.89763" y="643.46456" width="144.56693" height="56.692913" fill="#e6e6e6"/><rect x="498.89763" y="643.46456" width="144.56693" height="56.692913" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(503.89763 648.46456)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="0" y="15" textLength="98.688">Mobile Phone</tspan></text><rect x="504.56693" y="673.46456" width="53.858267" height="19.84252" fill="#fecc66"/><rect x="504.56693" y="673.46456" width="53.858267" height="19.84252" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(509.56693 676.38582)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="8.1508134" y="11" textLength="19.992188">CW</tspan><tspan font-family="Helvetica" font-size="12" font-weight="500" x="27.703548" y="11" textLength="8.0039062">A</tspan></text><g id="id1103_Graphic"><rect x="82.204724" y="617.95275" width="150.23622" height="39.68504" fill="white"/><rect x="82.204724" y="617.95275" width="150.23622" height="39.68504" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(87.204724 630.79527)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="34.762641" y="11" textLength="70.710938">Open Source</tspan></text></g><g id="id1104_Graphic"><rect x="82.204724" y="677.4803" width="150.23622" height="39.68504" fill="white"/><rect x="82.204724" y="677.4803" width="150.23622" height="39.68504" stroke="#408002" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/><text transform="translate(87.204724 690.32283)" fill="black"><tspan font-family="Helvetica" font-size="12" font-weight="500" x="22.759711" y="11" textLength="94.716797">Existing Solutions</tspan></text></g><line x1="992.126" y1="476.2804" x2="992.126" y2="380.3487" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><g id="id675_Graphic"><circle cx="994.2992" cy="474.04724" r="12.000019" fill="white"/><circle cx="994.2992" cy="474.04724" r="12.000019" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/></g><text transform="translate(75.374015 784.7955)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x=".42" y="16" textLength="39.104">Figur</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="39.236" y="16" textLength="127.984">e 1: High-level ar</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="166.932" y="16" textLength="68.144">chitectur</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="234.788" y="16" textLength="81.792">e overview</tspan></text></g></g></svg>
diff --git a/docs/sw_design_verification.svg b/docs/sw_design_verification.svg
new file mode 100644
index 00000000..31458678
--- /dev/null
+++ b/docs/sw_design_verification.svg
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xl="http://www.w3.org/1999/xlink" version="1.1" viewBox="8 224 1344 725" width="112pc" height="725pt" xmlns:dc="http://purl.org/dc/elements/1.1/"><metadata> Produced by OmniGraffle 6.6.2 <dc:date>2020-05-19 09:22:43 +0000</dc:date></metadata><defs><marker orient="auto" overflow="visible" markerUnits="strokeWidth" id="FilledArrow_Marker" viewBox="-1 -4 10 8" markerWidth="10" markerHeight="8" color="black"><g><path d="M 8 0 L 0 -3 L 0 3 Z" fill="currentColor" stroke="currentColor" stroke-width="1"/></g></marker><font-face font-family="Helvetica Neue" font-size="16" panose-1="2 0 8 3 0 0 0 9 0 4" units-per-em="1000" underline-position="-100" underline-thickness="50" slope="0" x-height="517" cap-height="714" ascent="975.0061" descent="-216.99524" font-weight="bold"><font-face-src><font-face-name name="HelveticaNeue-Bold"/></font-face-src></font-face><font-face font-family="Helvetica Neue" font-size="16" panose-1="2 0 5 3 0 0 0 2 0 4" units-per-em="1000" underline-position="-100" underline-thickness="50" slope="0" x-height="517" cap-height="714" ascent="951.99585" descent="-212.99744" font-weight="500"><font-face-src><font-face-name name="HelveticaNeue"/></font-face-src></font-face><marker orient="auto" overflow="visible" markerUnits="strokeWidth" id="Arrow_Marker" viewBox="-1 -4 10 8" markerWidth="10" markerHeight="8" color="black"><g><path d="M 8 0 L 0 -3 L 0 3 Z" fill="none" stroke="currentColor" stroke-width="1"/></g></marker><marker orient="auto" overflow="visible" markerUnits="strokeWidth" id="FilledArrow_Marker_2" viewBox="-9 -4 10 8" markerWidth="10" markerHeight="8" color="black"><g><path d="M -8 0 L 0 3 L 0 -3 Z" fill="currentColor" stroke="currentColor" stroke-width="1"/></g></marker></defs><g stroke="none" stroke-opacity="1" stroke-dasharray="none" fill="none" fill-opacity="1"><title>Figure 3</title><rect fill="white" width="1369.34646" height="968.34646"/><g><title>Ebene 1</title><line x1="666.51574" y1="348.66142" x2="666.51574" y2="574.037" marker-end="url(#FilledArrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><line x1="445.03937" y1="742.67716" x2="245.17559" y2="742.67716" marker-end="url(#FilledArrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="22.677165" y="581.10236" width="215.43307" height="232.44094" fill="#dadada"/><rect x="22.677165" y="581.10236" width="215.43307" height="232.44094" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(27.677165 677.8587)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="14.588535" y="16" textLength="180.704">Test Result Server</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="55.164535" y="35.464111" textLength="95.104"> </tspan></text><rect x="445.03937" y="584.06408" width="487.55905" height="229.47922" fill="#dadada"/><rect x="445.03937" y="584.06408" width="487.55905" height="229.47922" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(450.03937 662.07163)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="168.84353" y="16" textLength="10.08">V</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="178.04353" y="16" textLength="29.312">erifi</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="207.35553" y="16" textLength="101.36">cation Server</tspan></text><rect x="445.03937" y="235.27559" width="487.55905" height="114.197834" fill="#dadada"/><rect x="445.03937" y="235.27559" width="487.55905" height="114.197834" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(450.03937 255.64245)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="124.267526" y="16" textLength="117.632">Phone with Cor</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="241.61153" y="16" textLength="50.064">ona-W</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="291.08353" y="16" textLength="15.408">ar</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="306.77953" y="16" textLength="46.512">n-App</tspan></text><line x1="897.8622" y1="581.10236" x2="897.8622" y2="358.56142" marker-end="url(#FilledArrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="1125.3543" y="583.937" width="215.43307" height="155.90551" fill="#dadada"/><rect x="1125.3543" y="583.937" width="215.43307" height="155.90551" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(1130.3543 632.92565)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="33.092535" y="16" textLength="27.856">Cor</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="60.660535" y="16" textLength="50.064">ona-W</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="110.132535" y="16" textLength="15.408">ar</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="125.828535" y="16" textLength="46.512">n-App</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="77.956535" y="35.464111" textLength="49.52">Server</tspan></text><rect x="874.6624" y="381.84864" width="46.399607" height="28.346457" fill="white"/><rect x="874.6624" y="381.84864" width="46.399607" height="28.346457" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(879.6624 386.79787)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="3.3838035" y="15" textLength="9.184">T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="11.0958035" y="15" textLength="21.92">AN</tspan></text><path d="M 932.5984 291.9685 L 1250.0787 291.9685 L 1250.0787 576.87165" marker-end="url(#FilledArrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="1037.4803" y="300.47244" width="167.24409" height="28.346457" fill="white"/><rect x="1037.4803" y="300.47244" width="167.24409" height="28.346457" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(1042.4803 305.42167)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="63.806047" y="15" textLength="9.184">T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="71.518047" y="15" textLength="21.92">AN</tspan></text><rect x="1037.4803" y="252.28346" width="167.24409" height="48.188976" fill="white"/><rect x="1037.4803" y="252.28346" width="167.24409" height="48.188976" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(1042.4803 267.15395)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="23.654047" y="15" textLength="109.936">Diagnosis Keys</tspan></text><line x1="1125.3543" y1="626.4567" x2="942.4984" y2="626.4567" marker-end="url(#FilledArrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><line x1="932.5984" y1="688.8189" x2="1115.4543" y2="688.8189" marker-end="url(#Arrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="976.5354" y="609.4488" width="104.88189" height="28.346457" fill="white"/><rect x="976.5354" y="609.4488" width="104.88189" height="28.346457" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(981.5354 614.39804)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="32.624945" y="15" textLength="9.184">T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="40.336945" y="15" textLength="21.92">AN</tspan></text><rect x="976.5354" y="666.14173" width="104.88189" height="45.35433" fill="white"/><rect x="976.5354" y="666.14173" width="104.88189" height="45.35433" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(981.5354 670.3709)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="28.184945" y="15" textLength="38.512">valid/</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="17.064945" y="33.447998" textLength="60.752">not valid</tspan></text><text transform="translate(606.16535 524.98113)" fill="#b1001c"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="#b1001c" x="2.46" y="15" textLength="46.528">POST </tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="#b1001c" x="1.276" y="33.447998" textLength="10.656">/r</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="#b1001c" x="11.644" y="33.447998" textLength="34.08">esult</tspan></text><text transform="translate(946.13385 588.05946)" fill="#b1001c"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="#b1001c" x=".32" y="15" textLength="125.36">POST /tan_check</tspan></text><line x1="464.8819" y1="351.49606" x2="464.8819" y2="574.037" marker-end="url(#FilledArrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="133.228346" y="259.97539" width="144.56693" height="71.67815" fill="#dadada"/><rect x="133.228346" y="259.97539" width="144.56693" height="71.67815" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(138.228346 276.35036)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="25.507464" y="16" textLength="83.552">Printed QR</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="46.987464" y="35.464111" textLength="40.592">Code</tspan></text><line x1="277.79527" y1="294.80315" x2="435.13937" y2="294.80315" marker-end="url(#FilledArrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="306.65161" y="280.62992" width="104.88189" height="28.346457" fill="white"/><rect x="306.65161" y="280.62992" width="104.88189" height="28.346457" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(311.65161 285.57915)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="27.888945" y="15" textLength="39.104">GUID</tspan></text><text transform="translate(308.91732 239.52444)" fill="#b1001c"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="#b1001c" x=".34" y="15" textLength="104.32">Scan QR code</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="#b1001c" x="13.532" y="33.447998" textLength="77.936">via camera</tspan></text><rect x="416.6929" y="456.37795" width="99.2126" height="65.19685" fill="white"/><rect x="416.6929" y="456.37795" width="99.2126" height="65.19685" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(421.6929 479.75238)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="3.718299" y="15" textLength="81.776">hash(GUID)</tspan></text><circle cx="357.16535" cy="334.48819" r="17.007901" fill="white"/><circle cx="357.16535" cy="334.48819" r="17.007901" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(348.55905 325.26419)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="4.1582991" y="15" textLength="8.896">1</tspan></text><circle cx="442.20472" cy="377.00787" r="17.007901" fill="white"/><circle cx="442.20472" cy="377.00787" r="17.007901" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(433.59842 367.78387)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="4.1582991" y="15" textLength="8.896">2</tspan></text><circle cx="634.96063" cy="377.00787" r="17.007901" fill="white"/><circle cx="634.96063" cy="377.00787" r="17.007901" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(626.35433 367.78387)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="4.1582991" y="15" textLength="8.896">5</tspan></text><circle cx="342.99212" cy="796.53543" r="17.007901" fill="white"/><circle cx="342.99212" cy="796.53543" r="17.007901" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(334.38582 787.31143)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="4.1582991" y="15" textLength="8.896">6</tspan></text><circle cx="754.01574" cy="445.03937" r="17.007901" fill="white"/><circle cx="754.01574" cy="445.03937" r="17.007901" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(745.40944 435.81537)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="4.1582991" y="15" textLength="8.896">8</tspan></text><circle cx="997.79527" cy="314.64567" r="19.842551" fill="white"/><circle cx="997.79527" cy="314.64567" r="19.842551" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(986.92125 305.42167)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="1.9780157" y="15" textLength="17.792">12</tspan></text><circle cx="1099.8425" cy="586.77165" r="19.842551" fill="white"/><circle cx="1099.8425" cy="586.77165" r="19.842551" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(1088.9685 577.54765)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="1.9780157" y="15" textLength="17.792">13</tspan></text><circle cx="1054.4882" cy="737.00787" r="19.842551" fill="white"/><circle cx="1054.4882" cy="737.00787" r="19.842551" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(1043.61417 727.78387)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="1.9780157" y="15" textLength="17.792">15</tspan></text><line x1="844.7244" y1="348.66142" x2="844.7244" y2="571.20236" marker-end="url(#FilledArrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(796.7244 524.98113)" fill="#b1001c"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="#b1001c" x=".46" y="15" textLength="42.08">POST</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="#b1001c" x="7.572" y="33.447998" textLength="27.856">/tan</tspan></text><line x1="728.50393" y1="359.37342" x2="728.50393" y2="586.77165" marker-start="url(#FilledArrow_Marker_2)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="688.11023" y="382.92908" width="80.7874" height="28.346457" fill="white"/><rect x="688.11023" y="382.92908" width="80.7874" height="28.346457" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(693.11023 387.8783)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="12.8737006" y="15" textLength="45.04">Result</tspan></text><circle cx="819.2126" cy="379.84252" r="19.842551" fill="white"/><circle cx="819.2126" cy="379.84252" r="19.842551" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(808.3386 370.61852)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="6.4260157" y="15" textLength="8.896">9</tspan></text><circle cx="924.0945" cy="447.874" r="19.842551" fill="white"/><circle cx="924.0945" cy="447.874" r="19.842551" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(913.22047 438.65001)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="1.9780157" y="15" textLength="17.792">11</tspan></text><line x1="530.07874" y1="358.56142" x2="530.07874" y2="585.95964" marker-start="url(#FilledArrow_Marker_2)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="479.5866" y="373.12293" width="100.98425" height="43.055016" fill="white"/><rect x="479.5866" y="373.12293" width="100.98425" height="43.055016" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(484.5866 376.20244)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="2.5321257" y="15" textLength="90.368">Registration </tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="24.300126" y="33.447998" textLength="9.184">T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="31.708126" y="33.447998" textLength="34.976">oken</tspan></text><circle cx="561.25984" cy="445.03937" r="17.007901" fill="white"/><circle cx="561.25984" cy="445.03937" r="17.007901" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(552.65354 435.81537)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="4.1582991" y="15" textLength="8.896">4</tspan></text><rect x="269.29134" y="708.6614" width="133.228346" height="65.19685" fill="white"/><rect x="269.29134" y="708.6614" width="133.228346" height="65.19685" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(274.29134 732.03584)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="20.726173" y="15" textLength="81.776">hash(GUID)</tspan></text><line x1="236.80806" y1="663.3071" x2="435.13937" y2="663.3071" marker-end="url(#Arrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="302.93222" y="649.13385" width="80.7874" height="28.346457" fill="white"/><rect x="302.93222" y="649.13385" width="80.7874" height="28.346457" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(307.93222 654.0831)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="12.8737006" y="15" textLength="45.04">Result</tspan></text><circle cx="342.99212" cy="626.4567" r="17.007901" fill="white"/><circle cx="342.99212" cy="626.4567" r="17.007901" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(334.38582 617.2327)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="4.1582991" y="15" textLength="8.896">7</tspan></text><text transform="translate(411.2126 399.06775)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="2.836" y="15" textLength="37.328">Initial</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x=".308" y="33.447998" textLength="42.384">Setup</tspan></text><text transform="translate(607.62598 399.79175)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x=".356" y="15" textLength="48.288">Polling</tspan></text><text transform="translate(776.0236 404.73704)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="16.684" y="15" textLength="9.184">T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="24.396" y="15" textLength="21.92">AN</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x=".396" y="33.447998" textLength="62.208">Retrieval</tspan></text><path d="M 832.83464 813.5433 L 832.83464 847.55905 L 787.4803 847.55905 L 787.4803 823.4433" marker-end="url(#FilledArrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><circle cx="864.01574" cy="839.0551" r="19.842551" fill="white"/><circle cx="864.01574" cy="839.0551" r="19.842551" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(853.14173 829.8311)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="1.9780157" y="15" textLength="17.792">10</tspan></text><text transform="translate(759.01574 859.00434)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x=".072" y="15" textLength="79.408">Generate T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="78.008" y="15" textLength="21.92">AN</tspan></text><path d="M 555.03937 813.5433 L 555.03937 847.55905 L 509.68504 847.55905 L 509.68504 823.4433" marker-end="url(#FilledArrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><circle cx="583.38582" cy="836.22047" r="17.007901" fill="white"/><circle cx="583.38582" cy="836.22047" r="17.007901" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(574.77952 826.99647)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="4.1582991" y="15" textLength="8.896">3</tspan></text><text transform="translate(429.72047 859.00434)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x=".012" y="15" textLength="169.776">Generate Registration T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="168.012" y="15" textLength="34.976">oken</tspan></text><path d="M 1198.5039 738.18897 L 1198.5039 772.2047 L 1153.1496 772.2047 L 1153.1496 748.08897" marker-end="url(#FilledArrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(1118.685 782.926)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x=".44" y="15" textLength="29.92">Stor</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="30.072" y="15" textLength="81.488">e diagnosis</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="39.552" y="33.447998" textLength="32.896">keys</tspan></text><circle cx="1252.9134" cy="768.18897" r="19.842551" fill="white"/><circle cx="1252.9134" cy="768.18897" r="19.842551" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(1242.03936 758.96497)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="1.9780157" y="15" textLength="17.792">16</tspan></text><rect x="616.0236" y="470.86968" width="100.98425" height="43.055016" fill="white"/><rect x="616.0236" y="470.86968" width="100.98425" height="43.055016" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(621.0236 473.9492)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="2.5321257" y="15" textLength="90.368">Registration </tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="24.300126" y="33.447998" textLength="9.184">T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="31.708126" y="33.447998" textLength="34.976">oken</tspan></text><rect x="791.92913" y="470.55118" width="100.98425" height="43.055016" fill="white"/><rect x="791.92913" y="470.55118" width="100.98425" height="43.055016" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(796.92913 473.6307)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="2.5321257" y="15" textLength="90.368">Registration </tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="24.300126" y="33.447998" textLength="9.184">T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="31.708126" y="33.447998" textLength="34.976">oken</tspan></text><path d="M 39.181102 759.68503 L 218.77165 759.68503 C 223.18993 759.68503 226.77165 763.26676 226.77165 767.68503 L 226.77165 797.03937 C 226.77165 801.45764 223.18993 805.03937 218.77165 805.03937 L 39.181102 805.03937 C 34.762824 805.03937 31.181102 801.45764 31.181102 797.03937 L 31.181102 767.68503 C 31.181102 763.26676 34.762824 759.68503 39.181102 759.68503 Z" fill="white"/><path d="M 39.181102 759.68503 L 218.77165 759.68503 C 223.18993 759.68503 226.77165 763.26676 226.77165 767.68503 L 226.77165 797.03937 C 226.77165 801.45764 223.18993 805.03937 218.77165 805.03937 L 39.181102 805.03937 C 34.762824 805.03937 31.181102 801.45764 31.181102 797.03937 L 31.181102 767.68503 C 31.181102 763.26676 34.762824 759.68503 39.181102 759.68503 Z" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="36.850393" y="768.18897" width="96.37795" height="28.346457" fill="white"/><rect x="36.850393" y="768.18897" width="96.37795" height="28.346457" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(41.850393 773.1382)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="2.3009761" y="15" textLength="81.776">hash(GUID)</tspan></text><rect x="133.228346" y="768.18897" width="87.874015" height="28.346457" fill="white"/><rect x="133.228346" y="768.18897" width="87.874015" height="28.346457" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(138.228346 773.1382)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="2.6330076" y="15" textLength="9.184">T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="10.0410076" y="15" textLength="31.408">est r</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="41.161008" y="15" textLength="34.08">esult</tspan></text><path d="M 481.38582 722.83464 L 904.7559 722.83464 C 909.1742 722.83464 912.7559 726.41636 912.7559 730.83464 L 912.7559 754.5197 C 912.7559 758.93796 909.1742 762.5197 904.7559 762.5197 L 481.38582 762.5197 C 476.96755 762.5197 473.38582 758.93796 473.38582 754.5197 L 473.38582 730.83464 C 473.38582 726.41636 476.96755 722.83464 481.38582 722.83464 Z" fill="white"/><path d="M 481.38582 722.83464 L 904.7559 722.83464 C 909.1742 722.83464 912.7559 726.41636 912.7559 730.83464 L 912.7559 754.5197 C 912.7559 758.93796 909.1742 762.5197 904.7559 762.5197 L 481.38582 762.5197 C 476.96755 762.5197 473.38582 758.93796 473.38582 754.5197 L 473.38582 730.83464 C 473.38582 726.41636 476.96755 722.83464 481.38582 722.83464 Z" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="479.50702" y="728.50393" width="223.4851" height="28.346457" fill="white"/><rect x="479.50702" y="728.50393" width="223.4851" height="28.346457" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(484.50702 733.45316)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="65.854553" y="15" textLength="81.776">hash(GUID)</tspan></text><rect x="702.99212" y="728.50393" width="203.76583" height="28.346457" fill="white"/><rect x="702.99212" y="728.50393" width="203.76583" height="28.346457" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(707.99212 733.45316)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="9.170916" y="15" textLength="138.08">hash(Registration T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="145.47492" y="15" textLength="39.12">oken)</tspan></text><path d="M 481.38582 768.18897 L 904.7559 768.18897 C 909.1742 768.18897 912.7559 771.7707 912.7559 776.18897 L 912.7559 799.874 C 912.7559 804.2923 909.1742 807.874 904.7559 807.874 L 481.38582 807.874 C 476.96755 807.874 473.38582 804.2923 473.38582 799.874 L 473.38582 776.18897 C 473.38582 771.7707 476.96755 768.18897 481.38582 768.18897 Z" fill="white"/><path d="M 481.38582 768.18897 L 904.7559 768.18897 C 909.1742 768.18897 912.7559 771.7707 912.7559 776.18897 L 912.7559 799.874 C 912.7559 804.2923 909.1742 807.874 904.7559 807.874 L 481.38582 807.874 C 476.96755 807.874 473.38582 804.2923 473.38582 799.874 L 473.38582 776.18897 C 473.38582 771.7707 476.96755 768.18897 481.38582 768.18897 Z" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="591.64284" y="774.1929" width="223.4851" height="28.346457" fill="white"/><rect x="591.64284" y="774.1929" width="223.4851" height="28.346457" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(596.64284 779.14214)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="70.590553" y="15" textLength="47.712">hash(T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="116.83055" y="15" textLength="26.064">AN)</tspan></text><path d="M 481.38582 303.30708 L 904.7559 303.30708 C 909.1742 303.30708 912.7559 306.8888 912.7559 311.30708 L 912.7559 334.99212 C 912.7559 339.4104 909.1742 342.99212 904.7559 342.99212 L 481.38582 342.99212 C 476.96755 342.99212 473.38582 339.4104 473.38582 334.99212 L 473.38582 311.30708 C 473.38582 306.8888 476.96755 303.30708 481.38582 303.30708 Z" fill="white"/><path d="M 481.38582 303.30708 L 904.7559 303.30708 C 909.1742 303.30708 912.7559 306.8888 912.7559 311.30708 L 912.7559 334.99212 C 912.7559 339.4104 909.1742 342.99212 904.7559 342.99212 L 481.38582 342.99212 C 476.96755 342.99212 473.38582 339.4104 473.38582 334.99212 L 473.38582 311.30708 C 473.38582 306.8888 476.96755 303.30708 481.38582 303.30708 Z" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="591.64284" y="309.31102" width="223.4851" height="28.346457" fill="white"/><rect x="591.64284" y="309.31102" width="223.4851" height="28.346457" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(596.64284 314.26025)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="40.366553" y="15" textLength="99.552">Registration T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="138.14255" y="15" textLength="34.976">oken</tspan></text><path d="M 1170.2047 691.65354 L 1295.937 691.65354 C 1300.3553 691.65354 1303.937 695.23526 1303.937 699.65354 L 1303.937 723.33858 C 1303.937 727.75686 1300.3553 731.3386 1295.937 731.3386 L 1170.2047 731.3386 C 1165.78644 731.3386 1162.2047 727.75686 1162.2047 723.33858 L 1162.2047 699.65354 C 1162.2047 695.23526 1165.78644 691.65354 1170.2047 691.65354 Z" fill="white"/><path d="M 1170.2047 691.65354 L 1295.937 691.65354 C 1300.3553 691.65354 1303.937 695.23526 1303.937 699.65354 L 1303.937 723.33858 C 1303.937 727.75686 1300.3553 731.3386 1295.937 731.3386 L 1170.2047 731.3386 C 1165.78644 731.3386 1162.2047 727.75686 1162.2047 723.33858 L 1162.2047 699.65354 C 1162.2047 695.23526 1165.78644 691.65354 1170.2047 691.65354 Z" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><rect x="1170.70865" y="697.65748" width="124.72441" height="28.346457" fill="white"/><rect x="1170.70865" y="697.65748" width="124.72441" height="28.346457" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(1175.70865 702.6067)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="2.3942044" y="15" textLength="109.936">Diagnosis Keys</tspan></text><path d="M 932.5984 742.67716 L 977.95275 742.67716 L 977.95275 793.7008 L 942.4984 793.7008" marker-end="url(#FilledArrow_Marker)" stroke="black" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(937.5984 805.14608)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x=".308" y="15" textLength="9.776">V</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="9.204" y="15" textLength="61.04">alidate T</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" x="68.772" y="15" textLength="21.92">AN</tspan></text><circle cx="1003.46456" cy="773.85826" r="19.842551" fill="white"/><circle cx="1003.46456" cy="773.85826" r="19.842551" stroke="blue" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"/><text transform="translate(992.59055 764.63426)" fill="blue"><tspan font-family="Helvetica Neue" font-size="16" font-weight="500" fill="blue" x="1.9780157" y="15" textLength="17.792">14</tspan></text><text transform="translate(22.007874 915.1892)" fill="black"><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x=".196" y="16" textLength="39.104">Figur</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="39.012" y="16" textLength="81.504">e 3: Data fl</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="120.516" y="16" textLength="119.408">ow for the verifi</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="239.924" y="16" textLength="67.84">cation pr</tspan><tspan font-family="Helvetica Neue" font-size="16" font-weight="bold" x="307.476" y="16" textLength="45.328">ocess</tspan></text></g></g></svg>
diff --git a/pom.xml b/pom.xml
index 31c4986f..59ecc221 100644
--- a/pom.xml
+++ b/pom.xml
@@ -5,37 +5,93 @@
 
   <groupId>app.coronawarn.verification</groupId>
   <artifactId>cwa-verification-server</artifactId>
-  <version>0.3.2-SNAPSHOT</version>
+  <version>0.5.2-SNAPSHOT</version>
   <packaging>jar</packaging>
 
   <name>cwa-verification-server</name>
   <description>CWA verification server project.</description>
 
-  <parent>
-    <groupId>org.springframework.boot</groupId>
-    <artifactId>spring-boot-starter-parent</artifactId>
-    <version>2.3.0.RELEASE</version>
-    <relativePath/>
-  </parent>
+  <url>https://www.coronawarn.app/</url>
+  <ciManagement>
+    <url>https://github.com/corona-warn-app/cwa-verification-server/actions?query=workflow%3Aci</url>
+  </ciManagement>
+  <issueManagement>
+    <url>https://github.com/corona-warn-app/cwa-verification-server/issues</url>
+  </issueManagement>
+  <scm>
+    <url>https://github.com/corona-warn-app/cwa-verification-server</url>
+  </scm>
 
   <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
+    <!-- java -->
     <java.version>11</java.version>
     <maven.compiler.source>11</maven.compiler.source>
     <maven.compiler.target>11</maven.compiler.target>
+    <!-- charset -->
+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
+    <!-- dependencies -->
+    <spring.boot.version>2.3.0.RELEASE</spring.boot.version>
+    <spring.cloud.version>Hoxton.SR4</spring.cloud.version>
     <lombok.version>1.18.12</lombok.version>
     <liquibase.version>3.9.0</liquibase.version>
-    <feign.version>11.0</feign.version>
-    <openfeign.version>2.2.2.RELEASE</openfeign.version>
     <springdoc.version>1.3.9</springdoc.version>
-    <jacoco.version>0.8.5</jacoco.version>
-    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
-    <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
-    <sonar.jacoco.reportPath>${project.basedir}/../target/jacoco.exec</sonar.jacoco.reportPath>
-    <sonar.language>java</sonar.language>
+    <!-- plugins -->
+    <plugin.checkstyle.version>3.1.1</plugin.checkstyle.version>
+    <plugin.sonar.version>3.6.1.1688</plugin.sonar.version>
+    <plugin.jacoco.version>0.8.5</plugin.jacoco.version>
+    <guava.version>29.0-jre</guava.version>
+    
+    <sonar.coverage.exclusions>
+      **/VerificationApplication.java,
+      **/model/*,
+      **/domain/*,
+      **/config/*,
+      **/exception/*
+    </sonar.coverage.exclusions>    
   </properties>
 
+  <dependencyManagement>
+    <dependencies>
+      <dependency>
+        <groupId>org.springframework.boot</groupId>
+        <artifactId>spring-boot-dependencies</artifactId>
+        <version>${spring.boot.version}</version>
+        <type>pom</type>
+        <scope>import</scope>
+      </dependency>
+      <dependency>
+        <groupId>org.springframework.cloud</groupId>
+        <artifactId>spring-cloud-dependencies</artifactId>
+        <version>${spring.cloud.version}</version>
+        <type>pom</type>
+        <scope>import</scope>
+      </dependency>
+      <dependency>
+        <groupId>org.projectlombok</groupId>
+        <artifactId>lombok</artifactId>
+        <version>${lombok.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.springdoc</groupId>
+        <artifactId>springdoc-openapi-ui</artifactId>
+        <version>${springdoc.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.liquibase</groupId>
+        <artifactId>liquibase-core</artifactId>
+        <version>${liquibase.version}</version>
+      </dependency>
+    </dependencies>
+  </dependencyManagement>
+
+  <distributionManagement>
+    <repository>
+      <id>github</id>
+      <url>https://maven.pkg.github.com/corona-warn-app/cwa-verification-server</url>
+    </repository>
+  </distributionManagement>
+
   <dependencies>
     <dependency>
       <groupId>org.springframework.boot</groupId>
@@ -43,8 +99,11 @@
     </dependency>
     <dependency>
       <groupId>org.springframework.boot</groupId>
-      <artifactId>spring-boot-starter-test</artifactId>
-      <scope>test</scope>
+      <artifactId>spring-boot-starter-validation</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-actuator</artifactId>
     </dependency>
     <dependency>
       <groupId>org.springframework.boot</groupId>
@@ -54,21 +113,37 @@
       <groupId>org.springframework.boot</groupId>
       <artifactId>spring-boot-starter-web</artifactId>
     </dependency>
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-security</artifactId>
+    </dependency>
     <dependency>
       <groupId>org.springframework.cloud</groupId>
       <artifactId>spring-cloud-starter-openfeign</artifactId>
-      <version>${openfeign.version}</version>
+      <exclusions>
+        <exclusion>
+          <groupId>com.google.guava</groupId>
+          <artifactId>guava</artifactId>
+        </exclusion>
+      </exclusions>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework.cloud</groupId>
+      <artifactId>spring-cloud-starter-sleuth</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>com.google.guava</groupId>
+      <artifactId>guava</artifactId>
+      <version>${guava.version}</version>
     </dependency>
     <dependency>
       <groupId>org.projectlombok</groupId>
       <artifactId>lombok</artifactId>
-      <version>${lombok.version}</version>
       <scope>provided</scope>
     </dependency>
     <dependency>
       <groupId>org.springdoc</groupId>
       <artifactId>springdoc-openapi-ui</artifactId>
-      <version>${springdoc.version}</version>
     </dependency>
     <dependency>
       <groupId>commons-codec</groupId>
@@ -77,7 +152,14 @@
     <dependency>
       <groupId>org.liquibase</groupId>
       <artifactId>liquibase-core</artifactId>
-      <version>${liquibase.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>io.micrometer</groupId>
+      <artifactId>micrometer-core</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>io.micrometer</groupId>
+      <artifactId>micrometer-registry-prometheus</artifactId>
     </dependency>
     <dependency>
       <groupId>com.h2database</groupId>
@@ -89,21 +171,54 @@
       <artifactId>postgresql</artifactId>
       <scope>runtime</scope>
     </dependency>
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-test</artifactId>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
 
   <build>
+    <pluginManagement>
+      <plugins>
+        <plugin>
+          <groupId>org.springframework.boot</groupId>
+          <artifactId>spring-boot-maven-plugin</artifactId>
+          <version>${spring.boot.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.apache.maven.plugins</groupId>
+          <artifactId>maven-checkstyle-plugin</artifactId>
+          <version>${plugin.checkstyle.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.sonarsource.scanner.maven</groupId>
+          <artifactId>sonar-maven-plugin</artifactId>
+          <version>${plugin.sonar.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.jacoco</groupId>
+          <artifactId>jacoco-maven-plugin</artifactId>
+          <version>${plugin.jacoco.version}</version>
+        </plugin>
+      </plugins>
+    </pluginManagement>
     <plugins>
       <plugin>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-maven-plugin</artifactId>
-        <configuration>
-          <fork>true</fork>
-        </configuration>
+        <executions>
+          <execution>
+            <goals>
+              <goal>repackage</goal>
+              <goal>build-info</goal>
+            </goals>
+          </execution>
+        </executions>
       </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-checkstyle-plugin</artifactId>
-        <version>3.1.1</version>
         <configuration>
           <configLocation>codestyle/checkstyle.xml</configLocation>
           <excludes>target/**/*</excludes>
@@ -127,28 +242,14 @@
       <plugin>
         <groupId>org.jacoco</groupId>
         <artifactId>jacoco-maven-plugin</artifactId>
-        <version>${jacoco.version}</version>
-        <configuration>
-          <skip>${maven.test.skip}</skip>
-          <destFile>${basedir}/target/coverage-reports/jacoco-unit.exec</destFile>
-          <dataFile>${basedir}/target/coverage-reports/jacoco-unit.exec</dataFile>
-          <output>file</output>
-          <append>true</append>
-          <excludes>
-            <exclude>*MethodAccess</exclude>
-          </excludes>
-        </configuration>
         <executions>
           <execution>
-            <id>jacoco-initialize</id>
             <goals>
               <goal>prepare-agent</goal>
             </goals>
-            <phase>test-compile</phase>
           </execution>
           <execution>
-            <id>jacoco-site</id>
-            <phase>verify</phase>
+            <id>report</id>
             <goals>
               <goal>report</goal>
             </goals>
@@ -157,5 +258,4 @@
       </plugin>
     </plugins>
   </build>
-
 </project>
diff --git a/src/main/java/app/coronawarn/verification/VerificationApplication.java b/src/main/java/app/coronawarn/verification/VerificationApplication.java
index 46b57c2f..05eadfb0 100644
--- a/src/main/java/app/coronawarn/verification/VerificationApplication.java
+++ b/src/main/java/app/coronawarn/verification/VerificationApplication.java
@@ -21,14 +21,28 @@
 
 package app.coronawarn.verification;
 
+import app.coronawarn.verification.config.VerificationApplicationConfig;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.cloud.openfeign.EnableFeignClients;
+import org.springframework.scheduling.annotation.EnableScheduling;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
 
-@SpringBootApplication
+/**
+ * The Application class.
+ */
 @EnableFeignClients
+@SpringBootApplication
+@EnableWebSecurity
+@EnableScheduling
+@EnableConfigurationProperties({VerificationApplicationConfig.class})
 public class VerificationApplication {
 
+  /**
+   * The main Method.
+   * @param args the args for the main method
+   */
   public static void main(String[] args) {
     SpringApplication.run(VerificationApplication.class, args);
   }
diff --git a/src/main/java/app/coronawarn/verification/client/LabServerClient.java b/src/main/java/app/coronawarn/verification/client/LabServerClient.java
index 534491f2..7b6dd2e4 100644
--- a/src/main/java/app/coronawarn/verification/client/LabServerClient.java
+++ b/src/main/java/app/coronawarn/verification/client/LabServerClient.java
@@ -1,40 +1,45 @@
-/*
- * Corona-Warn-App / cwa-verification
- *
- * (C) 2020, T-Systems International GmbH
- *
- * Deutsche Telekom AG and all other contributors /
- * copyright owners license this file to you under the Apache
- * License, Version 2.0 (the "License"); you may not use this
- * file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package app.coronawarn.verification.client;
-
-import org.springframework.cloud.openfeign.FeignClient;
-import org.springframework.http.MediaType;
-import org.springframework.web.bind.annotation.PostMapping;
-
-/**
- * This class represents the Labor Server service client.
- *
- * @author T-Systems International GmbH
- */
-@FeignClient(name = "labServerService", url = "${uri.endpoint.labserver}")
-public interface LabServerClient {
-  @PostMapping(value = "/api/v1/app/result",
-    consumes = MediaType.APPLICATION_JSON_VALUE,
-    produces = MediaType.APPLICATION_JSON_VALUE
-  )
-  TestResult result(HashedGuid guid);
-}
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.client;
+
+import app.coronawarn.verification.model.HashedGuid;
+import app.coronawarn.verification.model.TestResult;
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.http.MediaType;
+import org.springframework.web.bind.annotation.PostMapping;
+
+/**
+ * This class represents the Labor Server service feign client.
+ */
+@FeignClient(name = "labServerService", url = "${uri.endpoint.labserver}")
+public interface LabServerClient {
+  /**
+   * This method gets a testResult from the LabServer.
+   * @param guid for Testresult
+   * @return Testresult from server
+   */
+  @PostMapping(value = "/api/v1/app/result",
+    consumes = MediaType.APPLICATION_JSON_VALUE,
+    produces = MediaType.APPLICATION_JSON_VALUE
+  )
+  TestResult result(HashedGuid guid);
+}
diff --git a/src/main/java/app/coronawarn/verification/config/OpenApiConfig.java b/src/main/java/app/coronawarn/verification/config/OpenApiConfig.java
index b18806e7..23583fc2 100644
--- a/src/main/java/app/coronawarn/verification/config/OpenApiConfig.java
+++ b/src/main/java/app/coronawarn/verification/config/OpenApiConfig.java
@@ -24,29 +24,31 @@
 import io.swagger.v3.oas.models.OpenAPI;
 import io.swagger.v3.oas.models.info.Info;
 import io.swagger.v3.oas.models.info.License;
+import lombok.RequiredArgsConstructor;
+import org.springframework.boot.info.BuildProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
 /**
  * This class represents the open api config.
- *
- * @author T-Systems International GmbH
  */
+@RequiredArgsConstructor
 @Configuration
 public class OpenApiConfig {
 
+  private final BuildProperties buildProperties;
+
   /**
-   * Configure the open api bean.
+   * Configure the open api bean with build property values.
    *
-   * @return the open api config
+   * @return the configured open api config
    */
   @Bean
   public OpenAPI openApi() {
     return new OpenAPI()
       .info(new Info()
-        .title("cwa-verification-server")
-        .description("OpenApi documentation of cwa-verification-server")
-        .version("0.3.2-SNAPSHOT")
+        .title(buildProperties.getArtifact())
+        .version(buildProperties.getVersion())
         .license(new License()
           .name("Apache 2.0")
           .url("http://www.apache.org/licenses/LICENSE-2.0")));
diff --git a/src/main/java/app/coronawarn/verification/config/SecurityConfig.java b/src/main/java/app/coronawarn/verification/config/SecurityConfig.java
new file mode 100644
index 00000000..cf025c10
--- /dev/null
+++ b/src/main/java/app/coronawarn/verification/config/SecurityConfig.java
@@ -0,0 +1,57 @@
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.config;
+
+import java.util.Arrays;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.http.HttpMethod;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
+import org.springframework.security.web.firewall.HttpFirewall;
+import org.springframework.security.web.firewall.StrictHttpFirewall;
+
+@Configuration
+public class SecurityConfig extends WebSecurityConfigurerAdapter {
+
+  @Bean
+  protected HttpFirewall strictFirewall() {
+    StrictHttpFirewall firewall = new StrictHttpFirewall();
+    firewall.setAllowedHttpMethods(Arrays.asList(
+      HttpMethod.GET.name(),
+      HttpMethod.POST.name()
+    ));
+    return firewall;
+  }
+
+  @Override
+  protected void configure(HttpSecurity http) throws Exception {
+    http.authorizeRequests()
+      .mvcMatchers("/api/**").permitAll()
+      .mvcMatchers("/version/**").permitAll()
+      .mvcMatchers("/actuator/**").permitAll()
+      .anyRequest().denyAll()
+      .and().csrf().disable();
+  }
+
+}
+
diff --git a/src/main/java/app/coronawarn/verification/config/VerificationApplicationConfig.java b/src/main/java/app/coronawarn/verification/config/VerificationApplicationConfig.java
new file mode 100644
index 00000000..a14b40d7
--- /dev/null
+++ b/src/main/java/app/coronawarn/verification/config/VerificationApplicationConfig.java
@@ -0,0 +1,92 @@
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, YOUR_NAME, YOUR_COMPANY
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.config;
+
+import lombok.Getter;
+import lombok.Setter;
+import org.springframework.boot.context.properties.ConfigurationProperties;
+
+/**
+ * This class and its nested subclasses are used to read in values from configuration file application.yml,
+ * which is loaded via the '@EnableConfigurationProperties' annotation from SpringBootApplication main class.
+ */
+@Getter
+@Setter
+@ConfigurationProperties
+public class VerificationApplicationConfig {
+
+  private TanCfg tan = new TanCfg();
+  private AppSessionCfg appsession = new AppSessionCfg();
+  private EntitiesCfg entities = new EntitiesCfg();
+
+  public static class TeleCfg {
+    @Getter
+    @Setter
+    private TeleValidCfg valid = new TeleValidCfg();
+
+    public static class TeleValidCfg {
+
+      // Number of hours that teleTAN remains valid
+      @Getter
+      @Setter
+      private int hours = 1;
+    }
+  }
+
+  public static class ValidCfg {
+
+    // Number of days that TAN remains valid
+    @Getter
+    @Setter
+    int days = 14;
+  }
+
+  public static class TanCfg {
+    @Getter
+    @Setter
+    private TeleCfg tele = new TeleCfg();
+
+    @Getter
+    @Setter
+    private ValidCfg valid = new ValidCfg();
+  }
+
+  public static class AppSessionCfg {
+
+    // Maximum number of tans in a session at one time
+    @Getter
+    @Setter
+    int tancountermax = 2;
+  }
+
+  public static class EntitiesCfg {
+    @Getter
+    @Setter
+    private CleanupCfg cleanup = new CleanupCfg();
+  }
+
+  public static class CleanupCfg {
+    @Getter
+    @Setter
+    private Integer days = 21;
+  }
+}
diff --git a/src/main/java/app/coronawarn/verification/controller/VerificationController.java b/src/main/java/app/coronawarn/verification/controller/VerificationController.java
index f5bb9452..210bd956 100644
--- a/src/main/java/app/coronawarn/verification/controller/VerificationController.java
+++ b/src/main/java/app/coronawarn/verification/controller/VerificationController.java
@@ -1,270 +1,287 @@
-/*
- * Corona-Warn-App / cwa-verification
- *
- * (C) 2020, T-Systems International GmbH
- *
- * Deutsche Telekom AG and all other contributors /
- * copyright owners license this file to you under the Apache
- * License, Version 2.0 (the "License"); you may not use this
- * file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package app.coronawarn.verification.controller;
-
-import app.coronawarn.verification.client.HashedGuid;
-import app.coronawarn.verification.client.TestResult;
-import app.coronawarn.verification.domain.VerificationAppSession;
-import app.coronawarn.verification.domain.VerificationTan;
-import app.coronawarn.verification.model.AppSessionSourceOfTrust;
-import app.coronawarn.verification.model.LabTestResult;
-import app.coronawarn.verification.model.RegistrationToken;
-import app.coronawarn.verification.model.RegistrationTokenKeyType;
-import app.coronawarn.verification.model.RegistrationTokenRequest;
-import app.coronawarn.verification.model.Tan;
-import app.coronawarn.verification.model.TanSourceOfTrust;
-import app.coronawarn.verification.service.AppSessionService;
-import app.coronawarn.verification.service.LabServerService;
-import app.coronawarn.verification.service.TanService;
-import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.responses.ApiResponse;
-import io.swagger.v3.oas.annotations.responses.ApiResponses;
-import java.time.LocalDateTime;
-import java.util.Optional;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.MediaType;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
-
-/**
- * This class represents the rest controller for the verification server.
- */
-@Slf4j
-@RestController
-@RequestMapping("/version/v1")
-public class VerificationController {
-
-  /**
-   * The route to the token registration endpoint.
-   */
-  public static final String REGISTRATION_TOKEN_ROUTE = "/registrationToken";
-  /**
-   * The route to the tan generation endpoint.
-   */
-  public static final String TAN_ROUTE = "/tan";
-  /**
-   * The route to the test status of the COVID-19 test endpoint.
-   */
-  public static final String TESTRESULT_ROUTE = "/testresult";
-  /**
-   * The route to the tan verification endpoint.
-   */
-  public static final String TAN_VERIFY_ROUTE = "/tan/verify";
-  /**
-   * The route to the tele tan generation endpoint.
-   */
-  public static final String TELE_TAN_ROUTE = "/tan/teletan";
-
-  @Value("${appsession.tancountermax}")
-  private Integer tanCounterMax;
-
-  @Autowired
-  private AppSessionService appSessionService;
-
-  @Autowired
-  private LabServerService labServerService;
-
-  @Autowired
-  private TanService tanService;
-
-  /**
-   * This method generates a registrationToken by a hashed guid or a teleTan.
-   *
-   * @param request {@link RegistrationTokenRequest}
-   * @return RegistrationToken - the created registration token {@link RegistrationToken}
-   */
-  @Operation(
-    summary = "Get registration Token",
-    description = "Get a registration token by providing a SHA-256 hasehd GUID or a TeleTAN"
-  )
-  @ApiResponses(value = {
-    @ApiResponse(responseCode = "201", description = "registration token generated."),
-    @ApiResponse(responseCode = "400", description = "GUID/TeleTAN already exists."),
-  })
-  @PostMapping(value = REGISTRATION_TOKEN_ROUTE,
-    consumes = MediaType.APPLICATION_JSON_VALUE,
-    produces = MediaType.APPLICATION_JSON_VALUE
-  )
-  public ResponseEntity<RegistrationToken> generateRegistrationToken(@RequestBody RegistrationTokenRequest request) {
-    String key = request.getKey();
-    RegistrationTokenKeyType keyType = request.getKeyType();
-
-    if (keyType == RegistrationTokenKeyType.TELETAN) {
-      if (tanService.verifyTeleTan(key)) {
-        ResponseEntity<RegistrationToken> response = appSessionService.generateRegistrationToken(key, keyType);
-        Optional<VerificationTan> optional = tanService.getEntityByTan(key);
-        if (optional.isPresent()) {
-          VerificationTan teleTan = optional.get();
-          teleTan.setRedeemed(true);
-          tanService.saveTan(teleTan);
-          return response;
-        } else {
-          log.warn("Teletan is not found");
-        }
-      }
-    } else {
-      return appSessionService.generateRegistrationToken(key, keyType);
-    }
-    return ResponseEntity.badRequest().build();
-  }
-
-  /**
-   * This method generates a transaction number by a Registration Token, if
-   * the state of the COVID-19 lab-test is positive.
-   *
-   * @param registrationToken generated by a hashed guid or a teleTan. {@link RegistrationToken}
-   * @return A generated TAN (with the HTTP-state 201 Created). Otherwise the
-   *     HTTP-state 400 (Bad Request) will be returned, if an error occurs.
-   */
-  @Operation(
-    summary = "Generates a Tan",
-    description = "Generates a TAN on input of Registration Token. With the TAN one can submit his Diagnosis keys"
-  )
-  @ApiResponses(value = {
-    @ApiResponse(responseCode = "201", description = "Registration Token is valid"),
-    @ApiResponse(responseCode = "400", description = "Registration Token does not exist"),
-  })
-  @PostMapping(value = TAN_ROUTE,
-    consumes = MediaType.APPLICATION_JSON_VALUE,
-    produces = MediaType.APPLICATION_JSON_VALUE
-  )
-  public ResponseEntity<Tan> generateTan(@RequestBody RegistrationToken registrationToken) {
-
-    Optional<VerificationAppSession> actual =
-      appSessionService.getAppSessionByToken(registrationToken.getRegistrationToken());
-    if (actual.isPresent()) {
-      VerificationAppSession appSession = actual.get();
-      if (appSession.getTanCounter() < tanCounterMax) {
-        String sourceOfTrust = appSession.getSourceOfTrust();
-        if (AppSessionSourceOfTrust.HASHED_GUID.getSourceName().equals(sourceOfTrust)) {
-          sourceOfTrust = TanSourceOfTrust.CONNECTED_LAB.getSourceName();
-          TestResult covidTestResult = labServerService.result(new HashedGuid(appSession.getHashedGuid()));
-          if (covidTestResult.getTestResult() != LabTestResult.POSITIVE.getTestResult()) {
-            return ResponseEntity.badRequest().build();
-          }
-        } else if (AppSessionSourceOfTrust.TELETAN.getSourceName().equals(sourceOfTrust)) {
-          sourceOfTrust = TanSourceOfTrust.TELETAN.getSourceName();
-        } else {
-          return ResponseEntity.badRequest().build();
-        }
-        String generatedTan = tanService.generateVerificationTan(sourceOfTrust);
-        appSession.incrementTanCounter();
-        appSessionService.saveAppSession(appSession);
-        return ResponseEntity.status(HttpStatus.CREATED).body(new Tan(generatedTan));
-      }
-    }
-    return ResponseEntity.badRequest().build();
-  }
-
-  /**
-   * Returns the test status of the COVID-19 test.
-   *
-   * @param registrationToken generated by a hashed guid {@link RegistrationToken}
-   * @return the test result / status of the COVID-19 test, which can be POSITIVE, NEGATIVE, INVALID, PENDING or FAILED
-   */
-  @Operation(
-    summary = "COVID-19 test result",
-    description = "Gets the result of COVID-19 Test."
-  )
-  @ApiResponses(value = {
-    @ApiResponse(responseCode = "200", description = "Testresult retrieved"),
-  })
-  @PostMapping(value = TESTRESULT_ROUTE,
-    consumes = MediaType.APPLICATION_JSON_VALUE,
-    produces = MediaType.APPLICATION_JSON_VALUE
-  )
-  public ResponseEntity<TestResult> getTestState(@RequestBody RegistrationToken registrationToken) {
-    Optional<VerificationAppSession> actual = appSessionService
-      .getAppSessionByToken(registrationToken.getRegistrationToken());
-    if (actual.isPresent()) {
-      TestResult result = labServerService.result(new HashedGuid(actual.get().getHashedGuid()));
-      return ResponseEntity.ok(result);
-    } else {
-      log.info("The registration token is invalid.");
-      return ResponseEntity.badRequest().build();
-    }
-  }
-
-  /**
-   * This provided REST method verifies the transaction number (TAN).
-   *
-   * @param tan - the transaction number, which needs to be verified {@link Tan}
-   * @return HTTP-Status 200, if the verification was successful. Otherwise return HTTP 404.
-   */
-  @Operation(
-    summary = "Verify provided Tan",
-    description = "The provided Tan is verified to be formerly issued by the verification server"
-  )
-  @ApiResponses(value = {
-    @ApiResponse(responseCode = "200", description = "Tan is valid an formerly issued by the verification server"),
-    @ApiResponse(responseCode = "404", description = "Tan could not be verified"),
-  })
-  @PostMapping(value = TAN_VERIFY_ROUTE,
-    consumes = MediaType.APPLICATION_JSON_VALUE
-  )
-  public ResponseEntity<Void> verifyTan(@RequestBody Tan tan) {
-
-    boolean verified = false;
-    //TODO TAN syntax constraints
-    boolean syntaxVerified = tanService.syntaxVerification(tan.getTan());
-
-    if (syntaxVerified) {
-      Optional<VerificationTan> optional = tanService.getEntityByTan(tan.getTan());
-      if (optional.isPresent()) {
-        VerificationTan cvtan = optional.get();
-        LocalDateTime dateTimeNow = LocalDateTime.now();
-        boolean tanTimeValid = dateTimeNow.isAfter(cvtan.getValidFrom()) && dateTimeNow.isBefore(cvtan.getValidUntil());
-        boolean tanRedeemed = cvtan.isRedeemed();
-        if (tanTimeValid && !tanRedeemed) {
-          cvtan.setRedeemed(true);
-          tanService.saveTan(cvtan);
-          verified = true;
-        }
-      }
-    }
-    return ResponseEntity.status(verified ? HttpStatus.OK : HttpStatus.NOT_FOUND).build();
-  }
-
-  /**
-   * This method creates a TeleTan.
-   *
-   * @return a created teletan
-   */
-  @Operation(
-    summary = "Request generation of a TeleTan",
-    description = "A TeleTan is a human readable TAN with 7 characters which is supposed to be issued via call line"
-  )
-  @ApiResponses(value = {
-    @ApiResponse(responseCode = "201", description = "TeleTan created"),
-  })
-  @PostMapping(TELE_TAN_ROUTE)
-  public ResponseEntity<Void> createTeleTan() {
-    // TODO implement if the clarification about communication is done
-    return ResponseEntity.status(HttpStatus.CREATED).build();
-  }
-}
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.controller;
+
+import app.coronawarn.verification.config.VerificationApplicationConfig;
+import app.coronawarn.verification.domain.VerificationAppSession;
+import app.coronawarn.verification.domain.VerificationTan;
+import app.coronawarn.verification.exception.VerificationServerException;
+import app.coronawarn.verification.model.AppSessionSourceOfTrust;
+import app.coronawarn.verification.model.HashedGuid;
+import app.coronawarn.verification.model.LabTestResult;
+import app.coronawarn.verification.model.RegistrationToken;
+import app.coronawarn.verification.model.RegistrationTokenKeyType;
+import app.coronawarn.verification.model.RegistrationTokenRequest;
+import app.coronawarn.verification.model.Tan;
+import app.coronawarn.verification.model.TanSourceOfTrust;
+import app.coronawarn.verification.model.TeleTan;
+import app.coronawarn.verification.model.TestResult;
+import app.coronawarn.verification.service.AppSessionService;
+import app.coronawarn.verification.service.LabServerService;
+import app.coronawarn.verification.service.TanService;
+import io.swagger.v3.oas.annotations.Operation;
+import io.swagger.v3.oas.annotations.responses.ApiResponse;
+import io.swagger.v3.oas.annotations.responses.ApiResponses;
+import java.time.LocalDateTime;
+import java.util.Optional;
+import javax.validation.Valid;
+import lombok.NonNull;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.validation.annotation.Validated;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+/**
+ * This class represents the rest controller for the verification server.
+ */
+@Slf4j
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/version/v1")
+@Validated
+public class VerificationController {
+
+  /**
+   * The route to the token registration endpoint.
+   */
+  public static final String REGISTRATION_TOKEN_ROUTE = "/registrationToken";
+  /**
+   * The route to the tan generation endpoint.
+   */
+  public static final String TAN_ROUTE = "/tan";
+  /**
+   * The route to the test status of the COVID-19 test endpoint.
+   */
+  public static final String TESTRESULT_ROUTE = "/testresult";
+  /**
+   * The route to the tan verification endpoint.
+   */
+  public static final String TAN_VERIFY_ROUTE = "/tan/verify";
+  /**
+   * The route to the teleTAN generation endpoint.
+   */
+  public static final String TELE_TAN_ROUTE = "/tan/teletan";
+
+  @NonNull
+  private final AppSessionService appSessionService;
+
+  @NonNull
+  private final LabServerService labServerService;
+
+  @NonNull
+  private final TanService tanService;
+
+  @NonNull
+  private VerificationApplicationConfig verificationApplicationConfig;
+
+  /**
+   * This method generates a registrationToken by a hashed guid or a teleTAN.
+   *
+   * @param request {@link RegistrationTokenRequest}
+   * @return RegistrationToken - the created registration token {@link RegistrationToken}
+   */
+  @Operation(
+      summary = "Get registration Token",
+      description = "Get a registration token by providing a SHA-256 hasehd GUID or a teleTAN"
+  )
+  @ApiResponses(value = {
+    @ApiResponse(responseCode = "201", description = "registration token generated."),
+    @ApiResponse(responseCode = "400", description = "GUID/TeleTAN already exists.")})
+  @PostMapping(value = REGISTRATION_TOKEN_ROUTE,
+      consumes = MediaType.APPLICATION_JSON_VALUE,
+      produces = MediaType.APPLICATION_JSON_VALUE
+  )
+  public ResponseEntity<RegistrationToken> generateRegistrationToken(
+      @Valid @RequestBody RegistrationTokenRequest request) {
+    String key = request.getKey();
+    RegistrationTokenKeyType keyType = request.getKeyType();
+    switch (keyType) {
+      case GUID:
+        if (appSessionService.verifyHashedGuid(key)) {
+          return appSessionService.generateRegistrationToken(key, keyType);
+        } 
+        throw new VerificationServerException(HttpStatus.BAD_REQUEST, "The hashed guid has no valid pattern");
+      case TELETAN:
+        if (tanService.verifyTeleTan(key)) {
+          ResponseEntity<RegistrationToken> response = appSessionService.generateRegistrationToken(key, keyType);
+          Optional<VerificationTan> optional = tanService.getEntityByTan(key);
+          if (optional.isPresent()) {
+            VerificationTan teleTan = optional.get();
+            teleTan.setRedeemed(true);
+            tanService.saveTan(teleTan);
+            return response;
+          }
+        } 
+        throw new VerificationServerException(HttpStatus.BAD_REQUEST, "The teleTAN verification failed");
+      default:
+        throw new VerificationServerException(HttpStatus.BAD_REQUEST, 
+          "Unknown registration key type for registration token");
+    }
+  }
+
+  /**
+   * This method generates a transaction number by a Registration Token, if the state of the COVID-19 lab-test is
+   * positive.
+   *
+   * @param registrationToken generated by a hashed guid or a teleTAN. {@link RegistrationToken}
+   * @return A generated transaction number {@link Tan}.
+   */
+  @Operation(
+      summary = "Generates a Tan",
+      description = "Generates a TAN on input of Registration Token. With the TAN one can submit his Diagnosis keys"
+  )
+  @ApiResponses(value = {
+    @ApiResponse(responseCode = "201", description = "Registration Token is valid"),
+    @ApiResponse(responseCode = "400", description = "Registration Token does not exist")})
+  @PostMapping(value = TAN_ROUTE,
+      consumes = MediaType.APPLICATION_JSON_VALUE,
+      produces = MediaType.APPLICATION_JSON_VALUE
+  )
+  public ResponseEntity<Tan> generateTan(@Valid @RequestBody RegistrationToken registrationToken) {
+
+    Optional<VerificationAppSession> actual
+        = appSessionService.getAppSessionByToken(registrationToken.getRegistrationToken());
+    if (actual.isPresent()) {
+      VerificationAppSession appSession = actual.get();
+      int tancountermax = verificationApplicationConfig.getAppsession().getTancountermax();
+      if (appSession.getTanCounter() < tancountermax) {
+        AppSessionSourceOfTrust appSessionSourceOfTrust = appSession.getSourceOfTrust();
+        TanSourceOfTrust tanSourceOfTrust = TanSourceOfTrust.CONNECTED_LAB;
+        switch (appSessionSourceOfTrust) {
+          case HASHED_GUID:
+            TestResult covidTestResult = labServerService.result(new HashedGuid(appSession.getHashedGuid()));
+            if (covidTestResult.getTestResult() != LabTestResult.POSITIVE.getTestResult()) {
+              throw new VerificationServerException(HttpStatus.BAD_REQUEST, 
+                "Tan cannot be created, caused by the non positive result of the labserver");
+            }
+            break;
+          case TELETAN:
+            tanSourceOfTrust = TanSourceOfTrust.TELETAN;
+            break;
+          default:
+            throw new VerificationServerException(HttpStatus.BAD_REQUEST, 
+              "Unknown source of trust inside the appsession for the registration token");
+        }
+        String generatedTan = tanService.generateVerificationTan(tanSourceOfTrust);
+        appSession.incrementTanCounter();
+        appSessionService.saveAppSession(appSession);
+        return ResponseEntity.status(HttpStatus.CREATED).body(new Tan(generatedTan));
+      }
+      throw new VerificationServerException(HttpStatus.BAD_REQUEST,
+        "The maximum of generating tans for this registration token is reached");
+    }
+    throw new VerificationServerException(HttpStatus.BAD_REQUEST, 
+        "VerificationAppSession not found for the registration token");
+  }
+
+  /**
+   * Returns the test status of the COVID-19 test.
+   *
+   * @param registrationToken generated by a hashed guid {@link RegistrationToken}
+   * @return the test result / status of the COVID-19 test, which can be POSITIVE, NEGATIVE, INVALID, PENDING or FAILED
+   *         and will always be POSITIVE for a TeleTan
+   */
+  @Operation(
+    summary = "COVID-19 test result for given RegistrationToken",
+    description = "Gets the result of COVID-19 Test. "
+      + "If the RegistrationToken belongs to a TeleTan the result is always positive"
+  )
+  @ApiResponses(value = {
+    @ApiResponse(responseCode = "200", description = "Testresult retrieved")})
+  @PostMapping(value = TESTRESULT_ROUTE,
+      consumes = MediaType.APPLICATION_JSON_VALUE,
+      produces = MediaType.APPLICATION_JSON_VALUE
+  )
+
+  public ResponseEntity<TestResult> getTestState(@Valid @RequestBody RegistrationToken registrationToken) {
+    Optional<VerificationAppSession> appSession =
+      appSessionService.getAppSessionByToken(registrationToken.getRegistrationToken());
+    if (appSession.isPresent()) {
+      if ((appSession.get().getHashedGuid() == null) && (appSession.get().getTeleTanHash() != null)) {
+        return ResponseEntity.ok(new TestResult(LabTestResult.POSITIVE.getTestResult()));
+      }
+      String hash = appSession.get().getHashedGuid();
+      log.info("Requested result for registration token with hashed Guid.");
+      TestResult testResult = labServerService.result(new HashedGuid(hash));
+      return ResponseEntity.ok(testResult);
+    }
+    log.info("The registration token doesn't exists.");
+    throw new VerificationServerException(HttpStatus.BAD_REQUEST, 
+      "Returning the test result for the registration token failed");
+  }
+
+  /**
+   * This provided REST method verifies the transaction number (TAN).
+   *
+   * @param tan - the transaction number, which needs to be verified {@link Tan}
+   * @return HTTP 200, if the verification was successful. Otherwise HTTP 404.
+   */
+  @Operation(
+      summary = "Verify provided Tan",
+      description = "The provided Tan is verified to be formerly issued by the verification server"
+  )
+  @ApiResponses(value = {
+    @ApiResponse(responseCode = "200", description = "Tan is valid an formerly issued by the verification server"),
+    @ApiResponse(responseCode = "404", description = "Tan could not be verified")})
+  @PostMapping(value = TAN_VERIFY_ROUTE,
+      consumes = MediaType.APPLICATION_JSON_VALUE
+  )
+  public ResponseEntity<?> verifyTan(@Valid @RequestBody Tan tan) {
+    return tanService.getEntityByTan(tan.getTan())
+        .filter(t -> t.canBeRedeemed(LocalDateTime.now()))
+        .map(t -> {
+          tanService.deleteTan(t);
+          return t;
+        })
+        .map(t -> ResponseEntity.ok().build())
+        .orElseGet(() -> {
+          log.info("The Tan is invalid.");
+          throw new VerificationServerException(HttpStatus.NOT_FOUND, "No Tan found");
+        });
+  }
+
+  /**
+   * This method generates a valid teleTAN.
+   *
+   * @return a created teleTAN
+   */
+  @Operation(
+      summary = "Request generation of a teleTAN",
+      description = "A teleTAN is a human readable TAN with 7 characters which is supposed to be issued via call line"
+  )
+  @ApiResponses(value = {
+    @ApiResponse(responseCode = "201", description = "TeleTan created")})
+  @PostMapping(value = TELE_TAN_ROUTE,
+      produces = MediaType.APPLICATION_JSON_VALUE
+  )
+  public ResponseEntity<TeleTan> createTeleTan() {
+    String teleTan = tanService.generateVerificationTeleTan();
+    log.info("The teleTAN is generated.");
+    return ResponseEntity.status(HttpStatus.CREATED).body(new TeleTan(teleTan));
+  }
+}
diff --git a/src/main/java/app/coronawarn/verification/controller/VerificationExceptionHandler.java b/src/main/java/app/coronawarn/verification/controller/VerificationExceptionHandler.java
index 5c5b6b0c..80ee029d 100644
--- a/src/main/java/app/coronawarn/verification/controller/VerificationExceptionHandler.java
+++ b/src/main/java/app/coronawarn/verification/controller/VerificationExceptionHandler.java
@@ -1,24 +1,62 @@
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
 package app.coronawarn.verification.controller;
 
+import app.coronawarn.verification.exception.VerificationServerException;
+import javax.validation.ConstraintViolationException;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
 import org.springframework.http.converter.HttpMessageNotReadableException;
+import org.springframework.web.bind.MethodArgumentNotValidException;
 import org.springframework.web.bind.ServletRequestBindingException;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.bind.annotation.RestControllerAdvice;
 import org.springframework.web.context.request.WebRequest;
 
+/**
+ * This class represents the Exception Handler.
+ */
 @Slf4j
 @RestControllerAdvice
 public class VerificationExceptionHandler {
 
+  /**
+   * This method handles unknown Exceptions and Server Errors.
+   * @param ex the thrown exception
+   * @param wr the WebRequest
+   */
   @ExceptionHandler(Exception.class)
   @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
   public void unknownException(Exception ex, WebRequest wr) {
     log.error("Unable to handle {}", wr.getDescription(false), ex);
   }
 
+  /**
+   * This method handles Bad Requests.
+   * @param ex the thrown exception
+   * @param wr the WebRequest
+   */
   @ExceptionHandler({
     HttpMessageNotReadableException.class,
     ServletRequestBindingException.class
@@ -27,4 +65,27 @@ public void unknownException(Exception ex, WebRequest wr) {
   public void bindingExceptions(Exception ex, WebRequest wr) {
     log.error("Binding failed {}", wr.getDescription(false), ex);
   }
+
+  /**
+   * This method handles Validation Exceptions.
+   * @return ResponseEntity<?> returns Bad Request
+   */
+  @ExceptionHandler({
+    MethodArgumentNotValidException.class,
+    ConstraintViolationException.class
+  })
+  public ResponseEntity<?> handleValidationExceptions() {
+    return ResponseEntity.badRequest().build();
+  }
+
+  /**
+   * This method handles Validation Exceptions.
+   * @param exception the thrown exception
+   * @return ResponseEntity<?> returns a HTTP Status
+   */
+  @ExceptionHandler(VerificationServerException.class)
+  public ResponseEntity<Void> handleVerificationServerExceptions(VerificationServerException exception) {
+    log.warn("The verification server response preventation due to: {}", exception.getMessage());
+    return ResponseEntity.status(exception.getHttpStatus()).build();
+  }
 }
diff --git a/src/main/java/app/coronawarn/verification/domain/VerificationAppSession.java b/src/main/java/app/coronawarn/verification/domain/VerificationAppSession.java
index fe06bdfd..18fe769f 100644
--- a/src/main/java/app/coronawarn/verification/domain/VerificationAppSession.java
+++ b/src/main/java/app/coronawarn/verification/domain/VerificationAppSession.java
@@ -1,83 +1,90 @@
-/*
- * Corona-Warn-App / cwa-verification
- *
- * (C) 2020, T-Systems International GmbH
- *
- * Deutsche Telekom AG and all other contributors /
- * copyright owners license this file to you under the Apache
- * License, Version 2.0 (the "License"); you may not use this
- * file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package app.coronawarn.verification.domain;
-
-import java.io.Serializable;
-import java.time.LocalDateTime;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
-import javax.persistence.Id;
-import javax.persistence.Table;
-import javax.persistence.Version;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-/**
- * This class represents the AppSession-entity.
- */
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-@Entity
-@Table(name = "app_session")
-public class VerificationAppSession implements Serializable {
-
-  private static final long serialVersionUID = 1L;
-
-  @Id
-  @GeneratedValue(strategy = GenerationType.IDENTITY)
-  @Column(name = "id")
-  private Long id;
-
-  @Version
-  @Column(name = "version")
-  private long version;
-
-  @Column(name = "created_at")
-  private LocalDateTime createdAt;
-
-  @Column(name = "updated_at")
-  private LocalDateTime updatedAt;
-
-  @Column(name = "hashed_guid")
-  private String hashedGuid;
-
-  @Column(name = "registration_token_hash")
-  private String registrationTokenHash;
-
-  @Column(name = "tele_tan_hash")
-  private String teleTanHash;
-
-  @Column(name = "tan_counter")
-  private Integer tanCounter;
-
-  @Column(name = "sot")
-  private String sourceOfTrust;
-
-  public void incrementTanCounter() {
-    this.tanCounter++;
-  }
-
-}
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.domain;
+
+import app.coronawarn.verification.model.AppSessionSourceOfTrust;
+import java.io.Serializable;
+import java.time.LocalDateTime;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.EnumType;
+import javax.persistence.Enumerated;
+import javax.persistence.GeneratedValue;
+import javax.persistence.GenerationType;
+import javax.persistence.Id;
+import javax.persistence.Table;
+import javax.persistence.Version;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * This class represents the AppSession-entity.
+ */
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@Entity
+@Table(name = "app_session")
+public class VerificationAppSession implements Serializable {
+
+  private static final long serialVersionUID = 1L;
+
+  @Id
+  @GeneratedValue(strategy = GenerationType.IDENTITY)
+  @Column(name = "id")
+  private Long id;
+
+  @Version
+  @Column(name = "version")
+  private long version;
+
+  @Column(name = "created_at")
+  private LocalDateTime createdAt;
+
+  @Column(name = "updated_at")
+  private LocalDateTime updatedAt;
+
+  @Column(name = "hashed_guid")
+  private String hashedGuid;
+
+  @Column(name = "registration_token_hash")
+  private String registrationTokenHash;
+
+  @Column(name = "tele_tan_hash")
+  private String teleTanHash;
+
+  @Column(name = "tan_counter")
+  private int tanCounter;
+
+  @Column(name = "sot")
+  @Enumerated(EnumType.STRING)
+  private AppSessionSourceOfTrust sourceOfTrust;
+
+  /**
+   * This method increments the tan counter.
+   */
+  public void incrementTanCounter() {
+    this.tanCounter++;
+  }
+
+}
diff --git a/src/main/java/app/coronawarn/verification/domain/VerificationTan.java b/src/main/java/app/coronawarn/verification/domain/VerificationTan.java
index ab006182..8ca0a8b7 100644
--- a/src/main/java/app/coronawarn/verification/domain/VerificationTan.java
+++ b/src/main/java/app/coronawarn/verification/domain/VerificationTan.java
@@ -21,10 +21,13 @@
 
 package app.coronawarn.verification.domain;
 
+import app.coronawarn.verification.model.TanSourceOfTrust;
 import java.io.Serializable;
 import java.time.LocalDateTime;
 import javax.persistence.Column;
 import javax.persistence.Entity;
+import javax.persistence.EnumType;
+import javax.persistence.Enumerated;
 import javax.persistence.GeneratedValue;
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
@@ -44,6 +47,8 @@
 @Table(name = "tan")
 public class VerificationTan implements Serializable {
 
+  static final long serialVersionUid = 1L;
+
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   @Column(name = "id")
@@ -69,7 +74,8 @@ public class VerificationTan implements Serializable {
   private LocalDateTime validUntil;
 
   @Column(name = "sot")
-  private String sourceOfTrust;
+  @Enumerated(EnumType.STRING)
+  private TanSourceOfTrust sourceOfTrust;
 
   @Column(name = "redeemed")
   private boolean redeemed;
@@ -77,4 +83,16 @@ public class VerificationTan implements Serializable {
   @Column(name = "type")
   private String type;
 
+  /**
+   * Check if the tan can be redeemed by date.
+   *
+   * @param reference the date to check if it is in between from and until range
+   * @return true or false if it can be redeemed
+   */
+  public boolean canBeRedeemed(LocalDateTime reference) {
+    return validFrom.isBefore(reference)
+      && validUntil.isAfter(reference)
+      && !isRedeemed();
+  }
+
 }
diff --git a/src/main/java/app/coronawarn/verification/exception/VerificationServerException.java b/src/main/java/app/coronawarn/verification/exception/VerificationServerException.java
new file mode 100644
index 00000000..4611ffb3
--- /dev/null
+++ b/src/main/java/app/coronawarn/verification/exception/VerificationServerException.java
@@ -0,0 +1,45 @@
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG, SAP AG and all other contributors /
+ * copyright owners license this file to you under the Apache 
+ * License, Version 2.0 (the "License"); you may not use this 
+ * file except in compliance with the License. 
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.exception;
+
+import lombok.Getter;
+import org.springframework.http.HttpStatus;
+
+/**
+ * This class represents the Verification Server Exception.
+ */
+@Getter
+public class VerificationServerException extends RuntimeException {
+
+  private final HttpStatus httpStatus;
+
+  /**
+   * The Constructor for the Exception class.
+   * @param httpStatus the state of the server
+   * @param message the message
+   */
+  public VerificationServerException(HttpStatus httpStatus, String message) {
+    super(message);
+    this.httpStatus = httpStatus;
+  }
+
+}
diff --git a/src/main/java/app/coronawarn/verification/model/AppSessionSourceOfTrust.java b/src/main/java/app/coronawarn/verification/model/AppSessionSourceOfTrust.java
index 5009139c..1ba4114c 100644
--- a/src/main/java/app/coronawarn/verification/model/AppSessionSourceOfTrust.java
+++ b/src/main/java/app/coronawarn/verification/model/AppSessionSourceOfTrust.java
@@ -23,18 +23,9 @@
 
 /**
  * This class represents the possible sources of trust for an appsession entity.
+ * @see <a href="https://github.com/corona-warn-app/cwa-verification-server/blob/master/docs/architecture-overview.md#entity-appsession">Entity AppSession - sourceOfTrust</a>
  */
 public enum AppSessionSourceOfTrust {
-  HASHED_GUID("hashedGUID"),
-  TELETAN("teleTAN");
-
-  private final String sourceName;
-
-  AppSessionSourceOfTrust(String sourceName) {
-    this.sourceName = sourceName;
-  }
-
-  public String getSourceName() {
-    return this.sourceName;
-  }
+  HASHED_GUID,
+  TELETAN
 }
diff --git a/src/main/java/app/coronawarn/verification/model/HashedGuid.java b/src/main/java/app/coronawarn/verification/model/HashedGuid.java
new file mode 100644
index 00000000..558c632f
--- /dev/null
+++ b/src/main/java/app/coronawarn/verification/model/HashedGuid.java
@@ -0,0 +1,42 @@
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.model;
+
+import io.swagger.v3.oas.annotations.media.Schema;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * This class represents the hashed Guid. 
+ * Hash (SHA256) aka QR-Code, GUID encoded as hex string.
+ * @see <a href="https://github.com/corona-warn-app/cwa-testresult-server/blob/master/docs/architecture-overview.md#core-entities">Core Entities</a>
+ */
+@Schema(
+  description = "The hashed Guid request model."
+)
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class HashedGuid {
+  private String id;
+}
diff --git a/src/main/java/app/coronawarn/verification/model/LabTestResult.java b/src/main/java/app/coronawarn/verification/model/LabTestResult.java
index 2e77122e..b8e1fd05 100644
--- a/src/main/java/app/coronawarn/verification/model/LabTestResult.java
+++ b/src/main/java/app/coronawarn/verification/model/LabTestResult.java
@@ -25,15 +25,24 @@
 import lombok.Getter;
 
 /**
- * The possible result states of the COVID-19 lab-test.
+ * The possible result results of the COVID-19 lab-test.
+ * Pending  = 0 : The test result does not exist yet
+ * Negative = 1 : No indication for COVID-19
+ * Positive = 2 : The test result indicates infection with COVID-19
+ * Invalid  = 3 : The test result is invalid due to unknown reason
+ * Redeemed = 4 : The test result is redeemed by time
  */
-@Schema
+
+@Schema(
+  description = "The lab test result model."
+)
 @Getter
 public enum LabTestResult {
   PENDING(0),
   NEGATIVE(1),
   POSITIVE(2),
-  INVALID(3);
+  INVALID(3),
+  REDEEMED(4);
 
   /**
    * The identifier for the test result from the lab-server.
@@ -45,7 +54,7 @@ public enum LabTestResult {
    *
    * @param stateValue the lab test state
    */
-  LabTestResult(Integer stateValue) {
+  LabTestResult(final int stateValue) {
     this.testResult = stateValue;
   }
 
diff --git a/src/main/java/app/coronawarn/verification/model/RegistrationToken.java b/src/main/java/app/coronawarn/verification/model/RegistrationToken.java
index df101120..65189215 100644
--- a/src/main/java/app/coronawarn/verification/model/RegistrationToken.java
+++ b/src/main/java/app/coronawarn/verification/model/RegistrationToken.java
@@ -22,20 +22,24 @@
 package app.coronawarn.verification.model;
 
 import io.swagger.v3.oas.annotations.media.Schema;
+import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Pattern;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
 /**
  * This class represents the registration Token.
- *
- * @author T-Systems International GmbH
  */
-@Schema
+@Schema(
+  description = "The the registration token model."
+)
 @Data
 @NoArgsConstructor
 @AllArgsConstructor
 public class RegistrationToken {
 
+  @NotNull
+  @Pattern(regexp = "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$")
   private String registrationToken;
 }
diff --git a/src/main/java/app/coronawarn/verification/model/RegistrationTokenKeyType.java b/src/main/java/app/coronawarn/verification/model/RegistrationTokenKeyType.java
index 7247ac40..8f660474 100644
--- a/src/main/java/app/coronawarn/verification/model/RegistrationTokenKeyType.java
+++ b/src/main/java/app/coronawarn/verification/model/RegistrationTokenKeyType.java
@@ -22,8 +22,7 @@
 package app.coronawarn.verification.model;
 
 /**
- * This class represent the different key types, with whom you can generate a
- * registration token.
+ * This class represent the different key types, with whom you can generate a registration token.
  */
 public enum RegistrationTokenKeyType {
 
diff --git a/src/main/java/app/coronawarn/verification/model/RegistrationTokenRequest.java b/src/main/java/app/coronawarn/verification/model/RegistrationTokenRequest.java
index e1362400..31cf2d90 100644
--- a/src/main/java/app/coronawarn/verification/model/RegistrationTokenRequest.java
+++ b/src/main/java/app/coronawarn/verification/model/RegistrationTokenRequest.java
@@ -1,47 +1,52 @@
-/*
- * Corona-Warn-App / cwa-verification
- *
- * (C) 2020, T-Systems International GmbH
- *
- * Deutsche Telekom AG and all other contributors /
- * copyright owners license this file to you under the Apache
- * License, Version 2.0 (the "License"); you may not use this
- * file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package app.coronawarn.verification.model;
-
-import io.swagger.v3.oas.annotations.media.Schema;
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-/**
- * This class represents a registration token request.
- */
-@Schema
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-public class RegistrationTokenRequest {
-
-  /**
-   * The key which can be a teletan or a hashed guid.
-   */
-  private String key;
-
-  /**
-   * The type of key, which can be "hashedGUID" or "teleTAN".
-   */
-  private RegistrationTokenKeyType keyType;
-}
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.model;
+
+import io.swagger.v3.oas.annotations.media.Schema;
+import javax.validation.constraints.NotNull;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * This class represents a registration token request parameter with a hashed guid or a teleTAN.
+ */
+@Schema(
+  description = "The the registration token request model."
+)
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class RegistrationTokenRequest {
+
+  /**
+   * The key which can be a teletan or a hashed guid.
+   */
+  @NotNull
+  private String key;
+
+  /**
+   * The type of key, which can be "GUID" or "TELETAN".
+   */
+  @NotNull
+  private RegistrationTokenKeyType keyType;
+}
diff --git a/src/main/java/app/coronawarn/verification/model/Tan.java b/src/main/java/app/coronawarn/verification/model/Tan.java
index 9324a9a9..df21b697 100644
--- a/src/main/java/app/coronawarn/verification/model/Tan.java
+++ b/src/main/java/app/coronawarn/verification/model/Tan.java
@@ -22,19 +22,24 @@
 package app.coronawarn.verification.model;
 
 import io.swagger.v3.oas.annotations.media.Schema;
+import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Pattern;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
 /**
  * This class represents the transaction number.
- *
- * @author T-Systems International GmbH
  */
-@Schema
+@Schema(
+  description = "The transaction number model."
+)
 @Data
 @NoArgsConstructor
 @AllArgsConstructor
 public class Tan {
+
+  @NotNull
+  @Pattern(regexp = "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$")
   private String tan;
 }
diff --git a/src/main/java/app/coronawarn/verification/model/TanSourceOfTrust.java b/src/main/java/app/coronawarn/verification/model/TanSourceOfTrust.java
index 1b17af85..5d1880b3 100644
--- a/src/main/java/app/coronawarn/verification/model/TanSourceOfTrust.java
+++ b/src/main/java/app/coronawarn/verification/model/TanSourceOfTrust.java
@@ -23,18 +23,9 @@
 
 /**
  * This class represents the possible sources of trust for a TAN entity.
+ * @see <a href="https://github.com/corona-warn-app/cwa-verification-server/blob/master/docs/architecture-overview.md#entity-tan">Entity TAN - sourceOfTrust</a>
  */
 public enum TanSourceOfTrust {
-  CONNECTED_LAB("connectedLab"),
-  TELETAN("teleTAN");
-
-  private final String sourceName;
-
-  TanSourceOfTrust(String sourceName) {
-    this.sourceName = sourceName;
-  }
-
-  public String getSourceName() {
-    return this.sourceName;
-  }
+  CONNECTED_LAB,
+  TELETAN
 }
diff --git a/src/main/java/app/coronawarn/verification/model/TanType.java b/src/main/java/app/coronawarn/verification/model/TanType.java
index 439cfd4e..9ae06cf6 100644
--- a/src/main/java/app/coronawarn/verification/model/TanType.java
+++ b/src/main/java/app/coronawarn/verification/model/TanType.java
@@ -25,6 +25,7 @@
 
 /**
  * This class represents the different types of tans.
+ * @see <a href="https://github.com/corona-warn-app/cwa-verification-server/blob/master/docs/architecture-overview.md#entity-tan">Entity TAN - Type</a>
  */
 @Schema
 public enum TanType {
diff --git a/src/main/java/app/coronawarn/verification/client/HashedGuid.java b/src/main/java/app/coronawarn/verification/model/TeleTan.java
similarity index 77%
rename from src/main/java/app/coronawarn/verification/client/HashedGuid.java
rename to src/main/java/app/coronawarn/verification/model/TeleTan.java
index bbb65e16..6b0cf5b0 100644
--- a/src/main/java/app/coronawarn/verification/client/HashedGuid.java
+++ b/src/main/java/app/coronawarn/verification/model/TeleTan.java
@@ -1,38 +1,40 @@
-/*
- * Corona-Warn-App / cwa-verification
- *
- * (C) 2020, T-Systems International GmbH
- *
- * Deutsche Telekom AG and all other contributors /
- * copyright owners license this file to you under the Apache
- * License, Version 2.0 (the "License"); you may not use this
- * file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package app.coronawarn.verification.client;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-/**
- * This class represents the GUID.
- *
- * @author T-Systems International GmbH
- */
-@Data
-@NoArgsConstructor
-@AllArgsConstructor
-public class HashedGuid {
-  private String id;
-}
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.model;
+
+import io.swagger.v3.oas.annotations.media.Schema;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * This class represents the tele transaction number (teleTAN).
+ */
+@Schema(
+  description = "The teleTAN model."
+)
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class TeleTan {
+  private String value;
+}
diff --git a/src/main/java/app/coronawarn/verification/client/TestResult.java b/src/main/java/app/coronawarn/verification/model/TestResult.java
similarity index 76%
rename from src/main/java/app/coronawarn/verification/client/TestResult.java
rename to src/main/java/app/coronawarn/verification/model/TestResult.java
index 3d95884d..35bac5d1 100644
--- a/src/main/java/app/coronawarn/verification/client/TestResult.java
+++ b/src/main/java/app/coronawarn/verification/model/TestResult.java
@@ -19,17 +19,20 @@
  * under the License.
  */
 
-package app.coronawarn.verification.client;
+package app.coronawarn.verification.model;
 
+import io.swagger.v3.oas.annotations.media.Schema;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
 /**
  * This class represents the TestResult.
- *
- * @author T-Systems International GmbH
+ * @see <a href="https://github.com/corona-warn-app/cwa-testresult-server/blob/master/docs/architecture-overview.md#core-entities">Core Entities</a>
  */
+@Schema(
+  description = "The test result model."
+)
 @Data
 @NoArgsConstructor
 @AllArgsConstructor
diff --git a/src/main/java/app/coronawarn/verification/repository/VerificationAppSessionRepository.java b/src/main/java/app/coronawarn/verification/repository/VerificationAppSessionRepository.java
index 2866fed2..cc7633e1 100644
--- a/src/main/java/app/coronawarn/verification/repository/VerificationAppSessionRepository.java
+++ b/src/main/java/app/coronawarn/verification/repository/VerificationAppSessionRepository.java
@@ -22,14 +22,25 @@
 package app.coronawarn.verification.repository;
 
 import app.coronawarn.verification.domain.VerificationAppSession;
+import java.time.LocalDateTime;
+import java.util.Optional;
 import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.stereotype.Repository;
 
 /**
  * This class represents the AppSession repository.
- *
- * @author T-Systems International GmbH
  */
-@Repository
 public interface VerificationAppSessionRepository extends JpaRepository<VerificationAppSession, Long> {
+
+  /**
+   * This method looks in the Database for an Appsession with the given registrationTokenHash.
+   * @param registrationTokenHash hash to search for
+   * @return Optional VerificationAppSession the optional Appsession
+   */
+  Optional<VerificationAppSession> findByRegistrationTokenHash(String registrationTokenHash);
+
+  /**
+   * This method looks in the Database for Appsessions that are older than the before value and deletes them.
+   * @param before the Date to delete by
+   */
+  void deleteByCreatedAtBefore(LocalDateTime before);
 }
diff --git a/src/main/java/app/coronawarn/verification/repository/VerificationTanRepository.java b/src/main/java/app/coronawarn/verification/repository/VerificationTanRepository.java
index 2aeed322..9af72b5a 100644
--- a/src/main/java/app/coronawarn/verification/repository/VerificationTanRepository.java
+++ b/src/main/java/app/coronawarn/verification/repository/VerificationTanRepository.java
@@ -22,16 +22,32 @@
 package app.coronawarn.verification.repository;
 
 import app.coronawarn.verification.domain.VerificationTan;
+import java.time.LocalDateTime;
+import java.util.Optional;
 import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.stereotype.Repository;
 
 /**
- * This class represents the AppSession repository.
- *
- * @author T-Systems International GmbH
+ * This class represents the Tan repository.
  */
-@Repository
 public interface VerificationTanRepository extends JpaRepository<VerificationTan, Long> {
 
+  /**
+   * This method looks in the Database for an if a VerificationTan exists for the tan hash.
+   * @param tanHash hash to search for
+   * @return Boolean if there is an Entity for the tanHash
+   */
   boolean existsByTanHash(String tanHash);
+
+  /**
+   * This method looks in the Database for an if a VerificationTan exists for the tan hash.
+   * @param tanHash hash to search for
+   * @return Optional VerificationTan
+   */
+  Optional<VerificationTan> findByTanHash(String tanHash);
+
+  /**
+   * This method purges Entities from the database that are older than before value.
+   * @param before LocalDateTime to delete older entities
+   */
+  void deleteByCreatedAtBefore(LocalDateTime before);
 }
diff --git a/src/main/java/app/coronawarn/verification/service/AppSessionService.java b/src/main/java/app/coronawarn/verification/service/AppSessionService.java
index 3c39cab1..ed716274 100644
--- a/src/main/java/app/coronawarn/verification/service/AppSessionService.java
+++ b/src/main/java/app/coronawarn/verification/service/AppSessionService.java
@@ -1,210 +1,188 @@
-/*
- * Corona-Warn-App / cwa-verification
- *
- * (C) 2020, T-Systems International GmbH
- *
- * Deutsche Telekom AG and all other contributors /
- * copyright owners license this file to you under the Apache
- * License, Version 2.0 (the "License"); you may not use this
- * file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package app.coronawarn.verification.service;
-
-import app.coronawarn.verification.domain.VerificationAppSession;
-import app.coronawarn.verification.model.AppSessionSourceOfTrust;
-import app.coronawarn.verification.model.RegistrationToken;
-import app.coronawarn.verification.model.RegistrationTokenKeyType;
-import app.coronawarn.verification.repository.VerificationAppSessionRepository;
-import java.time.LocalDateTime;
-import java.util.Optional;
-import java.util.UUID;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.data.domain.Example;
-import org.springframework.data.domain.ExampleMatcher;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.stereotype.Component;
-
-/**
- * This class represents the VerificationAppSession service.
- *
- * @author T-Systems International GmbH
- */
-@Slf4j
-@Component
-public class AppSessionService {
-
-  /**
-   * The {@link VerificationAppSessionRepository}.
-   */
-  @Autowired
-  private VerificationAppSessionRepository appSessionRepository;
-
-  /**
-   * The {@link HashingService}.
-   */
-  @Autowired
-  private HashingService hashingService;
-  /**
-   * The {@link TanService}.
-   */
-  @Autowired
-  private TanService tanService;
-
-  /**
-   * Creates an AppSession-Entity.
-   *
-   * @param registrationToken Token for registration
-   * @return appSession for registrationToken
-   */
-  public VerificationAppSession generateAppSession(String registrationToken) {
-    log.info("Create the app session entity with the created registration token.");
-    VerificationAppSession appSession = new VerificationAppSession();
-    appSession.setCreatedAt(LocalDateTime.now());
-    appSession.setUpdatedAt(LocalDateTime.now());
-    appSession.setRegistrationTokenHash(hashingService.hash(registrationToken));
-    appSession.setTanCounter(0);
-    return appSession;
-  }
-
-
-  private String generateRegistrationToken() {
-    return UUID.randomUUID().toString();
-  }
-
-  /**
-   * This method generates a registration Token by a guid or a teletan.
-   *
-   * @param key     the guid or teletan
-   * @param keyType the key type {@link RegistrationTokenKeyType}
-   * @return an {@link ResponseEntity}
-   */
-  public ResponseEntity<RegistrationToken> generateRegistrationToken(String key, RegistrationTokenKeyType keyType) {
-    String registrationToken;
-    VerificationAppSession appSession;
-
-    switch (keyType) {
-      case GUID:
-        String hashedGuid = key;
-        if (hashingService.isHashValid(key)) {
-          if (checkRegistrationTokenAlreadyExistsForGuid(hashedGuid)) {
-            log.warn("The registration token already exists for the hashed guid.");
-          } else {
-            log.info("Start generating a new registration token for the given hashed guid.");
-            registrationToken = generateRegistrationToken();
-            appSession = generateAppSession(registrationToken);
-            appSession.setHashedGuid(hashedGuid);
-            appSession.setSourceOfTrust(AppSessionSourceOfTrust.HASHED_GUID.getSourceName());
-            saveAppSession(appSession);
-            return ResponseEntity
-              .status(HttpStatus.CREATED)
-              .body(new RegistrationToken(registrationToken));
-          }
-        }
-        break;
-      case TELETAN:
-        String teleTan = key;
-        if (tanService.isTeleTanValid(teleTan)) {
-          if (checkRegistrationTokenAlreadyExistForTeleTan(teleTan)) {
-            log.warn("The registration token already exists for this TeleTAN.");
-          } else {
-            log.info("Start generating a new registration token for the given tele TAN.");
-            registrationToken = generateRegistrationToken();
-            appSession = generateAppSession(registrationToken);
-            appSession.setTeleTanHash(hashingService.hash(teleTan));
-            appSession.setSourceOfTrust(AppSessionSourceOfTrust.TELETAN.getSourceName());
-            saveAppSession(appSession);
-            return ResponseEntity
-              .status(HttpStatus.CREATED)
-              .body(new RegistrationToken(registrationToken));
-          }
-        } else {
-          log.warn("The Tele Tan supplied is not valid.");
-        }
-        break;
-      default:
-        break;
-    }
-    return ResponseEntity.badRequest().build();
-  }
-
-  /**
-   * Persists the specified entity of {@link VerificationAppSession}
-   * instances.
-   *
-   * @param appSession the verification app session entity
-   */
-  public void saveAppSession(VerificationAppSession appSession) {
-    log.info("VerificationAppSessionService start saveAppSession.");
-    appSessionRepository.save(appSession);
-  }
-
-  /**
-   * Check for existing Reg Token in the
-   * {@link VerificationAppSessionRepository}.
-   *
-   * @param registrationTokenHash the hashed registrationToken
-   * @return flag for existing registrationToken
-   */
-  public boolean checkRegistrationTokenExists(String registrationTokenHash) {
-    log.info("VerificationAppSessionService start checkRegistrationTokenExists.");
-    VerificationAppSession appSession = new VerificationAppSession();
-    appSession.setRegistrationTokenHash(registrationTokenHash);
-    return appSessionRepository.exists(Example.of(appSession, ExampleMatcher.matchingAll()));
-  }
-
-  /**
-   * Get existing VerificationAppSession for Reg Token from
-   * {@link VerificationAppSessionRepository}.
-   *
-   * @param registrationToken the registrationToken
-   * @return Optional VerificationAppSession
-   */
-  public Optional<VerificationAppSession> getAppSessionByToken(String registrationToken) {
-    log.info("VerificationAppSessionService start getAppSessionByToken.");
-    VerificationAppSession appSession = new VerificationAppSession();
-    appSession.setRegistrationTokenHash(hashingService.hash(registrationToken));
-    return appSessionRepository.findOne(Example.of(appSession, ExampleMatcher.matchingAll()));
-  }
-
-  /**
-   * Check for existing hashed GUID Token in the
-   * {@link VerificationAppSessionRepository}.
-   *
-   * @param hashedGuid the hashed guid
-   * @return flag for existing guid
-   */
-  public boolean checkRegistrationTokenAlreadyExistsForGuid(String hashedGuid) {
-    log.info("VerificationAppSessionService start checkRegistrationTokenExists.");
-    VerificationAppSession appSession = new VerificationAppSession();
-    appSession.setHashedGuid(hashedGuid);
-    return appSessionRepository.exists(Example.of(appSession, ExampleMatcher.matchingAll()));
-  }
-
-  /**
-   * Check for existing hashed TeleTAN in the
-   * {@link VerificationAppSessionRepository}.
-   *
-   * @param teleTan the teleTAN
-   * @return flag for existing teleTAN
-   */
-  public boolean checkRegistrationTokenAlreadyExistForTeleTan(String teleTan) {
-    log.info("VerificationAppSessionService start checkTeleTanAlreadyExistForTeleTan.");
-    VerificationAppSession appSession = new VerificationAppSession();
-    appSession.setRegistrationTokenHash(hashingService.hash(teleTan));
-    return appSessionRepository.exists(Example.of(appSession, ExampleMatcher.matchingAll()));
-  }
-
-}
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.service;
+
+import app.coronawarn.verification.domain.VerificationAppSession;
+import app.coronawarn.verification.model.AppSessionSourceOfTrust;
+import app.coronawarn.verification.model.RegistrationToken;
+import app.coronawarn.verification.model.RegistrationTokenKeyType;
+import app.coronawarn.verification.repository.VerificationAppSessionRepository;
+import java.time.LocalDateTime;
+import java.util.Optional;
+import java.util.UUID;
+import lombok.NonNull;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.data.domain.Example;
+import org.springframework.data.domain.ExampleMatcher;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Component;
+
+/**
+ * This class represents the VerificationAppSession service.
+ */
+@Slf4j
+@RequiredArgsConstructor
+@Component
+public class AppSessionService {
+
+  /**
+   * The {@link VerificationAppSessionRepository}.
+   */
+  @NonNull
+  private final VerificationAppSessionRepository appSessionRepository;
+
+  /**
+   * The {@link HashingService}.
+   */
+  @NonNull
+  private final HashingService hashingService;
+
+  /**
+   * Creates an AppSession-Entity.
+   *
+   * @param registrationToken Token for registration
+   * @return appSession for registrationToken
+   */
+  public VerificationAppSession generateAppSession(String registrationToken) {
+    log.info("Create the app session entity with the created registration token.");
+    VerificationAppSession appSession = new VerificationAppSession();
+    appSession.setCreatedAt(LocalDateTime.now());
+    appSession.setUpdatedAt(LocalDateTime.now());
+    appSession.setRegistrationTokenHash(hashingService.hash(registrationToken));
+    return appSession;
+  }
+
+
+  private String generateRegistrationToken() {
+    return UUID.randomUUID().toString();
+  }
+
+  /**
+   * This method generates a registration Token by a guid or a teletan.
+   *
+   * @param key     the guid or teletan
+   * @param keyType the key type {@link RegistrationTokenKeyType}
+   * @return an {@link ResponseEntity}
+   */
+  public ResponseEntity<RegistrationToken> generateRegistrationToken(String key, RegistrationTokenKeyType keyType) {
+    String registrationToken;
+    VerificationAppSession appSession;
+
+    switch (keyType) {
+      case GUID:
+        if (checkRegistrationTokenAlreadyExistsForGuid(key)) {
+          log.warn("The registration token already exists for the hashed guid.");
+        } else {
+          log.info("Start generating a new registration token for the given hashed guid.");
+          registrationToken = generateRegistrationToken();
+          appSession = generateAppSession(registrationToken);
+          appSession.setHashedGuid(key);
+          appSession.setSourceOfTrust(AppSessionSourceOfTrust.HASHED_GUID);
+          saveAppSession(appSession);
+          return ResponseEntity
+            .status(HttpStatus.CREATED)
+            .body(new RegistrationToken(registrationToken));
+        }
+        break;
+      case TELETAN:
+        if (checkRegistrationTokenAlreadyExistForTeleTan(key)) {
+          log.warn("The registration token already exists for this TeleTAN.");
+        } else {
+          log.info("Start generating a new registration token for the given tele TAN.");
+          registrationToken = generateRegistrationToken();
+          appSession = generateAppSession(registrationToken);
+          appSession.setTeleTanHash(hashingService.hash(key));
+          appSession.setSourceOfTrust(AppSessionSourceOfTrust.TELETAN);
+          saveAppSession(appSession);
+          return ResponseEntity
+            .status(HttpStatus.CREATED)
+            .body(new RegistrationToken(registrationToken));
+        }
+        break;
+      default:
+        break;
+    }
+    return ResponseEntity.badRequest().build();
+  }
+
+  /**
+   * Persists the specified entity of {@link VerificationAppSession}
+   * instances.
+   *
+   * @param appSession the verification app session entity
+   */
+  public void saveAppSession(VerificationAppSession appSession) {
+    log.info("Start saveAppSession.");
+    appSessionRepository.save(appSession);
+  }
+
+  /**
+   * Get existing VerificationAppSession for Reg Token from
+   * {@link VerificationAppSessionRepository}.
+   *
+   * @param registrationToken the registrationToken
+   * @return Optional VerificationAppSession
+   */
+  public Optional<VerificationAppSession> getAppSessionByToken(String registrationToken) {
+    log.info("Start getAppSessionByToken.");
+    return appSessionRepository.findByRegistrationTokenHash(hashingService.hash(registrationToken));
+  }
+
+  /**
+   * Check for existing hashed GUID Token in the
+   * {@link VerificationAppSessionRepository}.
+   *
+   * @param hashedGuid the hashed guid
+   * @return flag for existing guid
+   */
+  public boolean checkRegistrationTokenAlreadyExistsForGuid(String hashedGuid) {
+    log.info("Start checkRegistrationTokenAlreadyExistsForGuid.");
+    VerificationAppSession appSession = new VerificationAppSession();
+    appSession.setHashedGuid(hashedGuid);
+    return appSessionRepository.exists(Example.of(appSession, ExampleMatcher.matchingAll()));
+  }
+
+  /**
+   * Check for existing hashed TeleTAN in the
+   * {@link VerificationAppSessionRepository}.
+   *
+   * @param teleTan the teleTAN
+   * @return flag for existing teleTAN
+   */
+  public boolean checkRegistrationTokenAlreadyExistForTeleTan(String teleTan) {
+    log.info("Start checkTeleTanAlreadyExistForTeleTan.");
+    VerificationAppSession appSession = new VerificationAppSession();
+    appSession.setTeleTanHash(hashingService.hash(teleTan));
+    return appSessionRepository.exists(Example.of(appSession, ExampleMatcher.matchingAll()));
+  }
+  
+  /**
+   * Verifies the hashed guid.
+   * @param hashedGuid the hashed Guid
+   * @return flag for verification
+   */
+  public boolean verifyHashedGuid(String hashedGuid) {
+    return hashingService.isHashValid(hashedGuid);
+  }
+}
diff --git a/src/main/java/app/coronawarn/verification/service/EntitiesCleanupService.java b/src/main/java/app/coronawarn/verification/service/EntitiesCleanupService.java
new file mode 100644
index 00000000..08e1cd70
--- /dev/null
+++ b/src/main/java/app/coronawarn/verification/service/EntitiesCleanupService.java
@@ -0,0 +1,61 @@
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.service;
+
+import app.coronawarn.verification.config.VerificationApplicationConfig;
+import app.coronawarn.verification.repository.VerificationAppSessionRepository;
+import app.coronawarn.verification.repository.VerificationTanRepository;
+import java.time.LocalDateTime;
+import java.time.Period;
+import javax.transaction.Transactional;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.scheduling.annotation.Scheduled;
+import org.springframework.stereotype.Component;
+
+/**
+ * A Service to delete entities that are older than configured days.
+ */
+@Slf4j
+@RequiredArgsConstructor
+@Component
+public class EntitiesCleanupService {
+
+  private final VerificationApplicationConfig applicationConfig;
+  private final VerificationAppSessionRepository appSessionRepository;
+  private final VerificationTanRepository tanRepository;
+
+  /**
+   * All entities that are older than configured days get deleted.
+   */
+  @Scheduled(
+    fixedDelayString = "${entities.cleanup.rate}"
+  )
+  @Transactional
+  public void cleanup() {
+    log.info("cleanup execution");
+    appSessionRepository.deleteByCreatedAtBefore(LocalDateTime.now()
+      .minus(Period.ofDays(applicationConfig.getEntities().getCleanup().getDays())));
+    tanRepository.deleteByCreatedAtBefore(LocalDateTime.now()
+      .minus(Period.ofDays(applicationConfig.getEntities().getCleanup().getDays())));
+  }
+}
diff --git a/src/main/java/app/coronawarn/verification/service/HashingService.java b/src/main/java/app/coronawarn/verification/service/HashingService.java
index cdd5b068..a80cbf2d 100644
--- a/src/main/java/app/coronawarn/verification/service/HashingService.java
+++ b/src/main/java/app/coronawarn/verification/service/HashingService.java
@@ -28,24 +28,23 @@
 import org.springframework.stereotype.Component;
 
 /**
- * This class represents the hashing service.
+ * This class represents the hashing service for providing and check a hash string.
  */
 @Slf4j
 @Component
 public class HashingService {
 
   private static final String GUID_HASH_PATTERN = "^[0-9A-Fa-f]{64}$";
-  private static final Pattern pattern = Pattern.compile(GUID_HASH_PATTERN);
-
+  private static final Pattern PATTERN = Pattern.compile(GUID_HASH_PATTERN);
 
   /**
-   * Returns the hash of the supplied string.
+   * Calculates the SHA-256 digest and returns the value as a hex string.
    *
    * @param toHash that will be Hashed
    * @return the hash of the supplied string
    */
   public String hash(String toHash) {
-    log.info("HashingService - hash has been called.");
+    log.info("Hash process has been called.");
     return DigestUtils.sha256Hex(toHash);
   }
 
@@ -56,7 +55,7 @@ public String hash(String toHash) {
    * @return Boolean if the String Matches the Pattern
    */
   public boolean isHashValid(String toValidate) {
-    Matcher matcher = pattern.matcher(toValidate);
+    Matcher matcher = PATTERN.matcher(toValidate);
     return matcher.find();
   }
 }
diff --git a/src/main/java/app/coronawarn/verification/service/LabServerService.java b/src/main/java/app/coronawarn/verification/service/LabServerService.java
index 84117ad8..dd8ce4ff 100644
--- a/src/main/java/app/coronawarn/verification/service/LabServerService.java
+++ b/src/main/java/app/coronawarn/verification/service/LabServerService.java
@@ -1,44 +1,51 @@
-/*
- * Corona-Warn-App / cwa-verification
- *
- * (C) 2020, T-Systems International GmbH
- *
- * Deutsche Telekom AG and all other contributors /
- * copyright owners license this file to you under the Apache
- * License, Version 2.0 (the "License"); you may not use this
- * file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package app.coronawarn.verification.service;
-
-import app.coronawarn.verification.client.HashedGuid;
-import app.coronawarn.verification.client.LabServerClient;
-import app.coronawarn.verification.client.TestResult;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Component;
-
-/**
- * This class represents the lab server service.
- */
-@Slf4j
-@Component
-public class LabServerService {
-
-  @Autowired
-  private LabServerClient labServerClient;
-
-  public TestResult result(HashedGuid guid) {
-    return labServerClient.result(guid);
-  }
-}
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.service;
+
+import app.coronawarn.verification.client.LabServerClient;
+import app.coronawarn.verification.model.HashedGuid;
+import app.coronawarn.verification.model.TestResult;
+import lombok.NonNull;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Component;
+
+/**
+ * This class represents the lab server service.
+ */
+@Slf4j
+@RequiredArgsConstructor
+@Component
+public class LabServerService {
+
+  @NonNull
+  private final LabServerClient labServerClient;
+
+  /**
+   * This method gives an TestResult for a guid.
+   * @param guid hashed GUID
+   * @return Testresult for GUID
+   */
+  public TestResult result(HashedGuid guid) {
+    return labServerClient.result(guid);
+  }
+}
diff --git a/src/main/java/app/coronawarn/verification/service/TanService.java b/src/main/java/app/coronawarn/verification/service/TanService.java
index d3af85a8..24e05fc9 100644
--- a/src/main/java/app/coronawarn/verification/service/TanService.java
+++ b/src/main/java/app/coronawarn/verification/service/TanService.java
@@ -21,7 +21,9 @@
 
 package app.coronawarn.verification.service;
 
+import app.coronawarn.verification.config.VerificationApplicationConfig;
 import app.coronawarn.verification.domain.VerificationTan;
+import app.coronawarn.verification.model.TanSourceOfTrust;
 import app.coronawarn.verification.model.TanType;
 import app.coronawarn.verification.repository.VerificationTanRepository;
 import java.security.SecureRandom;
@@ -32,52 +34,44 @@
 import java.util.regex.Pattern;
 import java.util.stream.Collector;
 import java.util.stream.IntStream;
+import lombok.NonNull;
+import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
-import net.bytebuddy.utility.RandomString;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.data.domain.Example;
-import org.springframework.data.domain.ExampleMatcher;
 import org.springframework.stereotype.Component;
 
-
 /**
  * This class represents the TanService service.
  */
 @Slf4j
+@RequiredArgsConstructor
 @Component
 public class TanService {
 
-  private static final Integer TELE_TAN_LENGTH = 7;
+  // TANs are UUIDs
+  private static final String UUID_PATTERN = "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$";
+  private static final String TAN_TAN_PATTERN = UUID_PATTERN;
+  private static final Pattern TAN_PATTERN = Pattern.compile(TAN_TAN_PATTERN);
+
+  // Tele-TANs are a shorter, easier to communicate form of TAN
+  private static final int TELE_TAN_LENGTH = 7;
   // Exclude characters which can be confusing in some fonts like 0-O or i-I-l.
-  private static final String TELE_TAN_ALLOWED_CHARS = "23456789ABCDEFGHJKMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz";
+  private static final String TELE_TAN_ALLOWED_CHARS = "23456789ABCDEFGHJKMNPQRSTUVWXYZ";
   private static final String TELE_TAN_PATTERN = "^[" + TELE_TAN_ALLOWED_CHARS + "]{" + TELE_TAN_LENGTH + "}$";
   private static final Pattern PATTERN = Pattern.compile(TELE_TAN_PATTERN);
 
-  @Value("${tan.valid.days}")
-  private Integer tanValidInDays;
-  @Value("${tan.tele.valid.hours}")
-  private Integer teleTanValidInHours;
-
   /**
    * The {@link VerificationTanRepository}.
    */
-  @Autowired
-  private VerificationTanRepository tanRepository;
-
+  @NonNull
+  private final VerificationTanRepository tanRepository;
   /**
    * The {@link HashingService}.
    */
-  @Autowired
-  private HashingService hashingService;
+  @NonNull
+  private final HashingService hashingService;
 
-  /*
-   * The random number generator used by this class to create random
-   * based UUIDs. In a holder class to defer initialization until needed.
-   */
-  private static class Holder {
-    static final SecureRandom numberGenerator = new SecureRandom();
-  }
+  @NonNull
+  private final VerificationApplicationConfig verificationApplicationConfig;
 
   /**
    * Saves a {@link VerificationTan} into the database.
@@ -90,21 +84,19 @@ public VerificationTan saveTan(VerificationTan tan) {
   }
 
   /**
-   * Check TAN syntax constraints.
+   * Deletes a {@link VerificationTan} from the database.
    *
-   * @param tan the TAN
-   * @return TAN verification flag
+   * @param tan the tan which will be deleted
    */
-  // TODO syntax constraints
-  public boolean syntaxVerification(String tan) {
-    return true;
+  public void deleteTan(VerificationTan tan) {
+    tanRepository.delete(tan);
   }
 
   /**
-   * Check Tele-TAN syntax constraints.
+   * Check teleTAN syntax constraints.
    *
-   * @param teleTan the Tele TAN
-   * @return Tele TAN verification flag
+   * @param teleTan the teleTAN
+   * @return teleTAN verification flag
    */
   private boolean syntaxTeleTanVerification(String teleTan) {
     Matcher matcher = PATTERN.matcher(teleTan);
@@ -112,22 +104,22 @@ private boolean syntaxTeleTanVerification(String teleTan) {
   }
 
   /**
-   * Verifies the tele transaction number (Tele TAN).
+   * Verifies the tele transaction number (teleTAN).
    *
-   * @param teleTan the Tele TAN to verify
-   * @return verified is teletan is verified
+   * @param teleTan the teleTAN to verify
+   * @return is teleTAN verified
    */
   public boolean verifyTeleTan(String teleTan) {
     boolean verified = false;
     if (syntaxTeleTanVerification(teleTan)) {
       Optional<VerificationTan> teleTanEntity = getEntityByTan(teleTan);
-      if (teleTanEntity.isPresent() && !teleTanEntity.get().isRedeemed()) {
+      if (teleTanEntity.isPresent() && teleTanEntity.get().canBeRedeemed(LocalDateTime.now())) {
         verified = true;
       } else {
-        log.warn("The Tele TAN is unknown or already redeemed.");
+        log.warn("The teleTAN is unknown, expired or already redeemed.");
       }
     } else {
-      log.warn("The Tele TAN is not valid to the syntax constraints.");
+      log.warn("The teleTAN is not valid to the syntax constraints.");
     }
     return verified;
   }
@@ -137,93 +129,92 @@ public boolean verifyTeleTan(String teleTan) {
    *
    * @return a Valid TAN String
    */
-  public String generateValidTan() {
-    return IntStream.range(0, TELE_TAN_LENGTH)
-      .mapToObj(i -> TELE_TAN_ALLOWED_CHARS.charAt(Holder.numberGenerator.nextInt(TELE_TAN_ALLOWED_CHARS.length())))
-      .collect(Collector.of(
-        StringBuilder::new,
-        StringBuilder::append,
-        StringBuilder::append,
-        StringBuilder::toString));
-  }
-
-  /**
-   * Check for existing TAN in the {@link VerificationTanRepository}.
-   *
-   * @param tan the TAN
-   * @return flag for existing TAN
-   */
-  public boolean checkTanAlreadyExist(String tan) {
-    return hashTanAndCheckAvailability(tan);
+  private String generateValidTan() {
+    boolean validTan = false;
+    String newTan = "";
+    while (!validTan) {
+      newTan = UUID.randomUUID().toString();
+      validTan = checkTanNotExist(newTan);
+    }
+    return newTan;
   }
 
   /**
    * This method generates a {@link VerificationTan} - entity and saves it.
    *
-   * @param tan     the TAN
+   * @param tan the TAN
    * @param tanType the TAN type
    * @return the persisted TAN
    */
-  private VerificationTan persistTan(String tan, TanType tanType, String sourceOfTrust) {
+  private VerificationTan persistTan(String tan, TanType tanType, TanSourceOfTrust sourceOfTrust) {
     VerificationTan newTan = generateVerificationTan(tan, tanType, sourceOfTrust);
     return tanRepository.save(newTan);
   }
 
   /**
-   * Returns the a new valid TeleTan String.
+   * Returns the a new valid teleTAN String.
    *
-   * @return a new TeleTan
+   * @return a new teleTAN
    */
   public String generateTeleTan() {
-    /*
-     * The generation of a TeleTan is a temporary solution and may be subject to later changes.
-     */
-    String generatedTeleTan = "";
-    boolean isTeleTanValid = false;
-
-    while (!isTeleTanValid) {
-      generatedTeleTan = RandomString.make(TELE_TAN_LENGTH);
-      isTeleTanValid = isTeleTanValid(generatedTeleTan);
-    }
-    return generatedTeleTan;
+    return IntStream.range(0, TELE_TAN_LENGTH)
+      .mapToObj(i -> TELE_TAN_ALLOWED_CHARS.charAt(Holder.NUMBER_GENERATOR.nextInt(TELE_TAN_ALLOWED_CHARS.length())))
+      .collect(Collector.of(
+        StringBuilder::new,
+        StringBuilder::append,
+        StringBuilder::append,
+        StringBuilder::toString));
   }
 
   /**
-   * Returns the if a Tele Tan matches the Pattern requirements.
+   * Returns the if a teleTAN matches the Pattern requirements.
    *
-   * @param teleTan the Tele TAN to check
-   * @return The validity of the Tele TAN
+   * @param teleTan the teleTAN to check
+   * @return The validity of the teleTAN
    */
   public boolean isTeleTanValid(String teleTan) {
     return syntaxTeleTanVerification(teleTan);
   }
 
-  private String generateTanFromUuid() {
-    // A UUID is a 128 bit value
-    return UUID.randomUUID().toString();
-  }
-
-  private boolean hashTanAndCheckAvailability(String tan) {
+  /**
+   * Check for existing TAN in the {@link VerificationTanRepository}.
+   *
+   * @param tan the TAN
+   * @return flag for existing TAN
+   */
+  public boolean checkTanNotExist(String tan) {
     String tanHash = hashingService.hash(tan);
     return !tanRepository.existsByTanHash(tanHash);
   }
 
+  /**
+   * Returns a generated valid teleTAN and persists it.
+   *
+   * @return a valid teleTAN
+   */
+  public String generateVerificationTeleTan() {
+    String teleTan = generateTeleTan();
+    persistTan(teleTan, TanType.TELETAN, TanSourceOfTrust.TELETAN);
+    return teleTan;
+  }
+
   /**
    * This Method generates a valid TAN and persists it. Returns the generated TAN.
    *
    * @param sourceOfTrust sets the source of Trust for the Tan
-   * @return Tan a valid tan with given source of Trust
+   * @return a valid tan with given source of Trust
    */
-  public String generateVerificationTan(String sourceOfTrust) {
+  public String generateVerificationTan(TanSourceOfTrust sourceOfTrust) {
     String tan = generateValidTan();
     persistTan(tan, TanType.TAN, sourceOfTrust);
     return tan;
   }
 
-  private VerificationTan generateVerificationTan(String tan, TanType tanType, String sourceOfTrust) {
+  protected VerificationTan generateVerificationTan(String tan, TanType tanType, TanSourceOfTrust sourceOfTrust) {
     LocalDateTime from = LocalDateTime.now();
     LocalDateTime until;
-
+    int tanValidInDays = verificationApplicationConfig.getTan().getValid().getDays();
+    int teleTanValidInHours = verificationApplicationConfig.getTan().getTele().getValid().getHours();
     if (tanType == TanType.TELETAN) {
       until = from.plusHours(teleTanValidInHours);
     } else {
@@ -243,16 +234,22 @@ private VerificationTan generateVerificationTan(String tan, TanType tanType, Str
   }
 
   /**
-   * Get existing VerificationTan by TAN from
-   * {@link VerificationTanRepository}.
+   * Get existing VerificationTan by TAN from {@link VerificationTanRepository}.
    *
    * @param tan the TAN
    * @return Optional VerificationTan
    */
   public Optional<VerificationTan> getEntityByTan(String tan) {
-    log.info("TanService start getEntityByTan.");
-    VerificationTan tanEntity = new VerificationTan();
-    tanEntity.setTanHash(hashingService.hash(tan));
-    return tanRepository.findOne(Example.of(tanEntity, ExampleMatcher.matching()));
+    log.info("Start getEntityByTan.");
+    return tanRepository.findByTanHash(hashingService.hash(tan));
+  }
+
+  /*
+   * The random number generator used by this class to create random
+   * based UUIDs. In a holder class to defer initialization until needed.
+   */
+  private static class Holder {
+
+    static final SecureRandom NUMBER_GENERATOR = new SecureRandom();
   }
 }
diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
index 561f4ac5..3d8be900 100644
--- a/src/main/resources/application.yml
+++ b/src/main/resources/application.yml
@@ -1,6 +1,6 @@
 spring:
   application:
-    name: verification-server
+    name: cwa-verification-server
   datasource:
     driver-class-name: org.h2.Driver
     url: jdbc:h2:mem:verification
@@ -19,6 +19,38 @@ feign:
         connect-timeout: 5000
         read-timeout: 5000
         logger-level: basic
+springdoc:
+  api-docs:
+    path: /api/docs
+  swagger-ui:
+    path: /api/swagger
+management:
+  server:
+    port: 8081
+  endpoint:
+    info:
+      enabled: true
+    health:
+      enabled: true
+    metrics:
+      enabled: true
+    prometheus:
+      enabled: true
+  endpoints:
+    enabled-by-default: false
+    web:
+      exposure:
+        include: info,health,metrics,prometheus
+    jmx:
+      exposure:
+        include: info,health,metrics,prometheus
+  health:
+    probes:
+      enabled: true
+  metrics:
+    export:
+      prometheus:
+        enabled: true
 tan:
   tele:
     valid:
@@ -30,3 +62,7 @@ appsession:
 uri:
   endpoint:
     labserver: http://localhost:8088
+entities:
+  cleanup:
+    days: 21
+    rate: 3600000
diff --git a/src/test/java/app/coronawarn/verification/VerificationAppTests.java b/src/test/java/app/coronawarn/verification/VerificationAppTests.java
deleted file mode 100644
index d87c5b3b..00000000
--- a/src/test/java/app/coronawarn/verification/VerificationAppTests.java
+++ /dev/null
@@ -1,385 +0,0 @@
-/*
- * Corona-Warn-App / cwa-verification
- *
- * (C) 2020, T-Systems International GmbH
- *
- * Deutsche Telekom AG and all other contributors /
- * copyright owners license this file to you under the Apache
- * License, Version 2.0 (the "License"); you may not use this
- * file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package app.coronawarn.verification;
-
-import app.coronawarn.verification.client.TestResult;
-import app.coronawarn.verification.client.HashedGuid;
-import app.coronawarn.verification.domain.VerificationAppSession;
-import app.coronawarn.verification.domain.VerificationTan;
-import app.coronawarn.verification.model.AppSessionSourceOfTrust;
-import app.coronawarn.verification.model.RegistrationToken;
-import app.coronawarn.verification.model.RegistrationTokenKeyType;
-import app.coronawarn.verification.model.RegistrationTokenRequest;
-import app.coronawarn.verification.model.Tan;
-import app.coronawarn.verification.model.TanSourceOfTrust;
-import app.coronawarn.verification.model.TanType;
-import app.coronawarn.verification.repository.VerificationAppSessionRepository;
-import app.coronawarn.verification.service.LabServerService;
-import app.coronawarn.verification.service.TanService;
-import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import java.time.LocalDateTime;
-import java.util.List;
-import java.util.Optional;
-import lombok.extern.slf4j.Slf4j;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.junit.Assert;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import org.junit.Test;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.runner.RunWith;
-import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.BDDMockito.given;
-import static org.mockito.Mockito.doReturn;
-import org.mockito.MockitoAnnotations;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.test.mock.mockito.MockBean;
-import org.springframework.http.MediaType;
-import org.springframework.test.context.ContextConfiguration;
-import org.springframework.test.context.junit4.SpringRunner;
-import org.springframework.test.web.servlet.MockMvc;
-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
-
-/**
- * This is the test class for the verification application.
- */
-@Slf4j
-@RunWith(SpringRunner.class)
-@AutoConfigureMockMvc
-@SpringBootTest
-@ContextConfiguration(classes = VerificationApplication.class)
-public class VerificationAppTests {
-
-  public static final String TEST_GUI_HASH = "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b";
-  public static final String TEST_TELETAN = "8eFjPSV";
-  public static final String TEST_REG_TOK = "1234567890";
-  public static final String TEST_REG_TOK_HASH = "c775e7b757ede630cd0aa1113bd102661ab38829ca52a6422ab782862f268646";
-  public static final TestResult TEST_LAB_POSITIVE_RESULT = new TestResult(2);
-  public static final String TEST_TAN = "1ea6ce8a-9740-11ea-bb37-0242ac130002";
-  public static final String TEST_SOT = "connectedLab17";
-  public static final String TEST_HASHED_TAN = "16154ea91c2c59d6ef9d0e7f902a59283b1e7ff9111570d20139a4e6b1832876";
-  public static final String TEST_TAN_TYPE = "TAN";
-  static final Logger LOG = LogManager.getLogger();
-  private static final LocalDateTime TAN_VALID_UNTIL_IN_DAYS = LocalDateTime.now().plusDays(7);
-  private static final String PREFIX_API_VERSION = "/version/v1";
-
-  @Autowired
-  private MockMvc mockMvc;
-  @MockBean
-  private LabServerService labServerService;
-  @MockBean
-  private TanService tanService;
-  @Autowired
-  private VerificationAppSessionRepository appSessionrepository;
-  @Autowired
-  private ObjectMapper mapper;
-
-  @BeforeEach
-  void setUp() {
-    MockitoAnnotations.initMocks(this);
-  }
-
-  /**
-   * Test generateTAN.
-   *
-   * @throws Exception if the test cannot be performed.
-   */
-  @Test
-  public void callGenerateTAN() throws Exception {
-    log.info("VerificationAppTests callGenerateTAN()");
-
-    prepareAppSessionTestData();
-    doReturn(TEST_LAB_POSITIVE_RESULT).when(labServerService).result(any());
-
-    mockMvc.perform(post(PREFIX_API_VERSION + "/tan")
-      .contentType(MediaType.APPLICATION_JSON)
-      .content(getAsJsonFormat(new RegistrationToken(TEST_REG_TOK))))
-      .andExpect(status().isCreated());
-
-    long count = appSessionrepository.count();
-    log.info("Got {} verification entries from db repository.", count);
-    assertEquals("Verification Failed: Amount of verfication entries is not 1 (Result=" + count + "). ", 1, count);
-
-    List<VerificationAppSession> verficationList = appSessionrepository.findAll();
-    assertNotNull(verficationList);
-    assertEquals(TEST_GUI_HASH, verficationList.get(0).getHashedGuid());
-    Assert.assertEquals(AppSessionSourceOfTrust.HASHED_GUID.getSourceName(), verficationList.get(0).getSourceOfTrust());
-    assertEquals(TEST_REG_TOK_HASH, verficationList.get(0).getRegistrationTokenHash());
-
-  }
-
-  /**
-   * Test get registration token by a guid.
-   *
-   * @throws Exception if the test cannot be performed.
-   */
-  @Test
-  public void callGetRegistrationTokenByGuid() throws Exception {
-    log.info("VerificationAppTests callGetRegistrationToken() ");
-
-    RegistrationTokenRequest request = new RegistrationTokenRequest(TEST_GUI_HASH, RegistrationTokenKeyType.GUID);
-    mockMvc.perform(post(PREFIX_API_VERSION + "/registrationToken")
-      .contentType(MediaType.APPLICATION_JSON)
-      .content(getAsJsonFormat(request)))
-      .andExpect(status().isCreated())
-      .andExpect(jsonPath("$.registrationToken").exists());
-
-    long count = appSessionrepository.count();
-    log.info("Got {} verification entries from db repository.", count);
-    assertEquals("Verification Failed: Amount of verfication entries is not 1 (Result=" + count + "). ", 1, count);
-
-    List<VerificationAppSession> verificationList = appSessionrepository.findAll();
-    assertNotNull(verificationList);
-    assertEquals(TEST_GUI_HASH, verificationList.get(0).getHashedGuid());
-    assertEquals(AppSessionSourceOfTrust.HASHED_GUID.getSourceName(), verificationList.get(0).getSourceOfTrust());
-    assertNotNull(verificationList.get(0).getRegistrationTokenHash());
-  }
-
-  /**
-   * Test get registration token by a tele tan.
-   *
-   * @throws Exception if the test cannot be performed.
-   */
-  @Test
-  public void callGetRegistrationTokenByTeleTan() throws Exception {
-    log.info("VerificationAppTests callGetRegistrationToken() ");
-    appSessionrepository.deleteAll();
-    RegistrationTokenRequest request = new RegistrationTokenRequest(TEST_TELETAN, RegistrationTokenKeyType.TELETAN);
-    given(this.tanService.verifyTeleTan(TEST_TELETAN)).willReturn(true);
-    given(this.tanService.isTeleTanValid(TEST_TELETAN)).willReturn(true);
-    given(this.tanService.getEntityByTan(TEST_TELETAN)).willReturn(Optional.of(getTeleTanTestData()));
-
-    mockMvc.perform(post(PREFIX_API_VERSION + "/registrationToken")
-      .contentType(MediaType.APPLICATION_JSON)
-      .content(getAsJsonFormat(request)))
-      .andExpect(status().isCreated())
-      .andExpect(jsonPath("$.registrationToken").exists());
-
-    long count = appSessionrepository.count();
-    log.info("Got {} verification entries from db repository.", count);
-    assertEquals("Verification Failed: Amount of verfication entries is not 1 (Result=" + count + "). ", 1, count);
-
-    List<VerificationAppSession> verificationList = appSessionrepository.findAll();
-    assertNotNull(verificationList);
-    assertNull(verificationList.get(0).getHashedGuid());
-    assertEquals(AppSessionSourceOfTrust.TELETAN.getSourceName(), verificationList.get(0).getSourceOfTrust());
-    assertNotNull(verificationList.get(0).getRegistrationTokenHash());
-  }
-
-  /**
-   * Test getTestState.
-   *
-   * @throws Exception if the test cannot be performed.
-   */
-  @Test
-  public void callGetTestState() throws Exception {
-    log.info("VerificationAppTests callGetTestState()");
-
-    prepareAppSessionTestData();
-
-    given(this.labServerService.result(new HashedGuid(TEST_GUI_HASH))).willReturn(TEST_LAB_POSITIVE_RESULT);
-
-    mockMvc.perform(post(PREFIX_API_VERSION + "/testresult").contentType(MediaType.APPLICATION_JSON).content(getAsJsonFormat(new RegistrationToken(TEST_REG_TOK))))
-      .andExpect(status().isOk())
-      .andExpect(jsonPath("$.testResult").value(TEST_LAB_POSITIVE_RESULT.getTestResult()));
-  }
-
-  /**
-   * Test getTestState with empty Entity of VerificationAppSession.
-   *
-   * @throws Exception if the test cannot be performed.
-   */
-  @Test
-  public void callGetTestStateByAppSessionIsEmpty() throws Exception {
-    log.info("VerificationAppTests callGetTestStateByAppSessionIsEmpty()");
-
-    //clean the repo
-    appSessionrepository.deleteAll();
-
-    mockMvc.perform(post(PREFIX_API_VERSION + "/testresult").contentType(MediaType.APPLICATION_JSON).content(getAsJsonFormat(new RegistrationToken(TEST_REG_TOK))))
-      .andExpect(status().isBadRequest());
-  }
-
-  /**
-   * Test verifyTAN.
-   *
-   * @throws Exception if the test cannot be performed.
-   */
-  @Test
-  public void callVerifyTAN() throws Exception {
-    log.info("VerificationAppTests callVerifyTAN()");
-
-    given(this.tanService.syntaxVerification(TEST_TAN)).willReturn(true);
-    given(this.tanService.getEntityByTan(TEST_TAN)).willReturn(Optional.of(getVerificationTANTestData()));
-
-    assertFalse("Is TAN redeemed?", this.tanService.getEntityByTan(TEST_TAN).get().isRedeemed());
-
-    mockMvc.perform(post(PREFIX_API_VERSION + "/tan/verify").contentType(MediaType.APPLICATION_JSON).content(getAsJsonFormat(new Tan(TEST_TAN))))
-      .andExpect(status().isOk());
-
-    assertTrue("Is TAN redeemed?", this.tanService.getEntityByTan(TEST_TAN).get().isRedeemed());
-  }
-
-  /**
-   * Test verifyTAN with empty Entity.
-   *
-   * @throws Exception if the test cannot be performed.
-   */
-  @Test
-  public void callVerifyTANByVerificationTANIsEmpty() throws Exception {
-    log.info("VerificationAppTests callVerifyTANByVerificationTANIsEmpty()");
-
-    given(this.tanService.syntaxVerification(TEST_TAN)).willReturn(true);
-    // without mock tanService.getEntityByTan so this method will return empty entity
-
-    mockMvc.perform(post(PREFIX_API_VERSION + "/tan/verify").contentType(MediaType.APPLICATION_JSON).content(getAsJsonFormat(new Tan(TEST_TAN))))
-      .andExpect(status().isNotFound());
-  }
-
-  /**
-   * Test verifyTAN with syntax problems.
-   *
-   * @throws Exception if the test cannot be performed.
-   */
-  @Test
-  public void callVerifyTANByTanSyntaxFailed() throws Exception {
-    log.info("VerificationAppTests callVerifyTANByTanSyntaxFailed()");
-
-    // without mock tanService.syntaxVerification so this method will return false
-    given(this.tanService.getEntityByTan(TEST_TAN)).willReturn(Optional.of(getVerificationTANTestData()));
-
-    mockMvc.perform(post(PREFIX_API_VERSION + "/tan/verify").contentType(MediaType.APPLICATION_JSON).content(getAsJsonFormat(new Tan(TEST_TAN))))
-      .andExpect(status().isNotFound());
-  }
-
-  /**
-   * Test verifyTAN expired from.
-   *
-   * @throws Exception if the test cannot be performed.
-   */
-  @Test
-  public void callVerifyTANByExpiredTimeFrom() throws Exception {
-    log.info("VerificationAppTests callVerifyTANByTanSyntaxFailed()");
-
-    given(this.tanService.syntaxVerification(TEST_TAN)).willReturn(true);
-    VerificationTan cvtan = getVerificationTANTestData();
-    // setValidFrom later 2 days then now
-    cvtan.setValidFrom(LocalDateTime.now().plusDays(2));
-    given(this.tanService.getEntityByTan(TEST_TAN)).willReturn(Optional.of(cvtan));
-
-    mockMvc.perform(post(PREFIX_API_VERSION + "/tan/verify").contentType(MediaType.APPLICATION_JSON).content(getAsJsonFormat(new Tan(TEST_TAN))))
-      .andExpect(status().isNotFound());
-  }
-
-  /**
-   * Test verifyTAN expired until.
-   *
-   * @throws Exception if the test cannot be performed.
-   */
-  @Test
-  public void callVerifyTANByExpiredTimeUntil() throws Exception {
-    log.info("VerificationAppTests callVerifyTANByTanSyntaxFailed()");
-
-    given(this.tanService.syntaxVerification(TEST_TAN)).willReturn(true);
-    VerificationTan cvtan = getVerificationTANTestData();
-    // setValidUntil earlier 2 days then now
-    cvtan.setValidUntil(LocalDateTime.now().minusDays(2));
-    given(this.tanService.getEntityByTan(TEST_TAN)).willReturn(Optional.of(cvtan));
-
-    mockMvc.perform(post(PREFIX_API_VERSION + "/tan/verify").contentType(MediaType.APPLICATION_JSON).content(getAsJsonFormat(new Tan(TEST_TAN))))
-      .andExpect(status().isNotFound());
-  }
-
-  /**
-   * Test verifyTAN is redeemed.
-   *
-   * @throws Exception if the test cannot be performed.
-   */
-  @Test
-  public void callVerifyTANByIsRedeemed() throws Exception {
-    log.info("VerificationAppTests callVerifyTANByIsRedeemed()");
-
-    given(this.tanService.syntaxVerification(TEST_TAN)).willReturn(true);
-    VerificationTan cvtan = getVerificationTANTestData();
-    // tan is redeemed
-    cvtan.setRedeemed(true);
-    given(this.tanService.getEntityByTan(TEST_TAN)).willReturn(Optional.of(cvtan));
-
-    mockMvc.perform(post(PREFIX_API_VERSION + "/tan/verify").contentType(MediaType.APPLICATION_JSON).content(getAsJsonFormat(new Tan(TEST_TAN))))
-      .andExpect(status().isNotFound());
-  }
-
-  private void prepareAppSessionTestData() {
-    appSessionrepository.deleteAll();
-    appSessionrepository.save(getAppSessionTestData());
-  }
-
-  private VerificationAppSession getAppSessionTestData() {
-    VerificationAppSession cv = new VerificationAppSession();
-    cv.setHashedGuid(TEST_GUI_HASH);
-    cv.setCreatedAt(LocalDateTime.now());
-    cv.setUpdatedAt(LocalDateTime.now());
-    cv.setTanCounter(0);
-    cv.setSourceOfTrust(AppSessionSourceOfTrust.HASHED_GUID.getSourceName());
-    cv.setRegistrationTokenHash(TEST_REG_TOK_HASH);
-    return cv;
-  }
-
-  private VerificationTan getVerificationTANTestData() {
-    VerificationTan cvtan = new VerificationTan();
-    cvtan.setCreatedAt(LocalDateTime.now());
-    cvtan.setUpdatedAt(LocalDateTime.now());
-    cvtan.setRedeemed(false);
-    cvtan.setSourceOfTrust(TEST_SOT);
-    cvtan.setTanHash(TEST_HASHED_TAN);
-    cvtan.setType(TEST_TAN_TYPE);
-    cvtan.setValidFrom(LocalDateTime.now().minusDays(5));
-    cvtan.setValidUntil(TAN_VALID_UNTIL_IN_DAYS);
-    return cvtan;
-  }
-
-  private VerificationTan getTeleTanTestData() {
-    VerificationTan cvtan = new VerificationTan();
-    cvtan.setCreatedAt(LocalDateTime.now());
-    cvtan.setUpdatedAt(LocalDateTime.now());
-    cvtan.setRedeemed(false);
-    cvtan.setSourceOfTrust(TanSourceOfTrust.TELETAN.getSourceName());
-    cvtan.setTanHash(TEST_HASHED_TAN);
-    cvtan.setType(TanType.TELETAN.name());
-    cvtan.setValidFrom(LocalDateTime.now());
-    cvtan.setValidUntil(LocalDateTime.now().plusHours(1));
-    return cvtan;
-  }
-
-  private String getAsJsonFormat(Object o) throws JsonProcessingException {
-    return mapper.writeValueAsString(o);
-  }
-}
diff --git a/src/test/java/app/coronawarn/verification/VerificationApplicationTest.java b/src/test/java/app/coronawarn/verification/VerificationApplicationTest.java
new file mode 100644
index 00000000..90aaaca5
--- /dev/null
+++ b/src/test/java/app/coronawarn/verification/VerificationApplicationTest.java
@@ -0,0 +1,608 @@
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification;
+
+import app.coronawarn.verification.model.HashedGuid;
+import app.coronawarn.verification.model.TestResult;
+import app.coronawarn.verification.domain.VerificationAppSession;
+import app.coronawarn.verification.domain.VerificationTan;
+import app.coronawarn.verification.model.*;
+import app.coronawarn.verification.repository.VerificationAppSessionRepository;
+import app.coronawarn.verification.service.LabServerService;
+import app.coronawarn.verification.service.TanService;
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import lombok.extern.slf4j.Slf4j;
+import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.runner.RunWith;
+import org.mockito.MockitoAnnotations;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.mock.mockito.MockBean;
+import org.springframework.http.MediaType;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.test.web.servlet.MockMvc;
+
+import java.time.LocalDateTime;
+import java.util.List;
+import java.util.Optional;
+
+import static org.junit.Assert.*;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.BDDMockito.given;
+import static org.mockito.Mockito.doReturn;
+import static org.mockito.Mockito.when;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+/**
+ * This is the test class for the verification application.
+ */
+@Slf4j
+@RunWith(SpringRunner.class)
+@SpringBootTest
+@ContextConfiguration(classes = VerificationApplication.class)
+@AutoConfigureMockMvc
+public class VerificationApplicationTest {
+
+  public static final String TEST_GUI_HASH = "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b";
+  public static final String TEST_INVALID_GUI_HASH = "f0e4c2f76c58916ec2b";
+  public static final String TEST_TELE_TAN = "R3ZNUeV";
+  public static final String TEST_TELE_TAN_HASH = "eeaa54dc40aa84f587e3bc0cbbf18f7c05891558a5fe1348d52f3277794d8730";
+  public static final String TEST_INVALID_REG_TOK = "1234567890";
+  public static final String TEST_REG_TOK = "1ea6ce8a-9740-41ea-bb37-0242ac130002";
+  public static final String TEST_REG_TOK_HASH = "0199effab87800689c15c08e234db54f088cc365132ffc230e882b82cd3ecf95";
+  public static final TestResult TEST_LAB_POSITIVE_RESULT = new TestResult(2);
+  public static final TestResult TEST_LAB_NEGATIVE_RESULT = new TestResult(1);
+  public static final String TEST_TAN = "1819d933-45f6-4e3c-80c7-eeffd2d44ee6";
+  public static final String TEST_INVALID_TAN = "1ea6ce8a-9740-11ea-is-invalid";
+  public static final TanSourceOfTrust TEST_SOT = TanSourceOfTrust.CONNECTED_LAB;
+  public static final String TEST_HASHED_TAN = "cfb5368fc0fca485847acb28e6a96c958bb6ab7350ac766be88ad13841750231";
+  public static final String TEST_TAN_TYPE = "TAN";
+  private static final LocalDateTime TAN_VALID_UNTIL_IN_DAYS = LocalDateTime.now().plusDays(7);
+  private static final String PREFIX_API_VERSION = "/version/v1";
+
+  @Autowired
+  private MockMvc mockMvc;
+  @MockBean
+  private LabServerService labServerService;
+  @MockBean
+  private TanService tanService;
+  @Autowired
+  private VerificationAppSessionRepository appSessionrepository;
+  @Autowired
+  private ObjectMapper mapper;
+
+  @BeforeEach
+  void setUp() {
+    MockitoAnnotations.initMocks(this);
+  }
+
+  /**
+   * Test generateTAN.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGenerateTan() throws Exception {
+    log.info("process callGenerateTan()");
+
+    prepareAppSessionTestData();
+    doReturn(TEST_LAB_POSITIVE_RESULT).when(labServerService).result(any());
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new RegistrationToken(TEST_REG_TOK))))
+      .andExpect(status().isCreated());
+
+    long count = appSessionrepository.count();
+    log.info("Got {} verification entries from db repository.", count);
+    assertEquals("Verification Failed: Amount of verification entries is not 1 (Result=" + count + "). ", 1, count);
+
+    List<VerificationAppSession> verificationList = appSessionrepository.findAll();
+    assertNotNull(verificationList);
+    assertEquals(TEST_GUI_HASH, verificationList.get(0).getHashedGuid());
+    assertEquals(AppSessionSourceOfTrust.HASHED_GUID, verificationList.get(0).getSourceOfTrust());
+    assertEquals(TEST_REG_TOK_HASH, verificationList.get(0).getRegistrationTokenHash());
+
+  }
+
+  /**
+   * Test generateTAN with an unknown registration token.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGenerateTanByUnknownToken() throws Exception {
+    log.info("process callGenerateTanByUnknownToken()");
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new RegistrationToken(TEST_REG_TOK))))
+      .andExpect(status().isBadRequest());
+  }
+
+  /**
+   * Test generateTAN with an invalid registration token.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGenerateTanByInvalidToken() throws Exception {
+    log.info("process callGenerateTanByInvalidToken()");
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new RegistrationToken(TEST_INVALID_REG_TOK))))
+      .andExpect(status().isBadRequest());
+  }
+
+  /**
+   * Test generateTAN with an negative test result from the lab-server.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGenerateTanWithNegativeCovidResult() throws Exception {
+    log.info("process callGenerateTanWithNegativeCovidResult()");
+    prepareAppSessionTestData();
+    doReturn(TEST_LAB_NEGATIVE_RESULT).when(labServerService).result(any());
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new RegistrationToken(TEST_REG_TOK))))
+      .andExpect(status().isBadRequest());
+  }
+
+  /**
+   * Test generateTAN with an registration token where the tancounter maximum is reached.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGenerateTanWithTanCounterMaximum() throws Exception {
+    log.info("process callGenerateTanWithTanCounterMaximum()");
+    appSessionrepository.deleteAll();
+    VerificationAppSession appSessionTestData = getAppSessionTestData();
+    appSessionTestData.setTanCounter(2);
+    appSessionrepository.save(appSessionTestData);
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new RegistrationToken(TEST_REG_TOK))))
+      .andExpect(status().isBadRequest());
+  }
+
+  /**
+   * Test generateTAN with an registration token connected to an appsession based on a tele Tan.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGenerateTanWithTeleTanAppSession() throws Exception {
+    log.info("process callGenerateTanWithTeleTanAppSession()");
+    appSessionrepository.deleteAll();
+    VerificationAppSession appSessionTestData = getAppSessionTestData();
+    appSessionTestData.setSourceOfTrust(AppSessionSourceOfTrust.TELETAN);
+    appSessionrepository.save(appSessionTestData);
+    doReturn(TEST_LAB_NEGATIVE_RESULT).when(labServerService).result(any());
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new RegistrationToken(TEST_REG_TOK))))
+      .andExpect(status().isCreated());
+  }
+
+  /**
+   * Test generateTAN with an unknown source of trust in the appsession.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGenerateTanWithUnknownSourceOfTrust() throws Exception {
+    log.info("process callGenerateTanWithUnknownSourceOfTrust()");
+    appSessionrepository.deleteAll();
+    VerificationAppSession appSessionTestData = getAppSessionTestData();
+    appSessionTestData.setSourceOfTrust(AppSessionSourceOfTrust.HASHED_GUID);
+    appSessionrepository.save(appSessionTestData);
+    doReturn(TEST_LAB_NEGATIVE_RESULT).when(labServerService).result(any());
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new RegistrationToken(TEST_REG_TOK))))
+      .andExpect(status().isBadRequest());
+  }
+
+  /**
+   * Test the generation of a tele Tan.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGenerateTeleTAN() throws Exception {
+    log.info("process callGenerateTeleTAN()");
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan/teletan"))
+      .andExpect(status().isCreated());
+  }
+
+  /**
+   * Test get registration token by a guid.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGetRegistrationTokenByGuid() throws Exception {
+    log.info("process callGetRegistrationTokenByGuid() ");
+    appSessionrepository.deleteAll();
+    RegistrationTokenRequest request = new RegistrationTokenRequest(TEST_GUI_HASH, RegistrationTokenKeyType.GUID);
+    mockMvc.perform(post(PREFIX_API_VERSION + "/registrationToken")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(request)))
+      .andExpect(status().isCreated())
+      .andExpect(jsonPath("$.registrationToken").exists());
+
+    long count = appSessionrepository.count();
+    log.info("Got {} verification entries from db repository.", count);
+    assertEquals("Verification Failed: Amount of verification entries is not 1 (Result=" + count + "). ", 1, count);
+
+    List<VerificationAppSession> verificationList = appSessionrepository.findAll();
+    assertNotNull(verificationList);
+    assertEquals(TEST_GUI_HASH, verificationList.get(0).getHashedGuid());
+    assertEquals(AppSessionSourceOfTrust.HASHED_GUID, verificationList.get(0).getSourceOfTrust());
+    assertNotNull(verificationList.get(0).getRegistrationTokenHash());
+  }
+
+  /**
+   * Test get registration token by a keytype which is null.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGetRegistrationTokenWithNullKeyType() throws Exception {
+    log.info("process callGetRegistrationTokenWithNullKeyType() ");
+    appSessionrepository.deleteAll();
+    RegistrationTokenRequest request = new RegistrationTokenRequest(TEST_GUI_HASH, null);
+    mockMvc.perform(post(PREFIX_API_VERSION + "/registrationToken")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(request)))
+      .andExpect(status().isBadRequest());
+  }
+
+  /**
+   * Test get registration token by a key which is null.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGetRegistrationTokenWithNullKey() throws Exception {
+    log.info("process callGetRegistrationTokenWithNullKey() ");
+    appSessionrepository.deleteAll();
+    RegistrationTokenRequest request = new RegistrationTokenRequest(null, RegistrationTokenKeyType.GUID);
+    mockMvc.perform(post(PREFIX_API_VERSION + "/registrationToken")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(request)))
+      .andExpect(status().isBadRequest());
+  }
+
+  /**
+   * Test get registration token by a tele tan.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGetRegistrationTokenByTeleTan() throws Exception {
+    log.info("process callGetRegistrationTokenByTeleTan() ");
+    appSessionrepository.deleteAll();
+    RegistrationTokenRequest request = new RegistrationTokenRequest(TEST_TELE_TAN, RegistrationTokenKeyType.TELETAN);
+    given(this.tanService.verifyTeleTan(TEST_TELE_TAN)).willReturn(true);
+    given(this.tanService.isTeleTanValid(TEST_TELE_TAN)).willReturn(true);
+    given(this.tanService.getEntityByTan(TEST_TELE_TAN)).willReturn(Optional.of(getTeleTanTestData()));
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/registrationToken")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(request)))
+      .andExpect(status().isCreated())
+      .andExpect(jsonPath("$.registrationToken").exists());
+
+    long count = appSessionrepository.count();
+    log.info("Got {} verification entries from db repository.", count);
+    assertEquals("Verification Failed: Amount of verification entries is not 1 (Result=" + count + "). ", 1, count);
+
+    List<VerificationAppSession> verificationList = appSessionrepository.findAll();
+    assertNotNull(verificationList);
+    assertNull(verificationList.get(0).getHashedGuid());
+    assertEquals(AppSessionSourceOfTrust.TELETAN, verificationList.get(0).getSourceOfTrust());
+    assertNotNull(verificationList.get(0).getRegistrationTokenHash());
+  }
+
+  /**
+   * Test get registration token by a unknown Tele-Tan.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGetRegistrationTokenByUnknownTeleTan() throws Exception {
+    log.info("process callGetRegistrationTokenByUnknownTeleTan() ");
+    appSessionrepository.deleteAll();
+    RegistrationTokenRequest request = new RegistrationTokenRequest(TEST_TELE_TAN, RegistrationTokenKeyType.TELETAN);
+    when(this.tanService.verifyTeleTan(TEST_TELE_TAN)).thenCallRealMethod();
+    given(this.tanService.getEntityByTan(TEST_TELE_TAN)).willReturn(Optional.empty());
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/registrationToken")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(request)))
+      .andExpect(status().isBadRequest());
+  }
+
+  /**
+   * Test get registration token by invalid Guid.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGetRegistrationTokenByInvalidHashedGUID() throws Exception {
+    log.info("process callGetRegistrationTokenByInvalidHashedGUID() ");
+    appSessionrepository.deleteAll();
+    RegistrationTokenRequest request = new RegistrationTokenRequest(TEST_INVALID_GUI_HASH, RegistrationTokenKeyType.GUID);
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/registrationToken")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(request)))
+      .andExpect(status().isBadRequest());
+  }
+
+  /**
+   *
+   * Test get registration token for a guid, but the guid already has a registration token.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGetRegistrationTokenByAlreadyExistForGUID() throws Exception {
+    log.info("process callGetRegistrationTokenByAlreadyExistForGUID() ");
+    prepareAppSessionTestData();
+    RegistrationTokenRequest request = new RegistrationTokenRequest(TEST_GUI_HASH, RegistrationTokenKeyType.GUID);
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/registrationToken")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(request)))
+      .andExpect(status().isBadRequest());
+  }
+
+  /**
+   * Test get registration token for a teletan, but the teletan already has a registration token.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGetRegistrationTokenByAlreadyExistForTeleTan() throws Exception {
+    log.info("process callGetRegistrationTokenByAlreadyExistForTeleTan() ");
+
+    appSessionrepository.deleteAll();
+    VerificationAppSession appSessionTestData = getAppSessionTestData();
+    appSessionTestData.setTeleTanHash(TEST_TELE_TAN_HASH);
+    appSessionrepository.save(appSessionTestData);
+
+    given(this.tanService.verifyTeleTan(TEST_TELE_TAN)).willReturn(true);
+
+    RegistrationTokenRequest request = new RegistrationTokenRequest(TEST_TELE_TAN, RegistrationTokenKeyType.TELETAN);
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/registrationToken")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(request)))
+      .andExpect(status().isBadRequest());
+  }
+
+  /**
+   * Test getTestState.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGetTestState() throws Exception {
+    log.info("process callGetTestState()");
+
+    prepareAppSessionTestData();
+
+    given(this.labServerService.result(new HashedGuid(TEST_GUI_HASH))).willReturn(TEST_LAB_POSITIVE_RESULT);
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/testresult").contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new RegistrationToken(TEST_REG_TOK))))
+      .andExpect(status().isOk())
+      .andExpect(jsonPath("$.testResult").value(TEST_LAB_POSITIVE_RESULT.getTestResult()));
+  }
+
+  /**
+   * Test getTestState with empty Entity of VerificationAppSession.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callGetTestStateByAppSessionIsEmpty() throws Exception {
+    log.info("process callGetTestStateByAppSessionIsEmpty()");
+
+    //clean the repo
+    appSessionrepository.deleteAll();
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/testresult")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new RegistrationToken(TEST_REG_TOK))))
+      .andExpect(status().isBadRequest());
+  }
+
+  /**
+   * Test verifyTAN.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callVerifyTAN() throws Exception {
+    log.info("process callVerifyTAN()");
+
+    given(this.tanService.getEntityByTan(TEST_TAN)).willReturn(Optional.of(getVerificationTANTestData()));
+
+    assertFalse("Is TAN redeemed?", this.tanService.getEntityByTan(TEST_TAN).get().isRedeemed());
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan/verify")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new Tan(TEST_TAN))))
+      .andExpect(status().isOk());
+  }
+
+  /**
+   * Test verifyTAN with empty Entity.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callVerifyTANByVerificationTANIsEmpty() throws Exception {
+    log.info("process callVerifyTANByVerificationTANIsEmpty()");
+
+    // without mock tanService.getEntityByTan so this method will return empty entity
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan/verify")
+      .contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new Tan(TEST_TAN))))
+      .andExpect(status().isNotFound());
+  }
+
+  /**
+   * Test verifyTAN with syntax problems.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callVerifyTANByTanWithInvalidSyntax() throws Exception {
+    log.info("process callVerifyTANByTanWithInvalidSyntax()");
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan/verify").contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new Tan(TEST_INVALID_TAN))))
+      .andExpect(status().isBadRequest());
+  }
+
+  /**
+   * Test verifyTAN expired from.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callVerifyTANByExpiredTimeFrom() throws Exception {
+    log.info("process callVerifyTANByExpiredTimeFrom()");
+
+    VerificationTan cvtan = getVerificationTANTestData();
+    // setValidFrom later 2 days then now
+    cvtan.setValidFrom(LocalDateTime.now().plusDays(2));
+    given(this.tanService.getEntityByTan(TEST_TAN)).willReturn(Optional.of(cvtan));
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan/verify").contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new Tan(TEST_TAN))))
+      .andExpect(status().isNotFound());
+  }
+
+  /**
+   * Test verifyTAN expired until.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callVerifyTANByExpiredTimeUntil() throws Exception {
+    log.info("process callVerifyTANByExpiredTimeUntil()");
+
+    VerificationTan cvtan = getVerificationTANTestData();
+    // setValidUntil earlier 2 days then now
+    cvtan.setValidUntil(LocalDateTime.now().minusDays(2));
+    given(this.tanService.getEntityByTan(TEST_TAN)).willReturn(Optional.of(cvtan));
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan/verify").contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new Tan(TEST_TAN))))
+      .andExpect(status().isNotFound());
+  }
+
+  /**
+   * Test verifyTAN is redeemed.
+   *
+   * @throws Exception if the test cannot be performed.
+   */
+  @Test
+  public void callVerifyTANByIsRedeemed() throws Exception {
+    log.info("process callVerifyTANByIsRedeemed()");
+
+    VerificationTan cvtan = getVerificationTANTestData();
+    // tan is redeemed
+    cvtan.setRedeemed(true);
+    given(this.tanService.getEntityByTan(TEST_TAN)).willReturn(Optional.of(cvtan));
+
+    mockMvc.perform(post(PREFIX_API_VERSION + "/tan/verify").contentType(MediaType.APPLICATION_JSON)
+      .content(getAsJsonFormat(new Tan(TEST_TAN))))
+      .andExpect(status().isNotFound());
+  }
+
+  private void prepareAppSessionTestData() {
+    appSessionrepository.deleteAll();
+    appSessionrepository.save(getAppSessionTestData());
+  }
+
+  private VerificationAppSession getAppSessionTestData() {
+    VerificationAppSession cv = new VerificationAppSession();
+    cv.setHashedGuid(TEST_GUI_HASH);
+    cv.setCreatedAt(LocalDateTime.now());
+    cv.setUpdatedAt(LocalDateTime.now());
+    cv.setTanCounter(0);
+    cv.setSourceOfTrust(AppSessionSourceOfTrust.HASHED_GUID);
+    cv.setRegistrationTokenHash(TEST_REG_TOK_HASH);
+    return cv;
+  }
+
+  private VerificationTan getVerificationTANTestData() {
+    VerificationTan cvtan = new VerificationTan();
+    cvtan.setCreatedAt(LocalDateTime.now());
+    cvtan.setUpdatedAt(LocalDateTime.now());
+    cvtan.setRedeemed(false);
+    cvtan.setSourceOfTrust(TEST_SOT);
+    cvtan.setTanHash(TEST_HASHED_TAN);
+    cvtan.setType(TEST_TAN_TYPE);
+    cvtan.setValidFrom(LocalDateTime.now().minusDays(5));
+    cvtan.setValidUntil(TAN_VALID_UNTIL_IN_DAYS);
+    return cvtan;
+  }
+
+  private VerificationTan getTeleTanTestData() {
+    VerificationTan cvtan = new VerificationTan();
+    cvtan.setCreatedAt(LocalDateTime.now());
+    cvtan.setUpdatedAt(LocalDateTime.now());
+    cvtan.setRedeemed(false);
+    cvtan.setSourceOfTrust(TanSourceOfTrust.TELETAN);
+    cvtan.setTanHash(TEST_HASHED_TAN);
+    cvtan.setType(TanType.TELETAN.name());
+    cvtan.setValidFrom(LocalDateTime.now());
+    cvtan.setValidUntil(LocalDateTime.now().plusHours(1));
+    return cvtan;
+  }
+
+  private String getAsJsonFormat(Object o) throws JsonProcessingException {
+    return mapper.writeValueAsString(o);
+  }
+}
diff --git a/src/test/java/app/coronawarn/verification/service/EntitiesCleanupServiceTest.java b/src/test/java/app/coronawarn/verification/service/EntitiesCleanupServiceTest.java
new file mode 100644
index 00000000..b54bf7f0
--- /dev/null
+++ b/src/test/java/app/coronawarn/verification/service/EntitiesCleanupServiceTest.java
@@ -0,0 +1,124 @@
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.service;
+
+import app.coronawarn.verification.VerificationApplication;
+import app.coronawarn.verification.domain.VerificationAppSession;
+import app.coronawarn.verification.domain.VerificationTan;
+import app.coronawarn.verification.model.AppSessionSourceOfTrust;
+import app.coronawarn.verification.model.TanSourceOfTrust;
+import app.coronawarn.verification.repository.VerificationAppSessionRepository;
+import app.coronawarn.verification.repository.VerificationTanRepository;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringRunner;
+import rx.Single;
+
+import java.time.LocalDateTime;
+import java.time.Period;
+import java.util.Optional;
+import java.util.concurrent.TimeUnit;
+
+@RunWith(SpringRunner.class)
+@SpringBootTest(
+  properties = {
+    "entities.cleanup.rate=1000"
+  }
+)
+@ContextConfiguration(classes = VerificationApplication.class)
+public class EntitiesCleanupServiceTest {
+
+  public static final String TEST_GUI_HASH = "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b";
+  public static final String TEST_REG_TOK_HASH = "c775e7b757ede630cd0aa1113bd102661ab38829ca52a6422ab782862f268646";
+  public static final String TEST_HASHED_TAN = "16154ea91c2c59d6ef9d0e7f902a59283b1e7ff9111570d20139a4e6b1832876";
+
+  @Autowired
+  private VerificationAppSessionRepository appSessionRepository;
+
+  @Autowired
+  private VerificationTanRepository tanRepository;
+
+  @Before
+  public void before() {
+    appSessionRepository.deleteAll();
+    tanRepository.deleteAll();
+  }
+
+  @Test
+  public void cleanupDatabaseTest() {
+    LocalDateTime testCreationTime = LocalDateTime.now().minus(Period.ofDays(21));
+    // create repo 1
+    VerificationAppSession session = appSessionRepository.save(getAppSessionTestData(testCreationTime));
+    Assert.assertNotNull(session);
+    Assert.assertEquals(TEST_GUI_HASH, session.getHashedGuid());
+    // create repo 2
+    VerificationTan tan = tanRepository.save(getVerificationTANTestData(testCreationTime));
+    Assert.assertNotNull(tan);
+    Assert.assertEquals(TEST_HASHED_TAN, tan.getTanHash());
+    // find in repos
+    Optional<VerificationAppSession> findSession = appSessionRepository.findByRegistrationTokenHash(TEST_REG_TOK_HASH);
+    Assert.assertTrue(findSession.isPresent());
+    Assert.assertEquals(TEST_GUI_HASH, findSession.get().getHashedGuid());
+
+    Assert.assertEquals(testCreationTime.withNano(5), findSession.get().getCreatedAt().withNano(5));
+    Optional<VerificationTan> findTan = tanRepository.findByTanHash(TEST_HASHED_TAN);
+    Assert.assertTrue(findTan.isPresent());
+    Assert.assertEquals(TEST_HASHED_TAN, findTan.get().getTanHash());
+    Assert.assertEquals(testCreationTime.withNano(5), findTan.get().getCreatedAt().withNano(5));
+    // wait
+    Single.fromCallable(() -> true).delay(1, TimeUnit.SECONDS).toBlocking().value();
+    // find and check repos clean up
+    findSession = appSessionRepository.findByRegistrationTokenHash(TEST_REG_TOK_HASH);
+    Assert.assertFalse(findSession.isPresent());
+    findTan = tanRepository.findByTanHash(TEST_HASHED_TAN);
+    Assert.assertFalse(findTan.isPresent());
+  }
+
+  private VerificationAppSession getAppSessionTestData(LocalDateTime testCreationTime) {
+    VerificationAppSession cv = new VerificationAppSession();
+    cv.setHashedGuid(TEST_GUI_HASH);
+    cv.setCreatedAt(testCreationTime);
+    cv.setUpdatedAt(LocalDateTime.now());
+    cv.setTanCounter(0);
+    cv.setSourceOfTrust(AppSessionSourceOfTrust.HASHED_GUID);
+    cv.setRegistrationTokenHash(TEST_REG_TOK_HASH);
+    return cv;
+  }
+
+  private VerificationTan getVerificationTANTestData(LocalDateTime testCreationTime) {
+    VerificationTan cvtan = new VerificationTan();
+    cvtan.setCreatedAt(testCreationTime);
+    cvtan.setUpdatedAt(LocalDateTime.now());
+    cvtan.setRedeemed(false);
+    cvtan.setSourceOfTrust(TanSourceOfTrust.CONNECTED_LAB);
+    cvtan.setTanHash(TEST_HASHED_TAN);
+    cvtan.setType("TAN");
+    cvtan.setValidFrom(LocalDateTime.now().minusDays(5));
+    cvtan.setValidUntil(LocalDateTime.now().plusDays(7));
+    return cvtan;
+  }
+}
diff --git a/src/test/java/app/coronawarn/verification/service/HashingServiceTest.java b/src/test/java/app/coronawarn/verification/service/HashingServiceTest.java
index e2d52b05..11d8a710 100644
--- a/src/test/java/app/coronawarn/verification/service/HashingServiceTest.java
+++ b/src/test/java/app/coronawarn/verification/service/HashingServiceTest.java
@@ -42,7 +42,6 @@ public class HashingServiceTest {
 
   @Test
   public void testValidSha256Hash() {
-
     assertTrue(hashingService.isHashValid("523463041ef9ffa2950d8450feb34c88bc8692c40c9cf3c99dcdf75e270229e2"));
     assertTrue(hashingService.isHashValid("0000000000000000000000000000000000000000000000000000000000000000"));
     assertTrue(hashingService.isHashValid("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
@@ -50,7 +49,6 @@ public void testValidSha256Hash() {
 
   @Test
   public void testInvalidSha256Hash() {
-
     assertFalse(hashingService.isHashValid("x23463041ef9ffa2950d8z50feb34c88bc8692c40c9cf3c99dcdf75e270229e2"));
     assertFalse(hashingService.isHashValid("523463041ef9ffa2950d8z50feb34c88bc8692c40c9cf3c99dcdf75e270229e2"));
     assertFalse(hashingService.isHashValid("0"));
diff --git a/src/test/java/app/coronawarn/verification/service/LabServerServiceTest.java b/src/test/java/app/coronawarn/verification/service/LabServerServiceTest.java
new file mode 100644
index 00000000..79122ce0
--- /dev/null
+++ b/src/test/java/app/coronawarn/verification/service/LabServerServiceTest.java
@@ -0,0 +1,80 @@
+/*
+ * Corona-Warn-App / cwa-verification
+ *
+ * (C) 2020, T-Systems International GmbH
+ *
+ * Deutsche Telekom AG and all other contributors /
+ * copyright owners license this file to you under the Apache
+ * License, Version 2.0 (the "License"); you may not use this
+ * file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package app.coronawarn.verification.service;
+
+import app.coronawarn.verification.VerificationApplication;
+import app.coronawarn.verification.model.HashedGuid;
+import app.coronawarn.verification.client.LabServerClient;
+import app.coronawarn.verification.model.TestResult;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringRunner;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+@RunWith(SpringRunner.class)
+@SpringBootTest
+@ContextConfiguration(classes = VerificationApplication.class)
+public class LabServerServiceTest {
+
+  public static final String TEST_GUI_HASH_1 = "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b";
+  public static final String TEST_GUI_HASH_2 = "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13c";
+  public static final TestResult TEST_LAB_POSITIVE_RESULT = new TestResult(2);
+  public static final TestResult TEST_LAB_REDEEMED_RESULT = new TestResult(4);
+  private LabServerService labServerService;
+
+  @Before
+  public void setUp() {
+    labServerService = new LabServerService(new LabServerClientMock());
+  }
+
+  /**
+   * Test result method by positive status.
+   */
+  @Test
+  public void resultPositiveTest() {
+    TestResult testResult = labServerService.result(new HashedGuid(TEST_GUI_HASH_1));
+    assertThat(testResult).isEqualTo(TEST_LAB_POSITIVE_RESULT);
+  }
+  
+  /**
+   * Test result method by redeemed status.
+   */
+  @Test
+  public void resultRedeemedTest() {
+    TestResult testResult = labServerService.result(new HashedGuid(TEST_GUI_HASH_2));
+    assertThat(testResult).isEqualTo(TEST_LAB_REDEEMED_RESULT);
+  }  
+
+  public static class LabServerClientMock implements LabServerClient {
+    @Override
+    public TestResult result(HashedGuid guid) {
+      if(guid.getId().equals(TEST_GUI_HASH_1)){
+        return new TestResult(2);
+      }
+      return new TestResult(4);     
+    }
+  }
+}
diff --git a/src/test/java/app/coronawarn/verification/service/TanServiceTest.java b/src/test/java/app/coronawarn/verification/service/TanServiceTest.java
index 723283f6..a2609f24 100644
--- a/src/test/java/app/coronawarn/verification/service/TanServiceTest.java
+++ b/src/test/java/app/coronawarn/verification/service/TanServiceTest.java
@@ -23,15 +23,17 @@
 
 import app.coronawarn.verification.VerificationApplication;
 import app.coronawarn.verification.domain.VerificationTan;
+import app.coronawarn.verification.model.TanSourceOfTrust;
+import app.coronawarn.verification.model.TanType;
+import app.coronawarn.verification.repository.VerificationTanRepository;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
 import java.util.Optional;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import lombok.extern.slf4j.Slf4j;
 import org.junit.Assert;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.assertTrue;
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -39,29 +41,73 @@
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringRunner;
 
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+@Slf4j
 @RunWith(SpringRunner.class)
 @SpringBootTest
 @ContextConfiguration(classes = VerificationApplication.class)
 public class TanServiceTest {
+
   public static final String TEST_TAN = "1ea6ce8a-9740-11ea-bb37-0242ac130002";
   public static final String TEST_TAN_HASH = "8de76b627f0be70ea73c367a9a560d6a987eacec71f57ca3d86b2e4ed5b6f780";
   public static final String TEST_GUI_HASH = "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b";
-  public static final String TEST_TAN_TYPE = "TAN";
-  private static final String TELETAN_PATTERN = "^[2-9A-HJ-KMNP-Za-kmnp-z]{7}$";
-  private static final Pattern pattern = Pattern.compile(TELETAN_PATTERN);
-  private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("uuuu-MM-dd'T'HH:mm:ss.SSSSSS");
-  private static final LocalDateTime TAN_VALID_UNTIL_IN_DAYS = LocalDateTime.now().plusDays(7);
+  public static final String TEST_TAN_TYPE = TanType.TAN.name();
+  public static final String TEST_TELE_TAN = "R3ZNUEV";
+  public static final String TEST_TELE_TAN_HASH = "a865dd70e90e02286ea06a25f0babe88020d27d2923241ad792fac81f1254c75";
+  private static final String TELE_TAN_REGEX = "^[2-9A-HJ-KMNP-Z]{7}$";
+  private static final String TAN_REGEX = "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$";
+  private static final TanSourceOfTrust TEST_TELE_TAN_SOURCE_OF_TRUST = TanSourceOfTrust.TELETAN;
+  private static final TanSourceOfTrust TEST_TAN_SOURCE_OF_TRUST = TanSourceOfTrust.CONNECTED_LAB;
+  private static final Pattern TELE_TAN_PATTERN = Pattern.compile(TELE_TAN_REGEX);
+  private static final Pattern TAN_PATTERN = Pattern.compile(TAN_REGEX);
+  private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("uuuu-MM-dd'T'HH:mm:ss.SSSSSS");
+  private static final LocalDateTime TAN_VALID_UNTIL_IN_DAYS = LocalDateTime.now().plusDays(14);
+  private static final LocalDateTime TELE_TAN_VALID_UNTIL_IN_HOURS = LocalDateTime.now().plusHours(1);
+
+  @Autowired
+  private TanService tanService;
 
   @Autowired
-  TanService tanService;
+  private VerificationTanRepository tanRepository;
+
+  @Before
+  public void setUp() {
+    tanRepository.deleteAll();
+  }
+
+  /**
+   * Test delete Tan.
+   */
+  @Test
+  public void deleteTan() {
+    VerificationTan tan = new VerificationTan();
+    LocalDateTime start = LocalDateTime.parse(LocalDateTime.now().format(FORMATTER));
+    tan.setCreatedAt(start);
+    tan.setUpdatedAt(start);
+    tan.setRedeemed(false);
+    tan.setTanHash(TEST_TAN_HASH);
+
+    tan.setValidFrom(start);
+    tan.setValidUntil(LocalDateTime.parse((TAN_VALID_UNTIL_IN_DAYS.format(FORMATTER))));
+    tan.setType(TEST_TAN_TYPE);
+    tan.setSourceOfTrust(TEST_TELE_TAN_SOURCE_OF_TRUST);
+    tanService.saveTan(tan);
+
+    Optional<VerificationTan> tanFromDB = tanService.getEntityByTan(TEST_TAN);
+    Assert.assertEquals(tan, tanFromDB.get());
+    tanService.deleteTan(tan);
+    tanFromDB = tanService.getEntityByTan(TEST_TAN);
+    assertFalse(tanFromDB.isPresent());
+  }
 
   /**
    * Test saveTan.
-   *
-   * @throws Exception if the test cannot be performed.
    */
   @Test
-  public void saveTanTest() throws Exception {
+  public void saveTanTest() {
     VerificationTan tan = new VerificationTan();
     tan.setCreatedAt(LocalDateTime.now());
     tan.setUpdatedAt(LocalDateTime.now());
@@ -70,8 +116,7 @@ public void saveTanTest() throws Exception {
     tan.setValidFrom(LocalDateTime.now());
     tan.setValidUntil(TAN_VALID_UNTIL_IN_DAYS);
     tan.setType(TEST_TAN_TYPE);
-    tan.setSourceOfTrust("");
-
+    tan.setSourceOfTrust(TEST_TELE_TAN_SOURCE_OF_TRUST);
     VerificationTan retunedTan = tanService.saveTan(tan);
     Assert.assertEquals(retunedTan, tan);
   }
@@ -79,33 +124,96 @@ public void saveTanTest() throws Exception {
   @Test
   public void getEntityByTanTest() {
     VerificationTan tan = new VerificationTan();
-    LocalDateTime start = LocalDateTime.parse(LocalDateTime.now().format(formatter));
+    LocalDateTime start = LocalDateTime.parse(LocalDateTime.now().format(FORMATTER));
     tan.setCreatedAt(start);
     tan.setUpdatedAt(start);
     tan.setRedeemed(false);
     tan.setTanHash(TEST_TAN_HASH);
-    
+
     tan.setValidFrom(start);
-    tan.setValidUntil(LocalDateTime.parse((TAN_VALID_UNTIL_IN_DAYS.format(formatter))));
+    tan.setValidUntil(LocalDateTime.parse((TAN_VALID_UNTIL_IN_DAYS.format(FORMATTER))));
     tan.setType(TEST_TAN_TYPE);
-    tan.setSourceOfTrust("");
+    tan.setSourceOfTrust(TEST_TELE_TAN_SOURCE_OF_TRUST);
     tanService.saveTan(tan);
 
     Optional<VerificationTan> tanFromDB = tanService.getEntityByTan(TEST_TAN);
-    assertTrue(tanFromDB.get().equals(tan));
+    Assert.assertEquals(tan, tanFromDB.get());
+  }
 
+  @Test
+  public void checkTanAlreadyExist() {
+    VerificationTan tan = new VerificationTan();
+    LocalDateTime start = LocalDateTime.parse(LocalDateTime.now().format(FORMATTER));
+    tan.setCreatedAt(start);
+    tan.setUpdatedAt(start);
+    tan.setRedeemed(false);
+    tan.setTanHash(TEST_TELE_TAN_HASH);
+    tan.setValidFrom(start);
+    tan.setValidUntil(LocalDateTime.parse((TELE_TAN_VALID_UNTIL_IN_HOURS.format(FORMATTER))));
+    tan.setType(TanType.TELETAN.name());
+    tan.setSourceOfTrust(TEST_TELE_TAN_SOURCE_OF_TRUST);
+    tanService.saveTan(tan);
+    assertFalse(tanService.checkTanNotExist(TEST_TELE_TAN));
+  }
+
+  @Test
+  public void generateVerificationTan() {
+    String tan = tanService.generateVerificationTan(TEST_TELE_TAN_SOURCE_OF_TRUST);
+    assertTrue(syntaxTanVerification(tan));
+    assertFalse(tan.isEmpty());
+  }
+
+  @Test
+  public void generateValidTan() {
+    String tan = tanService.generateVerificationTan(TEST_TAN_SOURCE_OF_TRUST);
+    assertTrue(syntaxTanVerification(tan));
+    assertFalse(tan.isEmpty());
   }
 
   @Test
   public void generateTeleTan() {
     String teleTan = tanService.generateTeleTan();
-    Matcher matcher = pattern.matcher(teleTan);
+    Matcher matcher = TELE_TAN_PATTERN.matcher(teleTan);
     assertTrue(matcher.find());
   }
 
+  @Test
+  public void verifyTeletan() {
+    String teleTan = tanService.generateVerificationTeleTan();
+    assertTrue(tanService.checkTanNotExist(TEST_TELE_TAN));
+    assertTrue(tanService.verifyTeleTan(teleTan));
+    assertFalse(tanService.verifyTeleTan("R3ZNUI0"));
+  }
+
+  @Test
+  public void verifyAlreadyRedeemedTeleTan() {
+    String teleTan = tanService.generateVerificationTeleTan();
+    VerificationTan teleTanFromDB = tanService.getEntityByTan(teleTan).get();
+    teleTanFromDB.setRedeemed(true);
+    tanService.saveTan(teleTanFromDB);
+    assertFalse(tanService.verifyTeleTan(teleTan));
+  }
+
+  @Test
+  public void verifyUnknownTeleTan() {
+    String teleTan = tanService.generateTeleTan();
+    assertFalse(tanService.verifyTeleTan(teleTan));
+  }
+
+  @Test
+  public void verifyExpiredTeleTan() {
+    String teleTan = tanService.generateVerificationTeleTan();
+    VerificationTan teleTanFromDB = tanService.getEntityByTan(teleTan).get();
+    LocalDateTime validFrom = LocalDateTime.now().minusHours(1).minusMinutes(1);
+    teleTanFromDB.setValidFrom(validFrom);
+    teleTanFromDB.setValidUntil(validFrom.plusHours(1));
+    tanService.saveTan(teleTanFromDB);
+    assertFalse(tanService.verifyTeleTan(teleTan));
+  }
+
   @Test
   public void testTeleTANFormat() {
-    assertThat(tanService.isTeleTanValid("29zAE4E")).isTrue();
+    assertThat(tanService.isTeleTanValid("29ZAE4E")).isTrue();
     assertThat(tanService.isTeleTanValid("29zAE4O")).isFalse();
     assertThat(tanService.isTeleTanValid("29zAE40")).isFalse();
     assertThat(tanService.isTeleTanValid("29zAE41")).isFalse();
@@ -117,4 +225,15 @@ public void testTeleTANFormat() {
     assertThat(tanService.isTeleTanValid("29zAE4")).isFalse();
     assertThat(tanService.isTeleTanValid("29zAL4-")).isFalse();
   }
+
+  /**
+   * Check Tele-TAN syntax constraints.
+   *
+   * @param teleTan the Tele TAN
+   * @return Tele TAN verification flag
+   */
+  private boolean syntaxTanVerification(String tan) {
+    Matcher matcher = TAN_PATTERN.matcher(tan);
+    return matcher.find();
+  }
 }
diff --git a/trusted.key.gpg b/trusted.key.gpg
new file mode 100644
index 00000000..1794db35
Binary files /dev/null and b/trusted.key.gpg differ
