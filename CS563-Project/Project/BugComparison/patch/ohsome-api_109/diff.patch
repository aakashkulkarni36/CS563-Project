diff --git a/.github/PULL_REQUEST_TEMPLATE.md b/.github/PULL_REQUEST_TEMPLATE.md
new file mode 100644
index 00000000..87befdfe
--- /dev/null
+++ b/.github/PULL_REQUEST_TEMPLATE.md
@@ -0,0 +1,21 @@
+Please add the **type of change** as label. If your PR is not ready for review and merge, please add `ðŸš§ ` to the PR title.
+
+### Description
+Please add a clear and concise description of what your PR solves.
+
+### Corresponding issue
+Closes #
+
+### New or changed dependencies
+-
+
+### Checklist
+- [ ] My code follows the [code-style](https://github.com/GIScience/ohsome-api/blob/master/CONTRIBUTING.md#code-style) rules, and I have checked on the [static analyses](https://jenkins.ohsome.org/job/ohsome-api/view/change-requests/)
+- [ ] I have commented my code
+- [ ] I have written javadoc (required for public methods)
+- [ ] I have added sufficient unit and API tests
+- [ ] I have made corresponding changes to the [documentation](https://github.com/GIScience/ohsome-api/tree/master/docs)
+- [ ] I have updated the [CHANGELOG.md](https://github.com/GIScience/ohsome-api/blob/master/CHANGELOG.md)
+- [ ] I have adjusted the examples in the [check-ohsome-api](https://gitlab.gistools.geog.uni-heidelberg.de/giscience/big-data/ohsome/helpers/check-ohsome-api) script or [created an issue](https://gitlab.gistools.geog.uni-heidelberg.de/giscience/big-data/ohsome/helpers/check-ohsome-api/-/issues/new) in the corresponding repository. More Information [here](https://github.com/GIScience/ohsome-api/blob/master/CONTRIBUTING.md#check-examples).
+
+Please check all finished tasks. If some tasks do not apply to your PR, please cross their text out (by using `~...~`) and remove their checkboxes.
diff --git a/.github/workflows/rocketchat-notifications-feedback-requests.yml b/.github/workflows/rocketchat-notifications-feedback-requests.yml
new file mode 100644
index 00000000..0057c649
--- /dev/null
+++ b/.github/workflows/rocketchat-notifications-feedback-requests.yml
@@ -0,0 +1,35 @@
+name: Rocket.Chat Pull Request push notifications
+
+on:
+  pull_request:
+    branches: [ master, main ]
+    types: [ labeled ]
+  issues:
+    types: [ labeled ]
+
+jobs:
+  rocketchat_pullrequest_notification:
+    name: Someone labeled their Pull Request
+    runs-on: ubuntu-latest
+    if: ${{ github.event.pull_request && contains('comments welcome|help wanted|waiting for review', github.event.label.name) }}
+    steps:
+      - name: Push notification for a Pull Request labeled as "comments welcome"
+        if: ${{ github.event.label.name == 'comments welcome' }}
+        run: curl "${{ secrets.ROCKETCHAT_SERVER }}/hooks/${{ secrets.ROCKETCHAT_HOOK_PR_NOTIFICATIONS }}" -d "text=${{ github.event.sender.login }} would like to get feedback on pull request ${{ github.event.pull_request.html_url }}" -d "username=${{ github.event.sender.login }}" -d "avatar=${{ github.event.sender.avatar_url }}"
+      - name: Push notification for a Pull Request labeled as "help wanted"
+        if: ${{ github.event.label.name == 'help wanted' }}
+        run: curl "${{ secrets.ROCKETCHAT_SERVER }}/hooks/${{ secrets.ROCKETCHAT_HOOK_PR_NOTIFICATIONS }}" -d "text=${{ github.event.sender.login }} needs help with pull request ${{ github.event.pull_request.html_url }}" -d "username=${{ github.event.sender.login }}" -d "avatar=${{ github.event.sender.avatar_url }}"
+      - name: Push notification for a Pull Request labeled as "waiting for review"
+        if: ${{ github.event.label.name == 'waiting for review' }}
+        run: curl "${{ secrets.ROCKETCHAT_SERVER }}/hooks/${{ secrets.ROCKETCHAT_HOOK_PR_NOTIFICATIONS }}" -d "text=${{ github.event.sender.login }} is waiting for a code review of pull request ${{ github.event.pull_request.html_url }}" -d "username=${{ github.event.sender.login }}" -d "avatar=${{ github.event.sender.avatar_url }}"
+  rocketchat_issue_notification:
+    name: Someone labeled their Issue
+    runs-on: ubuntu-latest
+    if: ${{ github.event.issue && contains('comments welcome|help wanted', github.event.label.name) }}
+    steps:
+      - name: Push notification for an Issue labeled as "comments welcome"
+        if: ${{ github.event.label.name == 'comments welcome' }}
+        run: curl "${{ secrets.ROCKETCHAT_SERVER }}/hooks/${{ secrets.ROCKETCHAT_HOOK_PR_NOTIFICATIONS }}" -d "text=${{ github.event.sender.login }} would like to get feedback on issue ${{ github.event.issue.html_url }}" -d "username=${{ github.event.sender.login }}" -d "avatar=${{ github.event.sender.avatar_url }}"
+      - name: Push notification for an Issue labeled as "help wanted"
+        if: ${{ github.event.label.name == 'help wanted' }}
+        run: curl "${{ secrets.ROCKETCHAT_SERVER }}/hooks/${{ secrets.ROCKETCHAT_HOOK_PR_NOTIFICATIONS }}" -d "text=${{ github.event.sender.login }} needs help with issue ${{ github.event.issue.html_url }}" -d "username=${{ github.event.sender.login }}" -d "avatar=${{ github.event.sender.avatar_url }}"
diff --git a/CHANGELOG.md b/CHANGELOG.md
index ac5211e2..4290d755 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -3,9 +3,44 @@ Changelog
 
 ## 1.4.0-SNAPSHOT (current master)
 
+### Bug Fixes
+
+* fix some invalid filters in the default swagger examples ([#111])
+* fix returning invalid GeoJSON using empty coordinates for deletion contributions ([#129], [#131])
+* fix using a proper boolean data type instead of a string for contributionType in response ([#135])
+* fix NPE with createOSMFeature ([#141])
+
+### Performance and Code Quality
+
+* improve performance of ratio requests ([#114])
+
+### Other Changes
+
+* update all tests using the filter parameter instead of deprecated types, keys, values ([#98])
+* update some default parameter values in swagger UI to slightly more sensible examples ([#113])
+* restructure packages and classes within the controller and output packages ([#117])
+* extend docs on contribution types ([#134])
+* round coordinates of returned OSM features to 7 decimal places ([#138])
+* improve code style by wrapping all code lines longer than 100 characters ([#83])
+
+[#83]: https://github.com/GIScience/ohsome-api/issues/83
+[#98]: https://github.com/GIScience/ohsome-api/issues/98
+[#111]: https://github.com/GIScience/ohsome-api/issues/111
+[#113]: https://github.com/GIScience/ohsome-api/issues/113
+[#114]: https://github.com/GIScience/ohsome-api/pull/114
+[#117]: https://github.com/GIScience/ohsome-api/issues/117
+[#129]: https://github.com/GIScience/ohsome-api/issues/129
+[#131]: https://github.com/GIScience/ohsome-api/issues/131
+[#134]: https://github.com/GIScience/ohsome-api/issues/134
+[#135]: https://github.com/GIScience/ohsome-api/pull/135
+[#138]: https://github.com/GIScience/ohsome-api/issues/138
+[#141]: https://github.com/GIScience/ohsome-api/issues/141
+
 
 ## 1.3.2
 
+### Bug Fixes
+
 * update OSHDB to 0.6.3 to fix a bug where certain invalid multipolygons cause an infinite loop ([OSHDB#343])
 
 [OSHDB#343]: https://github.com/GIScience/oshdb/pull/343
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 00000000..6a754add
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,8 @@
+# Code Style
+
+We're using the [Google Java Style Guide](https://google.github.io/styleguide/javaguide.html) for the source code. With the [exception](https://google.github.io/styleguide/javaguide.html#s5.3-camel-case) that the abbreviations `OSM`, `OSH` and `OSHDB` are allowed to be used in method and class names. For some popular IDEs and code linting tools you can find configuration files of the used code style in the OSHDB repository: [config/ide](https://github.com/GIScience/oshdb/tree/master/config/ide).
+
+
+# Check Examples
+
+To ensure that the ohsome API runs with a defined set of examples, we collect several examples, in addition to the integrated [unit and API tests](/src/test/java/org/heigit/ohsome/ohsomeapi). These examples are used to test the ohsome API before releases or productive deployments. If you fix a bug or implement a new feature, please think of a few exemplary requests to be added into the [check-ohsome-api repository](https://gitlab.gistools.geog.uni-heidelberg.de/giscience/big-data/ohsome/helpers/check-ohsome-api/-/issues/new). They can be added as [issue](https://gitlab.gistools.geog.uni-heidelberg.de/giscience/big-data/ohsome/helpers/check-ohsome-api/-/issues/new) or directly as [merge request](https://gitlab.gistools.geog.uni-heidelberg.de/giscience/big-data/ohsome/helpers/check-ohsome-api/-/merge_requests/new). More information, see [check-ohsome-api README](https://gitlab.gistools.geog.uni-heidelberg.de/giscience/big-data/ohsome/helpers/check-ohsome-api/-/blob/master/README.md#add-example).
diff --git a/Jenkinsfile b/Jenkinsfile
index 50afe8da..3147960c 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -1,13 +1,21 @@
 pipeline {
-  agent {label 'master'}
+  agent {label 'main'}
 
   environment {
+    REPO_NAME = sh(returnStdout: true, script: 'basename `git remote get-url origin` .git').trim()
+    VERSION = sh(returnStdout: true, script: 'mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | grep -Ev "(^\\[|Download\\w+)"').trim()
+    LATEST_AUTHOR = sh(returnStdout: true, script: 'git show -s --pretty=%an').trim()
+    LATEST_COMMIT_ID = sh(returnStdout: true, script: 'git describe --tags --long  --always').trim()
+
+    // START CUSTOM ohsome API
+    MAVEN_TEST_OPTIONS = '-Dport_get=8081 -Dport_post=8082 -Dport_data=8083 -DdbFilePathProperty="--database.db=/opt/data/heidelberg.oshdb"'
+    DOC_BRANCH_REGEX = /(^[0-9]+$)|(^(([0-9]+)(\.))+([0-9]+)?$)|(^master$)/
+    // END CUSTOM ohsome API
+    INFER_BRANCH_REGEX = /(^master$)/
+    SNAPSHOT_BRANCH_REGEX = /(^master$)/
     RELEASE_REGEX = /^([0-9]+(\.[0-9]+)*)(-(RC|beta-|alpha-)[0-9]+)?$/
     RELEASE_DEPLOY = false
     SNAPSHOT_DEPLOY = false
-
-    VERSION = sh(returnStdout: true, script: 'mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | grep -Ev "(^\\[|Download\\w+)"').trim()
-    MAVEN_TEST_OPTIONS = '-Dport_get=8081 -Dport_post=8082 -Dport_data=8083 -DdbFilePathProperty="--database.db=/opt/data/heidelberg.oshdb"'
   }
 
   stages {
@@ -16,26 +24,18 @@ pipeline {
         script {
           env.MAVEN_HOME = '/usr/share/maven'
 
-          author = sh(returnStdout: true, script: 'git show -s --pretty=%an')
-          echo author
-
-          commiti= sh(returnStdout: true, script: 'git log -1')
-          echo commiti
-
-          reponame=sh(returnStdout: true, script: 'basename `git remote get-url origin` .git').trim()
-          echo reponame
-
-          gittiid=sh(returnStdout: true, script: 'git describe --tags --long  --always').trim()
-          echo gittiid
+          echo REPO_NAME
+          echo LATEST_AUTHOR
+          echo LATEST_COMMIT_ID
 
           echo env.BRANCH_NAME
           echo env.BUILD_NUMBER
           echo env.TAG_NAME
 
-          if(!(VERSION ==~ RELEASE_REGEX || VERSION ==~ /.*-SNAPSHOT$/)) {
+          if (!(VERSION ==~ RELEASE_REGEX || VERSION ==~ /.*-SNAPSHOT$/)) {
             echo 'Version:'
             echo VERSION
-            error 'The version declaration is invalid. It is neither a release nor a snapshot. Mabe some error while fetching it using maven.'
+            error 'The version declaration is invalid. It is neither a release nor a snapshot. Maybe an error occured while fetching the parent pom using maven?'
           }
         }
         script {
@@ -53,7 +53,7 @@ pipeline {
       }
       post {
         failure {
-          rocketSend channel: 'jenkinsohsome', emoji: ':sob:' , message: "$reponame-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${author}. Review the code!" , rawMessage: true
+          rocketSend channel: 'jenkinsohsome', emoji: ':sob:' , message: "*${REPO_NAME}*-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${LATEST_AUTHOR}. Review the code!" , rawMessage: true
         }
       }
     }
@@ -61,7 +61,7 @@ pipeline {
     stage ('Deploy Snapshot') {
       when {
         expression {
-          return env.BRANCH_NAME ==~ /(^master$)/ && VERSION ==~ /.*-SNAPSHOT$/
+          return env.BRANCH_NAME ==~ SNAPSHOT_BRANCH_REGEX && VERSION ==~ /.*-SNAPSHOT$/
         }
       }
       steps {
@@ -73,7 +73,7 @@ pipeline {
       }
       post {
         failure {
-          rocketSend channel: 'jenkinsohsome', message: "Deployment of $reponame-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${author}. Is Artifactory running?" , rawMessage: true
+          rocketSend channel: 'jenkinsohsome', emoji: ':disappointed:', message: "Deployment of *${REPO_NAME}*-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${LATEST_AUTHOR}. Is Artifactory running?" , rawMessage: true
         }
       }
     }
@@ -100,7 +100,7 @@ pipeline {
       }
       post {
         failure {
-          rocketSend channel: 'jenkinsohsome', message: "Deployment of $reponame-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${author}. Is Artifactory running?" , rawMessage: true
+          rocketSend channel: 'jenkinsohsome', emoji: ':disappointed:', message: "Deployment of *${REPO_NAME}*-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${LATEST_AUTHOR}. Is Artifactory running?" , rawMessage: true
         }
       }
     }
@@ -117,18 +117,18 @@ pipeline {
           // load dependencies to artifactory
           rtMaven.run pom: 'pom.xml', goals: 'org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version -Dmaven.repo.local=.m2'
 
-          javadc_dir="/srv/javadoc/java/" + reponame + "/" + VERSION + "/"
+          javadc_dir = "/srv/javadoc/java/" + REPO_NAME + "/" + VERSION + "/"
           echo javadc_dir
 
           rtMaven.run pom: 'pom.xml', goals: 'clean javadoc:javadoc -Dadditionalparam=-Xdoclint:none -Dmaven.repo.local=.m2'
-          sh "echo $javadc_dir"
+          sh "echo ${javadc_dir}"
           // make sure jenkins uses bash not dash!
-          sh "mkdir -p $javadc_dir && rm -Rf $javadc_dir* && find . -path '*/target/site/apidocs' -exec cp -R --parents {} $javadc_dir \\; && find $javadc_dir -path '*/target/site/apidocs' | while read line; do echo \$line; neu=\${line/target\\/site\\/apidocs/} ;  mv \$line/* \$neu ; done && find $javadc_dir -type d -empty -delete"
+          sh "mkdir -p ${javadc_dir} && rm -Rf ${javadc_dir}* && find . -path '*/target/site/apidocs' -exec cp -R --parents {} ${javadc_dir} \\; && find ${javadc_dir} -path '*/target/site/apidocs' | while read line; do echo \$line; neu=\${line/target\\/site\\/apidocs/} ;  mv \$line/* \$neu ; done && find ${javadc_dir} -type d -empty -delete"
         }
       }
       post {
         failure {
-          rocketSend channel: 'jenkinsohsome', message: "Deployment of javadoc $reponame-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${author}." , rawMessage: true
+          rocketSend channel: 'jenkinsohsome', emoji: ':disappointed:', message: "Deployment of javadoc *${REPO_NAME}*-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${LATEST_AUTHOR}." , rawMessage: true
         }
       }
     }
@@ -137,7 +137,7 @@ pipeline {
     stage ('Publish API Docs') {
       when {
         expression {
-          return env.BRANCH_NAME ==~ /(^[0-9]+$)|(^(([0-9]+)(\.))+([0-9]+)?$)|(^master$)/
+          return env.BRANCH_NAME ==~ DOC_BRANCH_REGEX
         }
       }
       steps {
@@ -150,28 +150,28 @@ pipeline {
             API_DOCS_PATH = sh(returnStdout: true, script: 'cd docs && python3 get_pom_metadata.py | awk \'/^Path:/{ print $2 }\'').trim()
           }
 
-          publish_dir = "/srv/javadoc/" + reponame + "/" + API_DOCS_PATH + "/"
+          publish_dir = "/srv/javadoc/${REPO_NAME}/${API_DOCS_PATH}/"
           venv_dir = sh(returnStdout: true, script: 'mktemp -d --suffix .sphinx-docs').trim() + "/venv"
 
-          if (!fileExists("$venv_dir")) {
-            sh "python3 -m venv $venv_dir"
+          if (!fileExists("${venv_dir}")) {
+            sh "python3 -m venv ${venv_dir}"
           }
 
           sh """
-            source $venv_dir/bin/activate
+            source ${venv_dir}/bin/activate
             cd docs
             python3 -m pip install -U pip
             python3 -m pip install -r requirements.txt
             DOCS_DEPLOYMENT=${DOCS_DEPLOYMENT} make clean html
           """
-          sh "mkdir -p $publish_dir && rm -rf $publish_dir* && cp -r docs/_build/html/* $publish_dir"
-          sh "rm -rf $venv_dir"
+          sh "mkdir -p ${publish_dir} && rm -rf ${publish_dir}* && cp -r docs/_build/html/* ${publish_dir}"
+          sh "rm -rf ${venv_dir}"
         }
       }
       post {
         failure {
-          sh "rm -rf $venv_dir"
-          rocketSend channel: 'jenkinsohsome', message: "Deployment of api docs $reponame-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${author}." , rawMessage: true
+          sh "rm -rf ${venv_dir}"
+          rocketSend channel: 'jenkinsohsome', emoji: ':unamused:', message: "Deployment of api docs ${REPO_NAME}-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${LATEST_AUTHOR}." , rawMessage: true
         }
       }
     }
@@ -180,24 +180,28 @@ pipeline {
     stage ('Reports and Statistics') {
       steps {
         script {
+          report_basedir = "/srv/reports/${REPO_NAME}/${VERSION}_${env.BRANCH_NAME}/${env.BUILD_NUMBER}_${LATEST_COMMIT_ID}"
+
           // jacoco
-          report_dir="/srv/reports/" + reponame + "/" + VERSION + "_"  + env.BRANCH_NAME + "/" +  env.BUILD_NUMBER + "_" +gittiid+"/jacoco/"
+          report_dir = report_basedir + "/jacoco/"
 
           rtMaven.run pom: 'pom.xml', goals: 'clean verify -Pjacoco -Dmaven.repo.local=.m2 $MAVEN_TEST_OPTIONS'
           jacoco(
               execPattern      : '**/target/jacoco.exec',
               classPattern     : '**/target/classes',
-              sourcePattern    : '**/**/target/generated-sources/delombok',
+              // START CUSTOM ohsome API
+              sourcePattern    : '**/target/generated-sources/delombok',
+              // END CUSTOM ohsome API
               inclusionPattern : '/org/heigit/**'
           )
-          sh "mkdir -p $report_dir && rm -Rf $report_dir* && find . -path '*/target/site/jacoco' -exec cp -R --parents {} $report_dir \\; && find $report_dir -path '*/target/site/jacoco' | while read line; do echo \$line; neu=\${line/target\\/site\\/jacoco/} ;  mv \$line/* \$neu ; done && find $report_dir -type d -empty -delete"
+          sh "mkdir -p ${report_dir} && rm -Rf ${report_dir}* && find . -path '*/target/site/jacoco' -exec cp -R --parents {} ${report_dir} \\; && find ${report_dir} -path '*/target/site/jacoco' | while read line; do echo \$line; neu=\${line/target\\/site\\/jacoco/} ;  mv \$line/* \$neu ; done && find ${report_dir} -type d -empty -delete"
 
           // infer
-          if(env.BRANCH_NAME ==~ /(^master$)/) {
-            report_dir="/srv/reports/" + reponame + "/" + VERSION + "_"  + env.BRANCH_NAME + "/" +  env.BUILD_NUMBER + "_" +gittiid+"/infer/"
+          if (env.BRANCH_NAME ==~ INFER_BRANCH_REGEX) {
+            report_dir = report_basedir + "/infer/"
             sh "mvn clean"
             sh "infer run --pmd-xml -r -- mvn compile"
-            sh "mkdir -p $report_dir && rm -Rf $report_dir* && cp -R ./infer-out/* $report_dir"
+            sh "mkdir -p ${report_dir} && rm -Rf ${report_dir}* && cp -R ./infer-out/* ${report_dir}"
           }
 
           // warnings plugin
@@ -213,7 +217,7 @@ pipeline {
       }
       post {
         failure {
-          rocketSend channel: 'jenkinsohsome', message: "Reporting of $reponame-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${author}." , rawMessage: true
+          rocketSend channel: 'jenkinsohsome', emoji: ':disappointed:', message: "Reporting of *${REPO_NAME}*-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${LATEST_AUTHOR}." , rawMessage: true
         }
       }
     }
@@ -221,50 +225,49 @@ pipeline {
     stage ('Check Dependencies') {
       when {
         expression {
-          if(currentBuild.number > 1) {
-            monthpre=new Date(currentBuild.previousBuild.rawBuild.getStartTimeInMillis())[Calendar.MONTH]
-            echo monthpre.toString()
-            monthnow=new Date(currentBuild.rawBuild.getStartTimeInMillis())[Calendar.MONTH]
-            echo monthnow.toString()
-            return monthpre!=monthnow
+          if (currentBuild.number > 1) {
+            month_pre = new Date(currentBuild.previousBuild.rawBuild.getStartTimeInMillis())[Calendar.MONTH]
+            echo month_pre.toString()
+            month_now = new Date(currentBuild.rawBuild.getStartTimeInMillis())[Calendar.MONTH]
+            echo month_now.toString()
+            return month_pre != month_now
           }
           return false
         }
       }
       steps {
         script {
-          updatenotify=sh(returnStdout: true, script: 'mvn versions:display-dependency-updates | grep -Pzo "(?s)The following dependencies.*\\n.* \\n"').trim()
-          echo updatenotify
+          update_notify = sh(returnStdout: true, script: 'mvn versions:display-dependency-updates | grep -Pzo "(?s)The following dependencies.*\\n.* \\n"').trim()
+          echo update_notify
         }
-        rocketSend channel: 'jenkinsohsome', emoji: ':wave:' , message: "You might have updates in your dependecies: ${updatenotify}" , rawMessage: true
+        rocketSend channel: 'jenkinsohsome', emoji: ':wave:' , message: "Check your dependencies in *${REPO_NAME}*. You might have updates: ${update_notify}" , rawMessage: true
       }
       post {
         failure {
-          rocketSend channel: 'jenkinsohsome', emoji: ':disappointed:' , message: "Checking for updates in $reponame-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${author}." , rawMessage: true
+          rocketSend channel: 'jenkinsohsome', emoji: ':disappointed:' , message: "Checking for updates in *${REPO_NAME}*-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${LATEST_AUTHOR}." , rawMessage: true
         }
       }
     }
 
-
     stage ('Encourage') {
       when {
         expression {
-          if(currentBuild.number > 1) {
-            datepre=new Date(currentBuild.previousBuild.rawBuild.getStartTimeInMillis()).clearTime()
-            echo datepre.format( 'yyyyMMdd' )
-            datenow=new Date(currentBuild.rawBuild.getStartTimeInMillis()).clearTime()
-            echo datenow.format( 'yyyyMMdd' )
-            return datepre.numberAwareCompareTo(datenow)<0
+          if (currentBuild.number > 1) {
+            date_pre = new Date(currentBuild.previousBuild.rawBuild.getStartTimeInMillis()).clearTime()
+            echo date_pre.format( 'yyyyMMdd' )
+            date_now = new Date(currentBuild.rawBuild.getStartTimeInMillis()).clearTime()
+            echo date_now.format( 'yyyyMMdd' )
+            return date_pre.numberAwareCompareTo(date_now)<0
           }
           return false
         }
       }
       steps {
-        rocketSend channel: 'jenkinsohsome', message: "Hey, this is just your daily notice that Jenkins is still working for you on $reponame Branch ${env.BRANCH_NAME}! Happy and for free! Keep it up!" , rawMessage: true
+        rocketSend channel: 'jenkinsohsome', emoji: ':wink:', message: "Hey, this is just your daily notice that Jenkins is still working for you on *${REPO_NAME}* Branch ${env.BRANCH_NAME}! Happy and for free! Keep it up!" , rawMessage: true
       }
       post {
         failure {
-          rocketSend channel: 'jenkinsohsome', emoji: ':wink:' , message: "Reporting of $reponame-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${author}." , rawMessage: true
+          rocketSend channel: 'jenkinsohsome', emoji: ':disappointed:', message: "Reporting of *${REPO_NAME}*-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${LATEST_AUTHOR}." , rawMessage: true
         }
       }
     }
@@ -276,14 +279,13 @@ pipeline {
         }
       }
       steps {
-        rocketSend channel: 'jenkinsohsome', message: "We had some problems, but we are BACK TO NORMAL! Nice debugging: $reponame-build-nr. ${env.BUILD_NUMBER} *succeeded* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${author}." , rawMessage: true
+        rocketSend channel: 'jenkinsohsome', emoji: ':sunglasses:', message: "We had some problems, but we are BACK TO NORMAL! Nice debugging: *${REPO_NAME}*-build-nr. ${env.BUILD_NUMBER} *succeeded* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${LATEST_AUTHOR}." , rawMessage: true
       }
       post {
         failure {
-          rocketSend channel: 'jenkinsohsome', message: "Reporting of $reponame-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${author}." , rawMessage: true
+          rocketSend channel: 'jenkinsohsome', emoji: ':disappointed:', message: "Reporting of *${REPO_NAME}*-build nr. ${env.BUILD_NUMBER} *failed* on Branch - ${env.BRANCH_NAME}  (<${env.BUILD_URL}|Open Build in Jenkins>). Latest commit from  ${LATEST_AUTHOR}." , rawMessage: true
         }
       }
     }
   }
 }
-
diff --git a/README.md b/README.md
index 7503debd..acc9e7b9 100644
--- a/README.md
+++ b/README.md
@@ -29,9 +29,18 @@ These instructions will get you a copy of the project up and running on your loc
 
 * [Java 11](https://openjdk.java.net/projects/jdk/11/) or higher
 * [Apache Maven 3.5](https://maven.apache.org/download.cgi) or higher
-* [Lombok 1.18.16](https://projectlombok.org/download) or higher. Please check the [requirements](https://projectlombok.org/setup/overview) for your IDE 
 * data: [download](http://downloads.ohsome.org/) it directly, or work through a guide on [how to prepare a new OSHDB extract](https://github.com/GIScience/oshdb/blob/master/oshdb-tool/etl/README.md)
 
+### IDE Settings
+
+* [Code style](/CONTRIBUTING.md#code-style): For some popular IDEs and code linting tools you can find configuration files of the used code style in the OSHDB repository: [config/ide](https://github.com/GIScience/oshdb/tree/master/config/ide).
+* [Lombok](https://projectlombok.org/): Please check the [setup instructions](https://projectlombok.org/setup/overview) for your IDE.
+* In some cases you have to mark some directories manually by their type:
+   * `src/main/lombok` as a _source_ directory,
+   * `src/test/java` as a _test-source_ directory,
+   * `src/main/resources` as a _resources_ directory, and
+   * `target`, `target/generated-sources/delombok`, `docs/_build`, and `ignite` as _unmarked_/_excluded_ directories.
+
 ### Setting-up/Running
 
 1. checkout/download the repository
diff --git a/docs/endpoints.rst b/docs/endpoints.rst
index 2ac9d5eb..ee088b08 100644
--- a/docs/endpoints.rst
+++ b/docs/endpoints.rst
@@ -1350,14 +1350,14 @@ Get the changes of pharmacies with opening hours in a certain area of Heidelberg
             "type" : "Point",
             "coordinates" : [
               8.6902451,
-              49.408015899999995
+              49.4080159
             ]
           },
           "properties" : {
             "@changesetId" : 83099383,
             "@osmId" : "node/323191854",
             "@osmType" : "NODE",
-            "@tagChange" : "true",
+            "@tagChange" : true,
             "@timestamp" : "2020-04-05T13:32:50Z",
             "@version" : 8,
             "addr:city" : "Heidelberg",
@@ -1390,7 +1390,7 @@ Get the changes of pharmacies with opening hours in a certain area of Heidelberg
             "@changesetId" : 83099383,
             "@osmId" : "node/5400804545",
             "@osmType" : "NODE",
-            "@tagChange" : "true",
+            "@tagChange" : true,
             "@timestamp" : "2020-04-05T13:32:50Z",
             "@version" : 2,
             "amenity" : "pharmacy",
@@ -1426,14 +1426,14 @@ Get the changes of pharmacies with opening hours in a certain area of Heidelberg
             "type" : "Point",
             "coordinates" : [
               8.6902451,
-              49.408015899999995
+              49.4080159
             ]
           },
           "properties" : {
             "@changesetId" : 83099383,
             "@osmId" : "node/323191854",
             "@osmType" : "NODE",
-            "@tagChange" : "true",
+            "@tagChange" : true,
             "@timestamp" : "2020-04-05T13:32:50Z",
             "@version" : 8,
             "addr:city" : "Heidelberg",
@@ -1466,7 +1466,7 @@ Get the changes of pharmacies with opening hours in a certain area of Heidelberg
             "@changesetId" : 83099383,
             "@osmId" : "node/5400804545",
             "@osmType" : "NODE",
-            "@tagChange" : "true",
+            "@tagChange" : true,
             "@timestamp" : "2020-04-05T13:32:50Z",
             "@version" : 2,
             "amenity" : "pharmacy",
@@ -1502,14 +1502,14 @@ Get the changes of pharmacies with opening hours in a certain area of Heidelberg
             "type" : "Point",
             "coordinates" : [
               8.6902451,
-              49.408015899999995
+              49.4080159
             ]
           },
           "properties" : {
             "@changesetId" : 83099383,
             "@osmId" : "node/323191854",
             "@osmType" : "NODE",
-            "@tagChange" : "true",
+            "@tagChange" : true,
             "@timestamp" : "2020-04-05T13:32:50Z",
             "@version" : 8,
             "addr:city" : "Heidelberg",
@@ -1542,7 +1542,7 @@ Get the changes of pharmacies with opening hours in a certain area of Heidelberg
             "@changesetId" : 83099383,
             "@osmId" : "node/5400804545",
             "@osmType" : "NODE",
-            "@tagChange" : "true",
+            "@tagChange" : true,
             "@timestamp" : "2020-04-05T13:32:50Z",
             "@version" : 2,
             "amenity" : "pharmacy",
@@ -1578,14 +1578,14 @@ Get the changes of pharmacies with opening hours in a certain area of Heidelberg
             "type" : "Point",
             "coordinates" : [
               8.6902451,
-              49.408015899999995
+              49.4080159
             ]
           },
           "properties" : {
             "@changesetId" : 83099383,
             "@osmId" : "node/323191854",
             "@osmType" : "NODE",
-            "@tagChange" : "true",
+            "@tagChange" : true,
             "@timestamp" : "2020-04-05T13:32:50Z",
             "@version" : 8,
             "addr:city" : "Heidelberg",
@@ -1618,7 +1618,7 @@ Get the changes of pharmacies with opening hours in a certain area of Heidelberg
             "@changesetId" : 83099383,
             "@osmId" : "node/5400804545",
             "@osmType" : "NODE",
-            "@tagChange" : "true",
+            "@tagChange" : true,
             "@timestamp" : "2020-04-05T13:32:50Z",
             "@version" : 2,
             "amenity" : "pharmacy",
@@ -1699,7 +1699,7 @@ Get the latest change of constructions in a certain area of the Bahnstadt in Hei
           },
           "properties" : {
             "@changesetId" : 85604249,
-            "@geometryChange" : "true",
+            "@geometryChange" : true,
             "@osmId" : "way/795435536",
             "@osmType" : "WAY",
             "@timestamp" : "2020-05-22T10:22:53Z",
@@ -1708,13 +1708,10 @@ Get the latest change of constructions in a certain area of the Bahnstadt in Hei
           }
         }, {
           "type" : "Feature",
-          "geometry" : {
-            "type" : "Polygon",
-            "coordinates" : [ ]
-          },
+          "geometry" : null,
           "properties" : {
             "@changesetId" : 51902131,
-            "@deletion" : "true",
+            "@deletion" : true,
             "@osmId" : "way/135635599",
             "@osmType" : "WAY",
             "@timestamp" : "2017-09-10T09:22:03Z",
@@ -1750,7 +1747,7 @@ Get the latest change of constructions in a certain area of the Bahnstadt in Hei
           },
           "properties" : {
             "@changesetId" : 85604249,
-            "@geometryChange" : "true",
+            "@geometryChange" : true,
             "@osmId" : "way/795435536",
             "@osmType" : "WAY",
             "@timestamp" : "2020-05-22T10:22:53Z",
@@ -1759,13 +1756,10 @@ Get the latest change of constructions in a certain area of the Bahnstadt in Hei
           }
         }, {
           "type" : "Feature",
-          "geometry" : {
-            "type" : "Polygon",
-            "coordinates" : [ ]
-          },
+          "geometry" : null,
           "properties" : {
             "@changesetId" : 51902131,
-            "@deletion" : "true",
+            "@deletion" : true,
             "@osmId" : "way/135635599",
             "@osmType" : "WAY",
             "@timestamp" : "2017-09-10T09:22:03Z",
@@ -1801,7 +1795,7 @@ Get the latest change of constructions in a certain area of the Bahnstadt in Hei
           },
           "properties" : {
             "@changesetId" : 85604249,
-            "@geometryChange" : "true",
+            "@geometryChange" : true,
             "@osmId" : "way/795435536",
             "@osmType" : "WAY",
             "@timestamp" : "2020-05-22T10:22:53Z",
@@ -1810,13 +1804,10 @@ Get the latest change of constructions in a certain area of the Bahnstadt in Hei
           }
         }, {
           "type" : "Feature",
-          "geometry" : {
-            "type" : "Polygon",
-            "coordinates" : [ ]
-          },
+          "geometry" : null,
           "properties" : {
             "@changesetId" : 51902131,
-            "@deletion" : "true",
+            "@deletion" : true,
             "@osmId" : "way/135635599",
             "@osmType" : "WAY",
             "@timestamp" : "2017-09-10T09:22:03Z",
@@ -1852,7 +1843,7 @@ Get the latest change of constructions in a certain area of the Bahnstadt in Hei
           },
           "properties" : {
             "@changesetId" : 85604249,
-            "@geometryChange" : "true",
+            "@geometryChange" : true,
             "@osmId" : "way/795435536",
             "@osmType" : "WAY",
             "@timestamp" : "2020-05-22T10:22:53Z",
@@ -1861,13 +1852,10 @@ Get the latest change of constructions in a certain area of the Bahnstadt in Hei
           }
         }, {
           "type" : "Feature",
-          "geometry" : {
-            "type" : "Polygon",
-            "coordinates" : [ ]
-          },
+          "geometry" : null,
           "properties" : {
             "@changesetId" : 51902131,
-            "@deletion" : "true",
+            "@deletion" : true,
             "@osmId" : "way/135635599",
             "@osmType" : "WAY",
             "@timestamp" : "2017-09-10T09:22:03Z",
diff --git a/docs/filter.rst b/docs/filter.rst
index ed275eb9..25c6de2e 100644
--- a/docs/filter.rst
+++ b/docs/filter.rst
@@ -104,7 +104,7 @@ Special Characters & Whitespace
 
 | When writing filters, tags without special characters can be supplied directly, without needing 
   to quote them. Example: ``amenity=drinking_water`` or ``name:it=*``. 
-| Allowed characters are: the letters ``a-z`` and ``A-Z``, digits, underscore,dashes and colons.
+| Allowed characters are: the letters ``a-z`` and ``A-Z``, digits, underscore, dashes and colons.
   When filtering by tags with any other characters in their key or value, these strings need to be supplied as
   double-quoted strings, e.g. ``name="Heidelberger BrÃ¼ckenaffe"`` or ``opening_hours="24/7"``. Escape sequences can be used to
   represent a literal double-quote character ``\"``, while a literal backslash is written as ``\\``.
diff --git a/docs/response-parameters.rst b/docs/response-parameters.rst
index eb15a051..bb93f1b5 100644
--- a/docs/response-parameters.rst
+++ b/docs/response-parameters.rst
@@ -51,10 +51,12 @@ Descriptions of the custom response parameters that are marked with a leading ``
 * ``@changesetId`` - id of the OSM changeset where the contribution was performed
 * ``@osmType`` - type of the OSM element (NODE, WAY or RELATION)
 * ``@timestamp`` - indicates when this contribution occurred
-* ``@creation``	- contribution type; indicates if this feature is newly created (true); cannot occur in combination with other contribution types
-* ``@geometryChange`` - contribution type; indicates if the geometry of this feature has changed (true); can occur in combination with @tagChange
-* ``@tagChange``- contribution type; indicates if the tag of this feature has changed (true); can occur in combination with @geometryChange
-* ``@deletion`` - contribution type; indicates if the feature is deleted (true); cannot occur in combination with other contribution types
+* ``@creation`` - contribution type; indicates if the OSM element newly fits the query's requirements: either because it is freshly created, moved into the query's area of interest, or is now matching the defined filter parameter (true); cannot occur in combination with other contribution types
+* ``@geometryChange`` - contribution type; indicates if the geometry of the OSM element has changed (true); can occur in combination with @tagChange
+* ``@tagChange``- contribution type; indicates if the tags of this OSM element have changed (true); can occur in combination with @geometryChange
+* ``@deletion`` - contribution type; indicates if the OSM element does not match the query requirements anymore: either because it got deleted, moved outside of the query area of interest, or is not matching the defined filter anymore (true); cannot occur in combination with other contribution types
+
+.. note:: No `contribution type` can occur with having ``false`` as a value. If any of them is present, the value is always ``true``.
 
 Metadata
 --------
diff --git a/pom.xml b/pom.xml
index 78918d78..17059ee0 100644
--- a/pom.xml
+++ b/pom.xml
@@ -210,6 +210,16 @@
           </execution>
         </executions>
       </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-checkstyle-plugin</artifactId>
+        <configuration>
+          <sourceDirectories>
+            <sourceDirectory>src/main/java</sourceDirectory>
+            <sourceDirectory>src/main/lombok</sourceDirectory>
+          </sourceDirectories>
+        </configuration>
+      </plugin>
     </plugins>
     <resources>
       <resource>
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/Application.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/Application.java
index 350af2e2..29e95ca8 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/Application.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/Application.java
@@ -72,16 +72,15 @@ public static void main(String[] args) {
    * @throws RuntimeException if a class with a specific name could not be found, or if the database
    *         parameter is not defined
    * @throws DatabaseAccessException if the access to keytables or database is not possible
-   * @throws SQLException thrown by
-   *         {@link org.heigit.bigspatialdata.oshdb.api.db.OSHDBH2#OSHDBH2(String) OSHDBH2}
-   * @throws ClassNotFoundException thrown by
-   *         {@link org.heigit.bigspatialdata.oshdb.api.db.OSHDBH2#OSHDBH2(String) OSHDBH2}
-   * @throws OSHDBKeytablesNotFoundException thrown by
-   *         {@link org.heigit.bigspatialdata.oshdb.util.tagtranslator.TagTranslator#TagTranslator(java.sql.Connection)
-   *         TagTranslator}
-   * @throws IOException thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.utils.RequestUtils#extractOSHDBMetadata()
-   *         extractOSHDBMetadata}
+   * @throws SQLException thrown by {@link org.heigit.bigspatialdata.oshdb.api.db.OSHDBH2
+   *         #OSHDBH2(String) OSHDBH2}
+   * @throws ClassNotFoundException thrown by {@link org.heigit.bigspatialdata.oshdb.api.db.OSHDBH2
+   *         #OSHDBH2(String) OSHDBH2}
+   * @throws OSHDBKeytablesNotFoundException thrown by {@link
+   *         org.heigit.bigspatialdata.oshdb.util.tagtranslator.TagTranslator
+   *         #TagTranslator(java.sql.Connection) TagTranslator}
+   * @throws IOException thrown by {@link org.heigit.ohsome.ohsomeapi.utils.RequestUtils
+   *         #extractOSHDBMetadata() extractOSHDBMetadata}
    */
   public static void preRun(ApplicationArguments args)
       throws ClassNotFoundException, SQLException, OSHDBKeytablesNotFoundException, IOException {
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/config/SwaggerConfig.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/config/SwaggerConfig.java
index c7cde038..432049fc 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/config/SwaggerConfig.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/config/SwaggerConfig.java
@@ -42,7 +42,6 @@ public class SwaggerConfig implements SwaggerResourcesProvider {
   private enum OhsomeApiResourceSpec {
     DATA_AGGREGATION("Data Aggregation", 1),
     DATA_EXTRACTION("Data Extraction", 2),
-    CONTRIBUTIONS("Contributions", 3),
     METADATA("Metadata", 9);
 
     private final String name;
@@ -74,7 +73,7 @@ public List<SwaggerResource> get() {
         .collect(Collectors.toList());
   }
 
-  /** Creates the Swagger2 documentation for the dataAggregation resources. */
+  /** Creates the Swagger2 documentation for the data aggregation resources. */
   @Bean
   public Docket dataAggregationDocket() {
     ArrayList<ResponseMessage> responseMessages = defineResponseMessages();
@@ -83,7 +82,7 @@ public Docket dataAggregationDocket() {
         .apis(RequestHandlerSelectors
             .basePackage("org.heigit.ohsome.ohsomeapi.controller.dataaggregation"))
         .paths(PathSelectors.any()).build().apiInfo(apiInfo()).useDefaultResponseMessages(false)
-        .globalOperationParameters(defineGlobalOperationParams(false, false))
+        .globalOperationParameters(defineGlobalOperationParams(false))
         .tags(new Tag("Users", "Compute data aggregation functions on users"),
             new Tag("Area", "Compute the area of polygonal OSM elements"),
             new Tag("Length", "Compute the length of linear OSM elements"),
@@ -108,31 +107,19 @@ public Docket metadataDocket() {
 
   /** Creates the Swagger2 documentation for the data extraction resources. */
   @Bean
-  public Docket rawDataDocket() {
+  public Docket dataExtractionDocket() {
     ArrayList<ResponseMessage> responseMessages = defineResponseMessages();
     return new Docket(DocumentationType.SWAGGER_2)
         .groupName(OhsomeApiResourceSpec.DATA_EXTRACTION.name).select()
-        .apis(RequestHandlerSelectors.basePackage("org.heigit.ohsome.ohsomeapi.controller.rawdata"))
-        .paths(PathSelectors.any()).build().apiInfo(apiInfo()).useDefaultResponseMessages(false)
-        .globalOperationParameters(defineGlobalOperationParams(true, false))
-        .tags(new Tag("Data Extraction", "Direct access to the OSM data"),
-            new Tag("Full-History Data Extraction",
-                "Direct access to the full-history of the OSM data"))
-        .forCodeGeneration(true).globalResponseMessage(RequestMethod.GET, responseMessages);
-  }
-
-  /** Creates the Swagger2 documentation for the contributions resources. */
-  @Bean
-  public Docket contributionsDocket() {
-    ArrayList<ResponseMessage> responseMessages = defineResponseMessages();
-    return new Docket(DocumentationType.SWAGGER_2)
-        .groupName(OhsomeApiResourceSpec.CONTRIBUTIONS.name).select()
         .apis(RequestHandlerSelectors
-            .basePackage("org.heigit.ohsome.ohsomeapi.controller.contributions"))
+            .basePackage("org.heigit.ohsome.ohsomeapi.controller.dataextraction"))
         .paths(PathSelectors.any()).build().apiInfo(apiInfo()).useDefaultResponseMessages(false)
-        .globalOperationParameters(defineGlobalOperationParams(true, true))
-        .tags(
-            new Tag("Contributions", "Direct access to all contributions provided to the OSM data"))
+        .globalOperationParameters(defineGlobalOperationParams(true))
+        .tags(new Tag("Elements Extraction", "Direct access to the OSM data"),
+            new Tag("Full-History Elements Extraction",
+                "Direct access to the full-history of the OSM data"),
+            new Tag("Contributions Extraction",
+                "Direct access to all contributions provided to the OSM data"))
         .forCodeGeneration(true).globalResponseMessage(RequestMethod.GET, responseMessages);
   }
 
@@ -173,8 +160,7 @@ private ApiInfo apiInfo() {
    * Defines the description of each parameter, which are used in all resources for the Swagger2
    * documentation.
    */
-  private List<Parameter> defineGlobalOperationParams(boolean isDataExtraction,
-      boolean isContributions) {
+  private List<Parameter> defineGlobalOperationParams(boolean isDataExtraction) {
     final String string = "string";
     final String query = "query";
     List<Parameter> globalOperationParams = new ArrayList<>();
@@ -187,21 +173,19 @@ private List<Parameter> defineGlobalOperationParams(boolean isDataExtraction,
     globalOperationParams.add(new ParameterBuilder().name("bpolys")
         .description(ParameterDescriptions.BPOLYS).modelRef(new ModelRef(string))
         .parameterType(query).defaultValue("").required(false).build());
-    if (!isContributions) {
-      globalOperationParams.add(new ParameterBuilder().name("types")
-          .description(ParameterDescriptions.DEPRECATED_USE_FILTER).modelRef(new ModelRef(string))
-          .allowMultiple(true).parameterType(query).defaultValue("").required(false).build());
-      globalOperationParams.add(new ParameterBuilder().name("keys")
-          .description(ParameterDescriptions.DEPRECATED_USE_FILTER).modelRef(new ModelRef(string))
-          .parameterType(query).defaultValue("").required(false).build());
-      globalOperationParams.add(new ParameterBuilder().name("values")
-          .description(ParameterDescriptions.DEPRECATED_USE_FILTER).modelRef(new ModelRef(string))
-          .parameterType(query).defaultValue("").required(false).build());
-    }
+    globalOperationParams.add(new ParameterBuilder().name("types")
+        .description(ParameterDescriptions.DEPRECATED_USE_FILTER).modelRef(new ModelRef(string))
+        .allowMultiple(true).parameterType(query).defaultValue("").required(false).build());
+    globalOperationParams.add(new ParameterBuilder().name("keys")
+        .description(ParameterDescriptions.DEPRECATED_USE_FILTER).modelRef(new ModelRef(string))
+        .parameterType(query).defaultValue("").required(false).build());
+    globalOperationParams.add(new ParameterBuilder().name("values")
+        .description(ParameterDescriptions.DEPRECATED_USE_FILTER).modelRef(new ModelRef(string))
+        .parameterType(query).defaultValue("").required(false).build());
     globalOperationParams
         .add(new ParameterBuilder().name("filter").description(ParameterDescriptions.FILTER)
             .modelRef(new ModelRef(string)).parameterType(query)
-            .defaultValue(DefaultSwaggerParameters.TYPE_FILTER).required(false).build());
+            .defaultValue(DefaultSwaggerParameters.GENERIC_FILTER).required(false).build());
     globalOperationParams.add(new ParameterBuilder().name("timeout")
         .description(ParameterDescriptions.TIMEOUT).modelRef(new ModelRef(string))
         .parameterType(query).defaultValue("").required(false).build());
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/DefaultSwaggerParameters.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/DefaultSwaggerParameters.java
index 064a2d82..ae04aaf3 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/DefaultSwaggerParameters.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/DefaultSwaggerParameters.java
@@ -3,15 +3,15 @@
 /** Holds the default values for the parameters to run test-requests in Swagger. */
 public class DefaultSwaggerParameters {
 
-  public static final String BBOX = "8.625,49.3711,8.7334,49.4397";
+  public static final String BBOX = "8.67,49.39,8.71,49.42";
   public static final String HIGHWAY_KEY = "highway";
   public static final String BUILDING_KEY = "building";
-  public static final String HOUSENUMBER_KEY = "addr:housenumber";
-  public static final String RESIDENTIAL_VALUE = "residential";
-  public static final String TYPE_FILTER = "type:way";
-  public static final String HIGHWAY_FILTER = "highway=residential";
-  public static final String BUILDING_FILTER = "building=*";
-  public static final String HOUSENUMBER_FILTER = "type:node and \"addr:housenumber=*\"";
+  public static final String GENERIC_FILTER = "type:way and natural=*";
+  public static final String HIGHWAY_FILTER = "type:way and highway=residential";
+  public static final String HIGHWAY_FILTER2 = "type:way and highway=*";
+  public static final String BUILDING_FILTER = "geometry:polygon and building=*";
+  public static final String BUILDING_FILTER2 = "geometry:polygon and building=house";
+  public static final String HOUSENUMBER_FILTER = "type:node and \"addr:housenumber\"=*";
   public static final String TIME = "2014-01-01/2017-01-01/P1Y";
   
   private DefaultSwaggerParameters() {
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/ChangesetsController.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/ChangesetsController.java
deleted file mode 100644
index 3a218fc5..00000000
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/ChangesetsController.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package org.heigit.ohsome.ohsomeapi.controller.dataaggregation;
-
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
-
-/**
- * Controller containing the GET and POST requests, which enter through "/changesets".
- *
- */
-@RestController
-@RequestMapping("/changesets")
-public class ChangesetsController {
-
-}
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/AreaController.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/elements/AreaController.java
similarity index 80%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/AreaController.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/elements/AreaController.java
index 3547bcc0..d8527bf0 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/AreaController.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/elements/AreaController.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.controller.dataaggregation;
+package org.heigit.ohsome.ohsomeapi.controller.dataaggregation.elements;
 
 
 import io.swagger.annotations.Api;
@@ -12,11 +12,11 @@
 import org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor;
 import org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor;
 import org.heigit.ohsome.ohsomeapi.executor.RequestResource;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.DefaultAggregationResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.RatioResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.RatioGroupByBoundaryResponse;
+import org.heigit.ohsome.ohsomeapi.output.DefaultAggregationResponse;
+import org.heigit.ohsome.ohsomeapi.output.Response;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResponse;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioGroupByBoundaryResponse;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioResponse;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
@@ -35,7 +35,7 @@ public class AreaController {
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws Exception thrown by {@link
    *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
    */
@@ -55,13 +55,16 @@ public Response area(HttpServletRequest servletRequest, HttpServletResponse serv
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
-   *                   #aggregateGroupByType(RequestResource, HttpServletRequest,
-   *                   HttpServletResponse, boolean, boolean) aggregateGroupByType}
+   *         #aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse,
+   *         boolean, boolean) aggregateGroupByType}
    */
   @ApiOperation(value = "Area of OSM elements grouped by the type", nickname = "areaGroupByType",
       response = GroupByResponse.class)
+  @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
+      defaultValue = DefaultSwaggerParameters.BUILDING_FILTER, paramType = "query",
+      dataType = "string", required = false)
   @RequestMapping(value = "/groupBy/type", method = {RequestMethod.GET, RequestMethod.POST},
       produces = {"application/json", "text/csv"})
   public Response areaGroupByType(HttpServletRequest servletRequest,
@@ -75,10 +78,10 @@ public Response areaGroupByType(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws Exception thrown by {@link
-   *                   org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor
-   *                   #aggregateGroupByBoundary() aggregateGroupByBoundary}
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor
+   *         #aggregateGroupByBoundary() aggregateGroupByBoundary}
    */
   @ApiOperation(
       value = "Area of OSM elements grouped by the boundary (bboxes, bcircles, or bpolys)",
@@ -97,10 +100,10 @@ public Response areaGroupByBoundary(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
-   *                   #aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest,
-   *                   HttpServletResponse, boolean, boolean) aggregateGroupByBoundaryGroupByTag}
+   *         #aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest,
+   *         HttpServletResponse, boolean, boolean) aggregateGroupByBoundaryGroupByTag}
    */
   @ApiOperation(value = "Area of OSM elements grouped by the boundary and the tag",
       nickname = "areaGroupByBoundaryGroupByTag", response = GroupByResponse.class)
@@ -123,10 +126,10 @@ public Response areaGroupByBoundaryGroupByTag(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
-   *                   #aggregateGroupByKey(RequestResource, HttpServletRequest,
-   *                   HttpServletResponse, boolean, boolean) aggregateGroupByKey}
+   *         #aggregateGroupByKey(RequestResource, HttpServletRequest, HttpServletResponse, boolean,
+   *         boolean) aggregateGroupByKey}
    */
   @ApiOperation(value = "Area of OSM elements grouped by the key", nickname = "areaGroupByKey",
       response = GroupByResponse.class)
@@ -146,10 +149,10 @@ public Response areaGroupByKey(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response }
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response }
    * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
-   *                   #aggregateGroupByTag(RequestResource, HttpServletRequest,
-   *                   HttpServletResponse, boolean, boolean) aggregateGroupByTag}
+   *         #aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean,
+   *         boolean) aggregateGroupByTag}
    */
   @ApiOperation(value = "Area of OSM elements grouped by the tag", nickname = "areaGroupByTag",
       response = GroupByResponse.class)
@@ -173,10 +176,9 @@ public Response areaGroupByTag(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws Exception thrown by {@link
-   *                   org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor
-   *                   #aggregate() aggregate}
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
    */
   @ApiOperation(
       value = "Density of OSM elements (area of elements divided "
@@ -196,13 +198,16 @@ public Response areaDensity(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
-   *                   #aggregateGroupByType(RequestResource, HttpServletRequest,
-   *                   HttpServletResponse, boolean, boolean) aggregateGroupByType}
+   *         #aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse,
+   *         boolean, boolean) aggregateGroupByType}
    */
   @ApiOperation(value = "Density of OSM elements grouped by the type",
       nickname = "areaDensityGroupByType", response = GroupByResponse.class)
+  @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
+      defaultValue = DefaultSwaggerParameters.BUILDING_FILTER, paramType = "query",
+      dataType = "string", required = false)
   @RequestMapping(value = "/density/groupBy/type", method = {RequestMethod.GET, RequestMethod.POST},
       produces = {"application/json", "text/csv"})
   public Response areaDensityGroupByType(HttpServletRequest servletRequest,
@@ -217,10 +222,10 @@ public Response areaDensityGroupByType(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws Exception thrown by {@link
-   *                   org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor
-   *                   #aggregateGroupByBoundary() aggregateGroupByBoundary}
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor
+   *         #aggregateGroupByBoundary() aggregateGroupByBoundary}
    */
   @ApiOperation(
       value = "Density of OSM elements grouped by the boundary (bboxes, bcircles, or bpolys)",
@@ -239,10 +244,10 @@ public Response areaDensityGroupByBoundary(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
-   *                   #aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest,
-   *                   HttpServletResponse, boolean, boolean) aggregateGroupByBoundaryGroupByTag}
+   *         #aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest,
+   *         HttpServletResponse, boolean, boolean) aggregateGroupByBoundaryGroupByTag}
    */
   @ApiOperation(value = "Density of OSM elements grouped by the boundary and the tag",
       nickname = "areaDensityGroupByBoundaryGroupByTag", response = GroupByResponse.class)
@@ -265,10 +270,10 @@ public Response areaDensityGroupByBoundaryGroupByTag(HttpServletRequest servletR
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
-   *                   #aggregateGroupByTag(RequestResource, HttpServletRequest,
-   *                   HttpServletResponse, boolean, boolean) aggregateGroupByTag}
+   *         #aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean,
+   *         boolean) aggregateGroupByTag}
    */
   @ApiOperation(value = "Density of OSM elements grouped by the tag",
       nickname = "areaDensityGroupByTag", response = GroupByResponse.class)
@@ -291,10 +296,10 @@ public Response areaDensityGroupByTag(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
-   *                   #aggregateRatio(RequestResource, HttpServletRequest, HttpServletResponse)
-   *                   aggregateRatio}
+   *         #aggregateRatio(RequestResource, HttpServletRequest, HttpServletResponse)
+   *         aggregateRatio}
    */
   @ApiOperation(
       value = "Ratio of the area of OSM elements satisfying filter2 within items selected by "
@@ -307,8 +312,11 @@ public Response areaDensityGroupByTag(HttpServletRequest servletRequest,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
       @ApiImplicitParam(name = "values2", value = ParameterDescriptions.DEPRECATED_USE_FILTER2,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
+      @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
+          defaultValue = DefaultSwaggerParameters.BUILDING_FILTER, paramType = "query",
+          dataType = "string", required = false),
       @ApiImplicitParam(name = "filter2", value = ParameterDescriptions.FILTER,
-          defaultValue = "type:relation and " + DefaultSwaggerParameters.BUILDING_FILTER,
+          defaultValue = DefaultSwaggerParameters.BUILDING_FILTER2,
           paramType = "query", dataType = "string", required = false)})
   @RequestMapping(value = "/ratio", method = {RequestMethod.GET, RequestMethod.POST},
       produces = {"application/json", "text/csv"})
@@ -324,10 +332,10 @@ public Response areaRatio(HttpServletRequest servletRequest, HttpServletResponse
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
-   *                   #aggregateRatioGroupByBoundary(RequestResource, HttpServletRequest,
-   *                   HttpServletResponse) aggregateRatioGroupByBoundary}
+   *         #aggregateRatioGroupByBoundary(RequestResource, HttpServletRequest,
+   *         HttpServletResponse) aggregateRatioGroupByBoundary}
    */
   @ApiOperation(value = "Ratio of the area of OSM elements grouped by the boundary",
       nickname = "areaRatioGroupByBoundary", response = RatioGroupByBoundaryResponse.class)
@@ -338,8 +346,11 @@ public Response areaRatio(HttpServletRequest servletRequest, HttpServletResponse
           defaultValue = "", paramType = "query", dataType = "string", required = false),
       @ApiImplicitParam(name = "values2", value = ParameterDescriptions.DEPRECATED_USE_FILTER2,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
-      @ApiImplicitParam(name = "filter2", value = ParameterDescriptions.FILTER,
+      @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
           defaultValue = DefaultSwaggerParameters.BUILDING_FILTER, paramType = "query",
+          dataType = "string", required = false),
+      @ApiImplicitParam(name = "filter2", value = ParameterDescriptions.FILTER,
+          defaultValue = DefaultSwaggerParameters.BUILDING_FILTER2, paramType = "query",
           dataType = "string", required = false)})
   @RequestMapping(value = "/ratio/groupBy/boundary",
       method = {RequestMethod.GET, RequestMethod.POST}, produces = {"application/json", "text/csv"})
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/CountController.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/elements/CountController.java
similarity index 76%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/CountController.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/elements/CountController.java
index 7073eb24..6f08e74a 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/CountController.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/elements/CountController.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.controller.dataaggregation;
+package org.heigit.ohsome.ohsomeapi.controller.dataaggregation.elements;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -11,11 +11,11 @@
 import org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor;
 import org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor;
 import org.heigit.ohsome.ohsomeapi.executor.RequestResource;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.DefaultAggregationResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.RatioResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.RatioGroupByBoundaryResponse;
+import org.heigit.ohsome.ohsomeapi.output.DefaultAggregationResponse;
+import org.heigit.ohsome.ohsomeapi.output.Response;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResponse;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioGroupByBoundaryResponse;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioResponse;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
@@ -35,9 +35,9 @@ public class CountController {
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
    */
   @ApiOperation(value = "Count of OSM elements", nickname = "count",
       response = DefaultAggregationResponse.class)
@@ -55,13 +55,16 @@ public Response count(HttpServletRequest servletRequest, HttpServletResponse ser
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByType}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse,
+   *         boolean, boolean) aggregateGroupByType}
    */
   @ApiOperation(value = "Count of OSM elements grouped by the type", nickname = "countGroupByType",
       response = GroupByResponse.class)
+  @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
+      defaultValue = DefaultSwaggerParameters.BUILDING_FILTER, paramType = "query",
+      dataType = "string", required = false)
   @RequestMapping(value = "/groupBy/type", method = {RequestMethod.GET, RequestMethod.POST},
       produces = {"application/json", "text/csv"})
   public Response countGroupByType(HttpServletRequest servletRequest,
@@ -75,9 +78,10 @@ public Response countGroupByType(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregateGroupByBoundary() aggregateGroupByBoundary}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor
+   *         #aggregateGroupByBoundary() aggregateGroupByBoundary}
    */
   @ApiOperation(
       value = "Count of OSM elements grouped by the boundary (bboxes, bcircles, or bpolys)",
@@ -98,10 +102,10 @@ public Response countGroupByBoundary(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByBoundaryGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest,
+   *         HttpServletResponse, boolean, boolean) aggregateGroupByBoundaryGroupByTag}
    */
   @ApiOperation(value = "Count of OSM elements grouped by the boundary and the tag",
       nickname = "countGroupByBoundaryGroupByTag", response = GroupByResponse.class)
@@ -124,10 +128,10 @@ public Response countGroupByBoundaryGroupByTag(HttpServletRequest servletRequest
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByKey(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByKey}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByKey(RequestResource, HttpServletRequest, HttpServletResponse, boolean,
+   *         boolean) aggregateGroupByKey}
    */
   @ApiOperation(value = "Count of OSM elements grouped by the key", nickname = "countGroupByKey",
       response = GroupByResponse.class)
@@ -147,10 +151,10 @@ public Response countGroupByKey(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean,
+   *         boolean) aggregateGroupByTag}
    */
   @ApiOperation(value = "Count of OSM elements grouped by the tag", nickname = "countGroupByTag",
       response = GroupByResponse.class)
@@ -174,9 +178,9 @@ public Response countGroupByTag(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
    */
   @ApiOperation(
       value = "Density of OSM elements (number of elements divided by "
@@ -196,13 +200,16 @@ public Response countDensity(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByType}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse,
+   *         boolean, boolean) aggregateGroupByType}
    */
   @ApiOperation(value = "Density of OSM elements grouped by the type",
       nickname = "countDensityGroupByType", response = GroupByResponse.class)
+  @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
+      defaultValue = DefaultSwaggerParameters.BUILDING_FILTER, paramType = "query",
+      dataType = "string", required = false)
   @RequestMapping(value = "density/groupBy/type", method = {RequestMethod.GET, RequestMethod.POST},
       produces = {"application/json", "text/csv"})
   public Response countDensityGroupByType(HttpServletRequest servletRequest,
@@ -217,9 +224,10 @@ public Response countDensityGroupByType(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregateGroupByBoundary() aggregateGroupByBoundary}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor
+   *         #aggregateGroupByBoundary() aggregateGroupByBoundary}
    */
   @ApiOperation(
       value = "Density of OSM elements grouped by the boundary (bboxes, bcircles, or bpolys)",
@@ -240,10 +248,10 @@ public Response countDensityGroupByBoundary(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByBoundaryGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest,
+   *         HttpServletResponse, boolean, boolean) aggregateGroupByBoundaryGroupByTag}
    */
   @ApiOperation(value = "Density of OSM elements grouped by the boundary and the tag",
       nickname = "countDensityGroupByBoundaryGroupByTag", response = GroupByResponse.class)
@@ -266,10 +274,10 @@ public Response countDensityGroupByBoundaryGroupByTag(HttpServletRequest servlet
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean,
+   *         boolean) aggregateGroupByTag}
    */
   @ApiOperation(value = "Density of OSM elements grouped by the tag",
       nickname = "countDensityGroupByTag", response = GroupByResponse.class)
@@ -292,9 +300,9 @@ public Response countDensityGroupByTag(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateRatio(RequestResource, HttpServletRequest, HttpServletResponse)
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateRatio(RequestResource, HttpServletRequest, HttpServletResponse)
    *         aggregateRatio}
    */
   @ApiOperation(value = "Ratio of OSM elements satisfying filter2 within items selected by filter",
@@ -306,6 +314,9 @@ public Response countDensityGroupByTag(HttpServletRequest servletRequest,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
       @ApiImplicitParam(name = "values2", value = ParameterDescriptions.DEPRECATED_USE_FILTER2,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
+      @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
+          defaultValue = DefaultSwaggerParameters.BUILDING_FILTER, paramType = "query",
+          dataType = "string", required = false),
       @ApiImplicitParam(name = "filter2", value = ParameterDescriptions.FILTER,
           defaultValue = DefaultSwaggerParameters.HOUSENUMBER_FILTER, paramType = "query",
           dataType = "string", required = false)})
@@ -323,10 +334,10 @@ public Response countRatio(HttpServletRequest servletRequest, HttpServletRespons
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateRatioGroupByBoundary(RequestResource, HttpServletRequest, HttpServletResponse)
-   *         aggregateRatioGroupByBoundary}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateRatioGroupByBoundary(RequestResource, HttpServletRequest,
+   *         HttpServletResponse) aggregateRatioGroupByBoundary}
    */
   @ApiOperation(value = "Ratio of OSM elements grouped by the boundary",
       nickname = "countRatioGroupByBoundary", response = RatioGroupByBoundaryResponse.class)
@@ -337,6 +348,9 @@ public Response countRatio(HttpServletRequest servletRequest, HttpServletRespons
           defaultValue = "", paramType = "query", dataType = "string", required = false),
       @ApiImplicitParam(name = "values2", value = ParameterDescriptions.DEPRECATED_USE_FILTER2,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
+      @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
+          defaultValue = DefaultSwaggerParameters.BUILDING_FILTER, paramType = "query",
+          dataType = "string", required = false),
       @ApiImplicitParam(name = "filter2", value = ParameterDescriptions.FILTER,
           defaultValue = DefaultSwaggerParameters.HOUSENUMBER_FILTER, paramType = "query",
           dataType = "string", required = false)})
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/LengthController.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/elements/LengthController.java
similarity index 76%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/LengthController.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/elements/LengthController.java
index 6783ecce..d7a1d56e 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/LengthController.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/elements/LengthController.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.controller.dataaggregation;
+package org.heigit.ohsome.ohsomeapi.controller.dataaggregation.elements;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -11,11 +11,11 @@
 import org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor;
 import org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor;
 import org.heigit.ohsome.ohsomeapi.executor.RequestResource;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.DefaultAggregationResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.RatioResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.RatioGroupByBoundaryResponse;
+import org.heigit.ohsome.ohsomeapi.output.DefaultAggregationResponse;
+import org.heigit.ohsome.ohsomeapi.output.Response;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResponse;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioGroupByBoundaryResponse;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioResponse;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
@@ -34,9 +34,9 @@ public class LengthController {
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
    */
   @ApiOperation(value = "Length of OSM elements", nickname = "length",
       response = DefaultAggregationResponse.class)
@@ -44,8 +44,8 @@ public class LengthController {
       produces = {"application/json", "text/csv"})
   public Response length(HttpServletRequest servletRequest, HttpServletResponse servletResponse)
       throws Exception {
-    AggregateRequestExecutor executor =
-        new AggregateRequestExecutor(RequestResource.LENGTH, servletRequest, servletResponse, false);
+    AggregateRequestExecutor executor = new AggregateRequestExecutor(RequestResource.LENGTH, 
+        servletRequest, servletResponse, false);
     return executor.aggregate();
   }
 
@@ -54,10 +54,10 @@ public Response length(HttpServletRequest servletRequest, HttpServletResponse se
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByType}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse,
+   *         boolean, boolean) aggregateGroupByType}
    */
   @ApiOperation(value = "Length of OSM elements grouped by the type",
       nickname = "lengthGroupByType", response = GroupByResponse.class)
@@ -75,9 +75,10 @@ public Response lengthGroupByType(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregateGroupByBoundary() aggregateGroupByBoundary}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor
+   *         #aggregateGroupByBoundary() aggregateGroupByBoundary}
    */
   @ApiOperation(
       value = "Length of OSM elements grouped by the boundary (bboxes, bcircles, or bpolys)",
@@ -88,8 +89,8 @@ public Response lengthGroupByType(HttpServletRequest servletRequest,
       produces = {"application/json", "text/csv"})
   public Response lengthGroupByBoundary(HttpServletRequest servletRequest,
       HttpServletResponse servletResponse) throws Exception {
-    AggregateRequestExecutor executor =
-        new AggregateRequestExecutor(RequestResource.LENGTH, servletRequest, servletResponse, false);
+    AggregateRequestExecutor executor = new AggregateRequestExecutor(RequestResource.LENGTH, 
+        servletRequest, servletResponse, false);
     return executor.aggregateGroupByBoundary();
   }
 
@@ -98,10 +99,10 @@ public Response lengthGroupByBoundary(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByBoundaryGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest,
+   *         HttpServletResponse, boolean, boolean) aggregateGroupByBoundaryGroupByTag}
    */
   @ApiOperation(value = "Length of OSM elements grouped by the boundary and the tag",
       nickname = "lengthGroupByBoundaryGroupByTag", response = GroupByResponse.class)
@@ -124,10 +125,10 @@ public Response lengthGroupByBoundaryGroupByTag(HttpServletRequest servletReques
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByKey(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByKey}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByKey(RequestResource, HttpServletRequest, HttpServletResponse, boolean,
+   *         boolean) aggregateGroupByKey}
    */
   @ApiOperation(value = "Length of OSM elements grouped by the key", nickname = "lengthGroupByKey",
       response = GroupByResponse.class)
@@ -147,10 +148,10 @@ public Response lengthGroupByKey(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean,
+   *         boolean) aggregateGroupByTag}
    */
   @ApiOperation(value = "Length of OSM elements grouped by the tag", nickname = "lengthGroupByTag",
       response = GroupByResponse.class)
@@ -174,9 +175,9 @@ public Response lengthGroupByTag(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
    */
   @ApiOperation(
       value = "Density of OSM elements (length of elements divided by "
@@ -196,10 +197,10 @@ public Response lengthDensity(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByType}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse,
+   *         boolean, boolean) aggregateGroupByType}
    */
   @ApiOperation(value = "Density of OSM elements grouped by the OSM type",
       nickname = "lengthDensityGroupByType", response = GroupByResponse.class)
@@ -216,9 +217,10 @@ public Response lengthDensityGroupByType(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregateGroupByBoundary() aggregateGroupByBoundary}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor
+   *         #aggregateGroupByBoundary() aggregateGroupByBoundary}
    */
   @ApiOperation(
       value = "Density of OSM elements grouped by the boundary (bboxes, bcircles, or bpolys)",
@@ -239,10 +241,10 @@ public Response lengthDensityGroupByBoundary(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByBoundaryGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest, 
+   *         HttpServletResponse, boolean, boolean) aggregateGroupByBoundaryGroupByTag}
    */
   @ApiOperation(value = "Density of OSM elements grouped by the boundary and the tag",
       nickname = "lengthDensityGroupByBoundaryGroupByTag", response = GroupByResponse.class)
@@ -265,10 +267,10 @@ public Response lengthDensityGroupByBoundaryGroupByTag(HttpServletRequest servle
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, 
+   *         boolean, boolean) aggregateGroupByTag}
    */
   @ApiOperation(value = "Density of OSM elements grouped by the tag",
       nickname = "lengthDensityGroupByTag", response = GroupByResponse.class)
@@ -291,9 +293,9 @@ public Response lengthDensityGroupByTag(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateRatio(RequestResource, HttpServletRequest, HttpServletResponse)
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateRatio(RequestResource, HttpServletRequest, HttpServletResponse)
    *         aggregateRatio}
    */
   @ApiOperation(value = "Ratio of OSM elements satisfying filter2 within items selected by filter",
@@ -305,6 +307,9 @@ public Response lengthDensityGroupByTag(HttpServletRequest servletRequest,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
       @ApiImplicitParam(name = "values2", value = ParameterDescriptions.DEPRECATED_USE_FILTER2,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
+      @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
+          defaultValue = DefaultSwaggerParameters.HIGHWAY_FILTER2, paramType = "query",
+          dataType = "string", required = false),
       @ApiImplicitParam(name = "filter2", value = ParameterDescriptions.FILTER,
           defaultValue = DefaultSwaggerParameters.HIGHWAY_FILTER, paramType = "query",
           dataType = "string", required = false)})
@@ -322,10 +327,10 @@ public Response lengthRatio(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateRatioGroupByBoundary(RequestResource, HttpServletRequest, HttpServletResponse)
-   *         aggregateRatioGroupByBoundary}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateRatioGroupByBoundary(RequestResource, HttpServletRequest,
+   *         HttpServletResponse) aggregateRatioGroupByBoundary}
    */
   @ApiOperation(value = "Ratio of the length of OSM elements grouped by the boundary",
       nickname = "lengthRatioGroupByBoundary", response = RatioGroupByBoundaryResponse.class)
@@ -336,6 +341,9 @@ public Response lengthRatio(HttpServletRequest servletRequest,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
       @ApiImplicitParam(name = "values2", value = ParameterDescriptions.DEPRECATED_USE_FILTER2,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
+      @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
+          defaultValue = DefaultSwaggerParameters.HIGHWAY_FILTER2, paramType = "query",
+          dataType = "string", required = false),
       @ApiImplicitParam(name = "filter2", value = ParameterDescriptions.FILTER,
           defaultValue = DefaultSwaggerParameters.HIGHWAY_FILTER, paramType = "query",
           dataType = "string", required = false)})
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/PerimeterController.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/elements/PerimeterController.java
similarity index 75%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/PerimeterController.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/elements/PerimeterController.java
index 272c15d4..9c71e1c6 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/PerimeterController.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/elements/PerimeterController.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.controller.dataaggregation;
+package org.heigit.ohsome.ohsomeapi.controller.dataaggregation.elements;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -11,11 +11,11 @@
 import org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor;
 import org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor;
 import org.heigit.ohsome.ohsomeapi.executor.RequestResource;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.DefaultAggregationResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.RatioResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.RatioGroupByBoundaryResponse;
+import org.heigit.ohsome.ohsomeapi.output.DefaultAggregationResponse;
+import org.heigit.ohsome.ohsomeapi.output.Response;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResponse;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioGroupByBoundaryResponse;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioResponse;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
@@ -35,9 +35,9 @@ public class PerimeterController {
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
    */
   @ApiOperation(value = "Perimeter of OSM elements", nickname = "perimeter",
       response = DefaultAggregationResponse.class)
@@ -55,13 +55,16 @@ public Response perimeter(HttpServletRequest servletRequest, HttpServletResponse
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByType}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse,
+   *         boolean, boolean) aggregateGroupByType}
    */
   @ApiOperation(value = "Perimeter of OSM elements grouped by the type",
       nickname = "perimeterGroupByType", response = GroupByResponse.class)
+  @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
+      defaultValue = DefaultSwaggerParameters.BUILDING_FILTER, paramType = "query",
+      dataType = "string", required = false)
   @RequestMapping(value = "/groupBy/type", method = {RequestMethod.GET, RequestMethod.POST},
       produces = {"application/json", "text/csv"})
   public Response perimeterGroupByType(HttpServletRequest servletRequest,
@@ -76,9 +79,10 @@ public Response perimeterGroupByType(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregateGroupByBoundary() aggregateGroupByBoundary}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor
+   *         #aggregateGroupByBoundary() aggregateGroupByBoundary}
    */
   @ApiOperation(
       value = "Perimeter of OSM elements in grouped by the boundary "
@@ -98,10 +102,10 @@ public Response perimeterGroupByBoundary(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByBoundaryGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest, 
+   *         HttpServletResponse, boolean, boolean) aggregateGroupByBoundaryGroupByTag}
    */
   @ApiOperation(value = "Perimeter of OSM elements grouped by the boundary and the tag",
       nickname = "perimeterGroupByBoundaryGroupByTag", response = GroupByResponse.class)
@@ -124,10 +128,10 @@ public Response perimeterGroupByBoundaryGroupByTag(HttpServletRequest servletReq
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByKey(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByKey}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByKey(RequestResource, HttpServletRequest, HttpServletResponse, 
+   *         boolean, boolean) aggregateGroupByKey}
    */
   @ApiOperation(value = "Perimeter of OSM elements grouped by the key",
       nickname = "perimeterGroupByKey", response = GroupByResponse.class)
@@ -147,10 +151,10 @@ public Response perimeterGroupByKey(HttpServletRequest servletRequest,
    *
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, 
+   *         boolean, boolean) aggregateGroupByTag}
    */
   @ApiOperation(value = "Perimeter of OSM elements grouped by the tag",
       nickname = "perimeterGroupByTag", response = GroupByResponse.class)
@@ -174,9 +178,9 @@ public Response perimeterGroupByTag(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
    */
   @ApiOperation(
       value = "Density of OSM elements (perimeter of elements divided by "
@@ -196,13 +200,16 @@ public Response perimeterDensity(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByType}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByType(RequestResource, HttpServletRequest, HttpServletResponse,
+   *         boolean, boolean) aggregateGroupByType}
    */
   @ApiOperation(value = "Density of OSM elements grouped by the type",
       nickname = "perimeterDensityGroupByType", response = GroupByResponse.class)
+  @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
+      defaultValue = DefaultSwaggerParameters.BUILDING_FILTER, paramType = "query",
+      dataType = "string", required = false)
   @RequestMapping(value = "density/groupBy/type", method = {RequestMethod.GET, RequestMethod.POST},
       produces = {"application/json", "text/csv"})
   public Response perimeterDensityGroupByType(HttpServletRequest servletRequest,
@@ -217,9 +224,10 @@ public Response perimeterDensityGroupByType(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregateGroupByBoundary() aggregateGroupByBoundary}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor
+   *         #aggregateGroupByBoundary() aggregateGroupByBoundary}
    */
   @ApiOperation(
       value = "Density of OSM elements grouped by the boundary (bboxes, bcircles, or bpolys)",
@@ -238,10 +246,10 @@ public Response perimeterDensityGroupByBoundary(HttpServletRequest servletReques
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByBoundaryGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByBoundaryGroupByTag(RequestResource, HttpServletRequest,
+   *         HttpServletResponse, boolean, boolean) aggregateGroupByBoundaryGroupByTag}
    */
   @ApiOperation(value = "Density of  grouped by the boundary and the tag",
       nickname = "perimeterDensityGroupByBoundaryGroupByTag", response = GroupByResponse.class)
@@ -264,10 +272,10 @@ public Response perimeterDensityGroupByBoundaryGroupByTag(HttpServletRequest ser
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean, boolean)
-   *         aggregateGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateGroupByTag(RequestResource, HttpServletRequest, HttpServletResponse, boolean,
+   *         boolean) aggregateGroupByTag}
    */
   @ApiOperation(value = "Density of OSM elements grouped by the tag",
       nickname = "perimeterDensityGroupByTag", response = GroupByResponse.class)
@@ -290,9 +298,9 @@ public Response perimeterDensityGroupByTag(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateRatio(RequestResource, HttpServletRequest, HttpServletResponse)
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateRatio(RequestResource, HttpServletRequest, HttpServletResponse)
    *         aggregateRatio}
    */
   @ApiOperation(value = "Ratio of OSM elements satisfying filter2 within items selected by filter",
@@ -304,8 +312,11 @@ public Response perimeterDensityGroupByTag(HttpServletRequest servletRequest,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
       @ApiImplicitParam(name = "values2", value = ParameterDescriptions.DEPRECATED_USE_FILTER2,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
+      @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
+          defaultValue = DefaultSwaggerParameters.BUILDING_FILTER, paramType = "query",
+          dataType = "string", required = false),
       @ApiImplicitParam(name = "filter2", value = ParameterDescriptions.FILTER,
-          defaultValue = DefaultSwaggerParameters.TYPE_FILTER, paramType = "query",
+          defaultValue = DefaultSwaggerParameters.BUILDING_FILTER2, paramType = "query",
           dataType = "string", required = false)})
   @RequestMapping(value = "/ratio", method = {RequestMethod.GET, RequestMethod.POST},
       produces = {"application/json", "text/csv"})
@@ -321,10 +332,10 @@ public Response perimeterRatio(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#aggregateRatioGroupByBoundary(RequestResource, HttpServletRequest, HttpServletResponse)
-   *         aggregateRatioGroupByBoundary}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #aggregateRatioGroupByBoundary(RequestResource, HttpServletRequest,
+   *         HttpServletResponse) aggregateRatioGroupByBoundary}
    */
   @ApiOperation(value = "Ratio of the perimeter of OSM elements grouped by the boundary",
       nickname = "perimeterRatioGroupByBoundary", response = RatioGroupByBoundaryResponse.class)
@@ -335,8 +346,11 @@ public Response perimeterRatio(HttpServletRequest servletRequest,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
       @ApiImplicitParam(name = "values2", value = ParameterDescriptions.DEPRECATED_USE_FILTER2,
           defaultValue = "", paramType = "query", dataType = "string", required = false),
+      @ApiImplicitParam(name = "filter", value = ParameterDescriptions.FILTER,
+          defaultValue = DefaultSwaggerParameters.BUILDING_FILTER, paramType = "query",
+          dataType = "string", required = false),
       @ApiImplicitParam(name = "filter2", value = ParameterDescriptions.FILTER,
-          defaultValue = DefaultSwaggerParameters.TYPE_FILTER, paramType = "query",
+          defaultValue = DefaultSwaggerParameters.BUILDING_FILTER2, paramType = "query",
           dataType = "string", required = false)})
   @RequestMapping(value = "/ratio/groupBy/boundary",
       method = {RequestMethod.GET, RequestMethod.POST}, produces = {"application/json", "text/csv"})
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/UsersController.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/users/UsersController.java
similarity index 75%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/UsersController.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/users/UsersController.java
index 354985ce..ca252031 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/UsersController.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/users/UsersController.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.controller.dataaggregation;
+package org.heigit.ohsome.ohsomeapi.controller.dataaggregation.users;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -9,9 +9,9 @@
 import org.heigit.ohsome.ohsomeapi.controller.DefaultSwaggerParameters;
 import org.heigit.ohsome.ohsomeapi.controller.ParameterDescriptions;
 import org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.DefaultAggregationResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResponse;
+import org.heigit.ohsome.ohsomeapi.output.DefaultAggregationResponse;
+import org.heigit.ohsome.ohsomeapi.output.Response;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResponse;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
@@ -27,10 +27,9 @@ public class UsersController {
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor#count(HttpServletRequest, HttpServletResponse, boolean)
-   *         count}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor
+   *         #count(HttpServletRequest, HttpServletResponse, boolean) count}
    */
   @ApiOperation(value = "Count of OSM users", nickname = "count",
       response = DefaultAggregationResponse.class)
@@ -46,10 +45,9 @@ public Response count(HttpServletRequest servletRequest, HttpServletResponse ser
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor#countGroupByType(HttpServletRequest, HttpServletResponse, boolean)
-   *         countGroupByType}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor
+   *         #countGroupByType(HttpServletRequest, HttpServletResponse, boolean) countGroupByType}
    */
   @ApiOperation(value = "Count of OSM users grouped by the type", nickname = "countGroupByType",
       response = GroupByResponse.class)
@@ -65,10 +63,9 @@ public Response countGroupByType(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor#countGroupByTag(HttpServletRequest, HttpServletResponse, boolean)
-   *         countGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor
+   *         #countGroupByTag(HttpServletRequest, HttpServletResponse, boolean) countGroupByTag}
    */
   @ApiOperation(value = "Count of OSM users grouped by the tag", nickname = "countGroupByTag",
       response = GroupByResponse.class)
@@ -90,10 +87,9 @@ public Response countGroupByTag(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor#countGroupByKey(HttpServletRequest, HttpServletResponse, boolean)
-   *         countGroupByKey}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor
+   *         #countGroupByKey(HttpServletRequest, HttpServletResponse, boolean) countGroupByKey}
    */
   @ApiOperation(value = "Count of OSM users grouped by the key", nickname = "countGroupByKey",
       response = GroupByResponse.class)
@@ -112,9 +108,9 @@ public Response countGroupByKey(HttpServletRequest servletRequest,
    *
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor#countGroupByBoundary(HttpServletRequest, HttpServletResponse, boolean)
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor
+   *         #countGroupByBoundary(HttpServletRequest, HttpServletResponse, boolean)
    *         countGroupByBoundary}
    */
   @ApiOperation(value = "Count of OSM users grouped by boundary (bboxes, bcirlces, or bpolys)",
@@ -132,10 +128,9 @@ public Response countGroupByBoundary(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor#count(HttpServletRequest, HttpServletResponse, boolean)
-   *         count}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor
+   *          #count(HttpServletRequest, HttpServletResponse, boolean) count}
    */
   @ApiOperation(
       value = "Density of OSM users (number of users divided "
@@ -153,10 +148,9 @@ public Response countDensity(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor#countGroupByType(HttpServletRequest, HttpServletResponse, boolean)
-   *         countGroupByType}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor
+   *         #countGroupByType(HttpServletRequest, HttpServletResponse, boolean) countGroupByType}
    */
   @ApiOperation(value = "Density of OSM users grouped by the type",
       nickname = "countDensityGroupByType", response = GroupByResponse.class)
@@ -172,10 +166,9 @@ public Response countDensityGroupByType(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor#countGroupByTag(HttpServletRequest, HttpServletResponse, boolean)
-   *         countGroupByTag}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor
+   *         #countGroupByTag(HttpServletRequest, HttpServletResponse, boolean) countGroupByTag}
    */
   @ApiOperation(value = "Density of OSM users grouped by the tag",
       nickname = "countDensityGroupByTag", response = GroupByResponse.class)
@@ -198,9 +191,9 @@ public Response countDensityGroupByTag(HttpServletRequest servletRequest,
    *
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor#countGroupByBoundary(HttpServletRequest, HttpServletResponse, boolean)
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.UsersRequestExecutor
+   *         #countGroupByBoundary(HttpServletRequest, HttpServletResponse, boolean)
    *         countGroupByBoundary}
    */
   @ApiOperation(value = "Count of OSM users grouped by boundary (bboxes, bcirlces, or bpolys)",
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/contributions/ContributionsController.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataextraction/contributions/ContributionsController.java
similarity index 83%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/contributions/ContributionsController.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataextraction/contributions/ContributionsController.java
index 442e70fc..946bdd91 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/contributions/ContributionsController.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataextraction/contributions/ContributionsController.java
@@ -1,14 +1,14 @@
-package org.heigit.ohsome.ohsomeapi.controller.contributions;
+package org.heigit.ohsome.ohsomeapi.controller.dataextraction.contributions;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
 import io.swagger.annotations.ApiOperation;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import org.heigit.ohsome.ohsomeapi.controller.rawdata.ElementsGeometry;
+import org.heigit.ohsome.ohsomeapi.controller.dataextraction.elements.ElementsGeometry;
 import org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor;
 import org.heigit.ohsome.ohsomeapi.executor.RequestResource;
-import org.heigit.ohsome.ohsomeapi.output.rawdataresponse.DataResponse;
+import org.heigit.ohsome.ohsomeapi.output.ExtractionResponse;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
@@ -17,7 +17,7 @@
  * REST controller containing the methods, which are mapped to "/contributions" and used to return
  * each contribution (creation, modification, deletion) of the OSM data.
  */
-@Api(tags = "Contributions")
+@Api(tags = "Contributions Extraction")
 @RestController
 @RequestMapping("/contributions")
 public class ContributionsController {
@@ -28,11 +28,11 @@ public class ContributionsController {
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor#extract() extract}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor
+   *         #extract() extract}
    */
   @ApiOperation(value = "OSM contributions having the raw geometry of each OSM object as geometry",
-      nickname = "contributionsGeometry", response = DataResponse.class)
+      nickname = "contributionsGeometry", response = ExtractionResponse.class)
   @ApiImplicitParam(name = "time",
       value = "Two ISO-8601 conform timestrings defining an interval; no default value",
       defaultValue = "2016-01-01,2017-01-01", paramType = "query", dataType = "string",
@@ -52,11 +52,11 @@ public void contributions(HttpServletRequest servletRequest, HttpServletResponse
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor#extract() extract}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor
+   *         #extract() extract}
    */
   @ApiOperation(value = "OSM contributions having the bounding box of each OSM object as geometry",
-      nickname = "contributionsBbox", response = DataResponse.class)
+      nickname = "contributionsBbox", response = ExtractionResponse.class)
   @ApiImplicitParam(name = "time",
       value = "Two ISO-8601 conform timestrings defining an interval; no default value",
       defaultValue = "2016-01-01,2017-01-01", paramType = "query", dataType = "string",
@@ -76,11 +76,11 @@ public void contributionsBbox(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor#extract() extract}
+   * @throws Exception thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor#extract() extract}
    */
   @ApiOperation(value = "OSM contributions having the centroid of each OSM object as geometry",
-      nickname = "contributionsCentroid", response = DataResponse.class)
+      nickname = "contributionsCentroid", response = ExtractionResponse.class)
   @ApiImplicitParam(name = "time",
       value = "Two ISO-8601 conform timestrings defining an interval; no default value",
       defaultValue = "2016-01-01,2017-01-01", paramType = "query", dataType = "string",
@@ -100,12 +100,12 @@ public void contributionsCentroid(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor#extract() extract}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor
+   *         #extract() extract}
    */
   @ApiOperation(
       value = "Latest OSM contributions having the raw geometry of each OSM object as geometry",
-      nickname = "contributionsLatestGeometry", response = DataResponse.class)
+      nickname = "contributionsLatestGeometry", response = ExtractionResponse.class)
   @ApiImplicitParam(name = "time",
       value = "Two ISO-8601 conform timestrings defining an interval; no default value",
       defaultValue = "2016-01-01,2017-01-01", paramType = "query", dataType = "string",
@@ -125,12 +125,12 @@ public void contributionsLatest(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor#extract() extract}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor
+   *         #extract() extract}
    */
   @ApiOperation(
       value = "Latest OSM contributions having the bounding box of each OSM object as geometry",
-      nickname = "contributionsLatestBbox", response = DataResponse.class)
+      nickname = "contributionsLatestBbox", response = ExtractionResponse.class)
   @ApiImplicitParam(name = "time",
       value = "Two ISO-8601 conform timestrings defining an interval; no default value",
       defaultValue = "2016-01-01,2017-01-01", paramType = "query", dataType = "string",
@@ -150,12 +150,12 @@ public void contributionsBboxLatest(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor#extract() extract}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor
+   *         #extract() extract}
    */
   @ApiOperation(
       value = "Latest OSM contributions having the centroid of each OSM object as geometry",
-      nickname = "contributionsLatestCentroid", response = DataResponse.class)
+      nickname = "contributionsLatestCentroid", response = ExtractionResponse.class)
   @ApiImplicitParam(name = "time",
       value = "Two ISO-8601 conform timestrings defining an interval; no default value",
       defaultValue = "2016-01-01,2017-01-01", paramType = "query", dataType = "string",
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/rawdata/ElementsController.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataextraction/elements/ElementsController.java
similarity index 76%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/rawdata/ElementsController.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataextraction/elements/ElementsController.java
index c757f6bd..b923da89 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/rawdata/ElementsController.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataextraction/elements/ElementsController.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.controller.rawdata;
+package org.heigit.ohsome.ohsomeapi.controller.dataextraction.elements;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
@@ -6,7 +6,7 @@
 import javax.servlet.http.HttpServletResponse;
 import org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor;
 import org.heigit.ohsome.ohsomeapi.executor.RequestResource;
-import org.heigit.ohsome.ohsomeapi.output.rawdataresponse.DataResponse;
+import org.heigit.ohsome.ohsomeapi.output.ExtractionResponse;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
@@ -15,7 +15,7 @@
  * REST controller containing the methods, which are mapped to "/elements" and used to return OSM
  * data.
  */
-@Api(tags = "Data Extraction")
+@Api(tags = "Elements Extraction")
 @RestController
 @RequestMapping("/elements")
 public class ElementsController {
@@ -26,12 +26,12 @@ public class ElementsController {
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#extract(RequestResource, ElementsGeometry, HttpServletRequest, HttpServletResponse)
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #extract(RequestResource, ElementsGeometry, HttpServletRequest, HttpServletResponse)
    *         extract}
    */
   @ApiOperation(value = "OSM Data having the raw geometry of each OSM object as geometry",
-      nickname = "elementsGeometry", response = DataResponse.class)
+      nickname = "elementsGeometry", response = ExtractionResponse.class)
   @RequestMapping(value = "/geometry", method = {RequestMethod.GET, RequestMethod.POST},
       produces = "application/json")
   public void elementsGeometry(HttpServletRequest servletRequest,
@@ -46,12 +46,12 @@ public void elementsGeometry(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#extract(RequestResource, ElementsGeometry, HttpServletRequest, HttpServletResponse)
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #extract(RequestResource, ElementsGeometry, HttpServletRequest, HttpServletResponse)
    *         extract}
    */
   @ApiOperation(value = "OSM Data, having the bounding box of each OSM object as geometry",
-      nickname = "elementsBbox", response = DataResponse.class)
+      nickname = "elementsBbox", response = ExtractionResponse.class)
   @RequestMapping(value = "/bbox", method = {RequestMethod.GET, RequestMethod.POST},
       produces = "application/json")
   public void elementsBbox(HttpServletRequest servletRequest, HttpServletResponse servletResponse)
@@ -66,12 +66,12 @@ public void elementsBbox(HttpServletRequest servletRequest, HttpServletResponse
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor#extract(RequestResource, ElementsGeometry, HttpServletRequest, HttpServletResponse)
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ElementsRequestExecutor
+   *         #extract(RequestResource, ElementsGeometry, HttpServletRequest, HttpServletResponse)
    *         extract}
    */
   @ApiOperation(value = "OSM Data, having the centroid of each OSM object as geometry",
-      nickname = "elementsCentroid", response = DataResponse.class)
+      nickname = "elementsCentroid", response = ExtractionResponse.class)
   @RequestMapping(value = "/centroid", method = {RequestMethod.GET, RequestMethod.POST},
       produces = "application/json")
   public void elementsCentroid(HttpServletRequest servletRequest,
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/rawdata/ElementsFullHistoryController.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataextraction/elements/ElementsFullHistoryController.java
similarity index 83%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/rawdata/ElementsFullHistoryController.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataextraction/elements/ElementsFullHistoryController.java
index d02da8e4..7a0e24d4 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/rawdata/ElementsFullHistoryController.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataextraction/elements/ElementsFullHistoryController.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.controller.rawdata;
+package org.heigit.ohsome.ohsomeapi.controller.dataextraction.elements;
 
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -7,7 +7,7 @@
 import javax.servlet.http.HttpServletResponse;
 import org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor;
 import org.heigit.ohsome.ohsomeapi.executor.RequestResource;
-import org.heigit.ohsome.ohsomeapi.output.rawdataresponse.DataResponse;
+import org.heigit.ohsome.ohsomeapi.output.ExtractionResponse;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
@@ -17,7 +17,7 @@
  * REST controller containing the methods, which are mapped to "/elementsFullHistory" and used to
  * return the full history of the requested OSM data.
  */
-@Api(tags = "Full-History Data Extraction")
+@Api(tags = "Full-History Elements Extraction")
 @RestController
 @RequestMapping("/elementsFullHistory")
 public class ElementsFullHistoryController {
@@ -28,12 +28,12 @@ public class ElementsFullHistoryController {
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor#extract() extract}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor
+   *         #extract() extract}
    */
   @ApiOperation(
       value = "Full-history OSM data having the raw geometry of each OSM object as geometry",
-      nickname = "elementsFullHistory", response = DataResponse.class)
+      nickname = "elementsFullHistory", response = ExtractionResponse.class)
   @ApiImplicitParam(name = "time",
       value = "Two ISO-8601 conform timestrings defining an interval; no default value",
       defaultValue = "2016-01-01,2017-01-01", paramType = "query", dataType = "string",
@@ -53,12 +53,12 @@ public void elementsFullHistory(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor#extract() extract}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor
+   *         #extract() extract}
    */
   @ApiOperation(
       value = "Full-history OSM data, having the bounding box of each OSM object as geometry",
-      nickname = "elementsBboxFullHistory", response = DataResponse.class)
+      nickname = "elementsBboxFullHistory", response = ExtractionResponse.class)
   @ApiImplicitParam(name = "time",
       value = "Two ISO-8601 conform timestrings defining an interval; no default value",
       defaultValue = "2016-01-01,2017-01-01", paramType = "query", dataType = "string",
@@ -78,11 +78,11 @@ public void elementsBboxFullHistory(HttpServletRequest servletRequest,
    * 
    * @param servletRequest <code>HttpServletRequest</code> of the incoming request
    * @param servletResponse <code>HttpServletResponse</code> of the outgoing response
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor#extract() extract}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.executor.DataRequestExecutor
+   *         #extract() extract}
    */
   @ApiOperation(value = "Full-history OSM data, having the centroid of each OSM object as geometry",
-      nickname = "elementsCentroidFullHistory", response = DataResponse.class)
+      nickname = "elementsCentroidFullHistory", response = ExtractionResponse.class)
   @ApiImplicitParam(name = "time",
       value = "Two ISO-8601 conform timestrings defining an interval; no default value",
       defaultValue = "2016-01-01,2017-01-01", paramType = "query", dataType = "string",
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/rawdata/ElementsGeometry.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataextraction/elements/ElementsGeometry.java
similarity index 66%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/rawdata/ElementsGeometry.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataextraction/elements/ElementsGeometry.java
index 907f5a0a..b7d3824d 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/rawdata/ElementsGeometry.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/dataextraction/elements/ElementsGeometry.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.controller.rawdata;
+package org.heigit.ohsome.ohsomeapi.controller.dataextraction.elements;
 
 /** Enumeration defining the geometry of the OSM elements(RAW, BBOX, CENTROID). */
 public enum ElementsGeometry {
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/metadata/MetadataController.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/metadata/MetadataController.java
index 0d3ddb7f..c6a812c1 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/metadata/MetadataController.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/controller/metadata/MetadataController.java
@@ -4,7 +4,7 @@
 import io.swagger.annotations.ApiOperation;
 import javax.servlet.http.HttpServletRequest;
 import org.heigit.ohsome.ohsomeapi.executor.MetadataRequestExecutor;
-import org.heigit.ohsome.ohsomeapi.output.metadataresponse.MetadataResponse;
+import org.heigit.ohsome.ohsomeapi.output.metadata.MetadataResponse;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
@@ -20,8 +20,7 @@ public class MetadataController {
   /**
    * GET request giving the metadata of the underlying extract-region(s).
    * 
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.metadataresponse.MetadataResponse
-   *         MetadataResponse}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.metadata.MetadataResponse MetadataResponse}
    */
   @GetMapping(produces = "application/json")
   @ApiOperation(nickname = "Metadata", value = "Metadata of the underlying OSHDB data-extract")
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/AggregateRequestExecutor.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/AggregateRequestExecutor.java
index 62024409..cb31c633 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/AggregateRequestExecutor.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/AggregateRequestExecutor.java
@@ -34,16 +34,16 @@
 import org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessingUtils;
 import org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor;
 import org.heigit.ohsome.ohsomeapi.inputprocessing.ProcessingData;
+import org.heigit.ohsome.ohsomeapi.output.DefaultAggregationResponse;
 import org.heigit.ohsome.ohsomeapi.output.Description;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.DefaultAggregationResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Metadata;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.RatioResult;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.elements.ElementsResult;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByObject;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResult;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.users.UsersResult;
+import org.heigit.ohsome.ohsomeapi.output.Metadata;
+import org.heigit.ohsome.ohsomeapi.output.Response;
+import org.heigit.ohsome.ohsomeapi.output.contributions.UsersResult;
+import org.heigit.ohsome.ohsomeapi.output.elements.ElementsResult;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByObject;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResponse;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResult;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioResult;
 import org.heigit.ohsome.ohsomeapi.utils.RequestUtils;
 import org.locationtech.jts.geom.Geometry;
 import org.locationtech.jts.geom.Polygonal;
@@ -70,12 +70,11 @@ public AggregateRequestExecutor(RequestResource requestResource,
   /**
    * Performs a count|length|perimeter|area calculation.
    * 
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws RuntimeException if an unsupported RequestResource type is used. Only COUNT, LENGTH,
    *         PERIMETER, and AREA are permitted here
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#processParameters()
-   *         processParameters},
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #processParameters() processParameters},
    *         {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator#count() count}, or
    *         {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator#sum() sum}
    */
@@ -129,12 +128,12 @@ public Response aggregate() throws Exception {
   /**
    * Performs a count|length|perimeter|area calculation grouped by the boundary.
    * 
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#processParameters()
-   *         processParameters} and
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#computeCountLengthPerimeterAreaGbB(RequestResource, BoundaryType, MapReducer, InputProcessor)
-   *         computeCountLengthPerimeterAreaGbB}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #processParameters() processParameters} and
+   *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor
+   *         #computeCountLengthPerimeterAreaGbB(RequestResource, BoundaryType, MapReducer,
+   *         InputProcessor) computeCountLengthPerimeterAreaGbB}
    */
   public Response aggregateGroupByBoundary() throws Exception {
     processingData.setGroupByBoundary(true);
@@ -332,14 +331,15 @@ private ElementsResult[] fillElementsResult(SortedMap<OSHDBTimestamp, ? extends
    * Computes the result for the /count|length|perimeter|area/groupBy/boundary resources.
    * 
    * @throws BadRequestException if a boundary parameter is not defined.
-   * @throws Exception thrown by
-   *         {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator#count() count}, or
-   *         {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator#sum(SerializableFunction)
-   *         sum}
+   * @throws Exception thrown by {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator
+   *         #count() count}, or
+   *         {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator
+   *         #sum(SerializableFunction) sum}
    */
-  private <P extends Geometry & Polygonal> SortedMap<OSHDBCombinedIndex<OSHDBTimestamp, Integer>, ? extends Number> computeCountLengthPerimeterAreaGbB(
-      RequestResource requestResource, BoundaryType boundaryType,
-      MapReducer<OSMEntitySnapshot> mapRed, InputProcessor inputProcessor) throws Exception {
+  private <P extends Geometry & Polygonal> SortedMap<OSHDBCombinedIndex<OSHDBTimestamp, Integer>, 
+        ? extends Number> computeCountLengthPerimeterAreaGbB(RequestResource requestResource, 
+        BoundaryType boundaryType, MapReducer<OSMEntitySnapshot> mapRed, 
+        InputProcessor inputProcessor) throws Exception {
     if (boundaryType == BoundaryType.NOBOUNDARY) {
       throw new BadRequestException(ExceptionMessages.NO_BOUNDARY);
     }
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/DataExtractionTransformer.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/DataExtractionTransformer.java
index e0f29cc6..0f68d919 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/DataExtractionTransformer.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/DataExtractionTransformer.java
@@ -5,6 +5,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Set;
 import java.util.TreeMap;
 import java.util.function.Supplier;
@@ -13,7 +14,8 @@
 import org.heigit.bigspatialdata.oshdb.osm.OSMEntity;
 import org.heigit.bigspatialdata.oshdb.util.celliterator.ContributionType;
 import org.heigit.bigspatialdata.oshdb.util.time.TimestampFormatter;
-import org.heigit.ohsome.ohsomeapi.controller.rawdata.ElementsGeometry;
+import org.heigit.ohsome.filter.FilterExpression;
+import org.heigit.ohsome.ohsomeapi.controller.dataextraction.elements.ElementsGeometry;
 import org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessingUtils;
 import org.heigit.ohsome.ohsomeapi.inputprocessing.SimpleFeatureType;
 import org.locationtech.jts.geom.Geometry;
@@ -28,6 +30,7 @@ public class DataExtractionTransformer implements Serializable {
   private final String startTimestamp;
   private final InputProcessingUtils utils;
   private final Set<SimpleFeatureType> simpleFeatureTypes;
+  private Optional<FilterExpression> filter;
   private final Set<Integer> keysInt;
   private final boolean includeTags;
   private final boolean includeOSMMetadata;
@@ -38,8 +41,9 @@ public class DataExtractionTransformer implements Serializable {
   public DataExtractionTransformer(boolean isContributionsLatestEndpoint,
       boolean isContributionsEndpoint, ExecutionUtils exeUtils,
       boolean clipGeometries, String startTimestamp, InputProcessingUtils utils,
-      Set<SimpleFeatureType> simpleFeatureTypes, Set<Integer> keysInt, boolean includeTags,
-      boolean includeOSMMetadata, ElementsGeometry elementsGeometry, String endTimestamp,
+      Set<SimpleFeatureType> simpleFeatureTypes, Optional<FilterExpression> filter,
+      Set<Integer> keysInt, boolean includeTags, boolean includeOSMMetadata,
+      ElementsGeometry elementsGeometry, String endTimestamp,
       boolean isContainingSimpleFeatureTypes) {
     this.isContributionsLatestEndpoint = isContributionsLatestEndpoint;
     this.isContributionsEndpoint = isContributionsEndpoint;
@@ -48,6 +52,7 @@ public DataExtractionTransformer(boolean isContributionsLatestEndpoint,
     this.startTimestamp = startTimestamp;
     this.utils = utils;
     this.simpleFeatureTypes = simpleFeatureTypes;
+    this.filter = filter;
     this.keysInt = keysInt;
     this.includeTags = includeTags;
     this.includeOSMMetadata = includeOSMMetadata;
@@ -91,8 +96,7 @@ public List<Feature> buildChangedFeatures(List<OSMContribution> contributions) {
         validTo = TimestampFormatter.getInstance().isoDateTime(contribution.getTimestamp());
         if (!skipNext && currentGeom != null && !currentGeom.isEmpty()) {
           final Geometry geomToCheck = currentGeom;
-          boolean addToOutput = addEntityToOutput(isContainingSimpleFeatureTypes, utils,
-              simpleFeatureTypes, () -> geomToCheck);
+          boolean addToOutput = addEntityToOutput(currentEntity, () -> geomToCheck);
           if (addToOutput) {
             properties = new TreeMap<>();
             if (!isContributionsEndpoint) {
@@ -135,8 +139,7 @@ public List<Feature> buildChangedFeatures(List<OSMContribution> contributions) {
       }
       if (!currentGeom.isEmpty()) {
         final Geometry geomToCheck = currentGeom;
-        boolean addToOutput = addEntityToOutput(isContainingSimpleFeatureTypes, utils,
-            simpleFeatureTypes, () -> geomToCheck);
+        boolean addToOutput = addEntityToOutput(currentEntity, () -> geomToCheck);
         if (addToOutput) {
           output.add(exeUtils.createOSMFeature(currentEntity, currentGeom, properties, keysInt,
               includeTags, includeOSMMetadata, isContributionsEndpoint, elementsGeometry,
@@ -172,8 +175,7 @@ public List<Feature> buildUnchangedFeatures(OSMEntitySnapshot snapshot) {
         TimestampFormatter.getInstance().isoDateTime(snapshot.getTimestamp()));
     properties.put("@validFrom", startTimestamp);
     properties.put("@validTo", endTimestamp);
-    boolean addToOutput = addEntityToOutput(isContainingSimpleFeatureTypes, utils,
-        simpleFeatureTypes, geom);
+    boolean addToOutput = addEntityToOutput(entity, geom);
     if (addToOutput) {
       return Collections.singletonList(
           exeUtils.createOSMFeature(entity, geom.get(), properties, keysInt, includeTags,
@@ -184,17 +186,11 @@ public List<Feature> buildUnchangedFeatures(OSMEntitySnapshot snapshot) {
   }
 
   /** Checks whether the given entity should be added to the output (true) or not (false). */
-  public static boolean addEntityToOutput(
-      boolean isContainingSimpleFeatureTypes,
-      InputProcessingUtils utils,
-      final Set<SimpleFeatureType> simpleFeatureTypes,
-      Supplier<Geometry> currentGeom) {
-    boolean addToOutput;
+  public boolean addEntityToOutput(OSMEntity currentEntity, Supplier<Geometry> currentGeom) {
     if (isContainingSimpleFeatureTypes) {
-      addToOutput = utils.checkGeometryOnSimpleFeatures(currentGeom.get(), simpleFeatureTypes);
+      return utils.checkGeometryOnSimpleFeatures(currentGeom.get(), simpleFeatureTypes);
     } else {
-      addToOutput = true;
+      return filter.map(f -> f.applyOSMGeometry(currentEntity, currentGeom)).orElse(true);
     }
-    return addToOutput;
   }
 }
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/DataRequestExecutor.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/DataRequestExecutor.java
index d47749fc..d0b8c12b 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/DataRequestExecutor.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/DataRequestExecutor.java
@@ -18,7 +18,7 @@
 import org.heigit.bigspatialdata.oshdb.util.time.IsoDateTimeParser;
 import org.heigit.ohsome.filter.FilterExpression;
 import org.heigit.ohsome.ohsomeapi.Application;
-import org.heigit.ohsome.ohsomeapi.controller.rawdata.ElementsGeometry;
+import org.heigit.ohsome.ohsomeapi.controller.dataextraction.elements.ElementsGeometry;
 import org.heigit.ohsome.ohsomeapi.exception.BadRequestException;
 import org.heigit.ohsome.ohsomeapi.exception.ExceptionMessages;
 import org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessingUtils;
@@ -26,8 +26,8 @@
 import org.heigit.ohsome.ohsomeapi.inputprocessing.ProcessingData;
 import org.heigit.ohsome.ohsomeapi.inputprocessing.SimpleFeatureType;
 import org.heigit.ohsome.ohsomeapi.oshdb.DbConnData;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Metadata;
-import org.heigit.ohsome.ohsomeapi.output.rawdataresponse.DataResponse;
+import org.heigit.ohsome.ohsomeapi.output.ExtractionResponse;
+import org.heigit.ohsome.ohsomeapi.output.Metadata;
 import org.wololo.geojson.Feature;
 
 /** Holds executor methods for the following endpoints: /elementsFullHistory, /contributions. */
@@ -50,14 +50,14 @@ public DataRequestExecutor(RequestResource requestResource, ElementsGeometry ele
   /**
    * Performs an OSM data extraction using the full-history of the data.
    * 
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#processParameters()
-   *         processParameters}, {@link
-   *         org.heigit.bigspatialdata.oshdb.util.time.IsoDateTimeParser#parseIsoDateTime(String)
-   *         parseIsoDateTime},
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #processParameters() processParameters},
+   *         {@link org.heigit.bigspatialdata.oshdb.util.time.IsoDateTimeParser
+   *         #parseIsoDateTime(String) parseIsoDateTime},
    *         {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapReducer#stream() stream}, or
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils#streamResponse(
-   *         HttpServletResponse, DataResponse, Stream) streamElementsResponse}
+   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils
+   *         #streamResponse(HttpServletResponse, ExtractionResponse, Stream)
+   *         streamElementsResponse}
    */
   public void extract() throws Exception {
     inputProcessor.getProcessingData().setFullHistory(true);
@@ -110,7 +110,7 @@ public void extract() throws Exception {
     final boolean isContainingSimpleFeatureTypes = processingData.isContainingSimpleFeatureTypes();
     DataExtractionTransformer dataExtractionTransformer = new DataExtractionTransformer(
         isContributionsLatestEndpoint, isContributionsEndpoint, exeUtils, clipGeometries,
-        startTimestamp, utils, simpleFeatureTypes, keysInt, includeTags, includeOSMMetadata,
+        startTimestamp, utils, simpleFeatureTypes, filter, keysInt, includeTags, includeOSMMetadata,
         elementsGeometry, endTimestamp, isContainingSimpleFeatureTypes);
     MapReducer<Feature> contributionPreResult = mapRedContributions
         .flatMap(dataExtractionTransformer::buildChangedFeatures)
@@ -120,8 +120,8 @@ public void extract() throws Exception {
       metadata = new Metadata(null, requestResource.getDescription(),
           inputProcessor.getRequestUrlIfGetRequest(servletRequest));
     }
-    DataResponse osmData = new DataResponse(ATTRIBUTION, Application.API_VERSION, metadata,
-        "FeatureCollection", Collections.emptyList());
+    ExtractionResponse osmData = new ExtractionResponse(ATTRIBUTION, Application.API_VERSION,
+        metadata, "FeatureCollection", Collections.emptyList());
     MapReducer<Feature> snapshotPreResult = null;
     if (!isContributionsEndpoint) {
       // handles cases where valid_from = t_start, valid_to = t_end; i.e. non-modified data
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/ElementsRequestExecutor.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/ElementsRequestExecutor.java
index 7f5aa0c2..653fbd59 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/ElementsRequestExecutor.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/ElementsRequestExecutor.java
@@ -31,13 +31,14 @@
 import org.heigit.bigspatialdata.oshdb.osm.OSMType;
 import org.heigit.bigspatialdata.oshdb.util.OSHDBTag;
 import org.heigit.bigspatialdata.oshdb.util.OSHDBTimestamp;
+import org.heigit.bigspatialdata.oshdb.util.celliterator.ContributionType;
 import org.heigit.bigspatialdata.oshdb.util.geometry.Geo;
 import org.heigit.bigspatialdata.oshdb.util.tagtranslator.TagTranslator;
 import org.heigit.bigspatialdata.oshdb.util.time.TimestampFormatter;
 import org.heigit.ohsome.filter.FilterExpression;
 import org.heigit.ohsome.filter.FilterParser;
 import org.heigit.ohsome.ohsomeapi.Application;
-import org.heigit.ohsome.ohsomeapi.controller.rawdata.ElementsGeometry;
+import org.heigit.ohsome.ohsomeapi.controller.dataextraction.elements.ElementsGeometry;
 import org.heigit.ohsome.ohsomeapi.exception.BadRequestException;
 import org.heigit.ohsome.ohsomeapi.exception.ExceptionMessages;
 import org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils.MatchType;
@@ -48,14 +49,14 @@
 import org.heigit.ohsome.ohsomeapi.inputprocessing.SimpleFeatureType;
 import org.heigit.ohsome.ohsomeapi.oshdb.DbConnData;
 import org.heigit.ohsome.ohsomeapi.oshdb.ExtractMetadata;
+import org.heigit.ohsome.ohsomeapi.output.Attribution;
 import org.heigit.ohsome.ohsomeapi.output.Description;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Attribution;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Metadata;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.elements.ElementsResult;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResult;
-import org.heigit.ohsome.ohsomeapi.output.rawdataresponse.DataResponse;
+import org.heigit.ohsome.ohsomeapi.output.ExtractionResponse;
+import org.heigit.ohsome.ohsomeapi.output.Metadata;
+import org.heigit.ohsome.ohsomeapi.output.Response;
+import org.heigit.ohsome.ohsomeapi.output.elements.ElementsResult;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResponse;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResult;
 import org.heigit.ohsome.ohsomeapi.utils.GroupByBoundaryGeoJsonGenerator;
 import org.locationtech.jts.geom.Geometry;
 import org.locationtech.jts.geom.Polygonal;
@@ -75,17 +76,18 @@ private ElementsRequestExecutor() {
   /**
    * Performs an OSM data extraction.
    * 
-   * @param elemGeom {@link org.heigit.ohsome.ohsomeapi.controller.rawdata.ElementsGeometry
+   * @param elemGeom {@link 
+   *        org.heigit.ohsome.ohsomeapi.controller.dataextraction.elements.ElementsGeometry
    *        ElementsGeometry} defining the geometry of the OSM elements
    * @param servletRequest {@link javax.servlet.http.HttpServletRequest HttpServletRequest} incoming
    *        request object
    * @param servletResponse {@link javax.servlet.http.HttpServletResponse HttpServletResponse]}
    *        outgoing response object
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#processParameters()
-   *         processParameters},
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #processParameters() processParameters},
    *         {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapReducer#stream() stream}, or
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils#streamResponse(HttpServletResponse, DataResponse, Stream)
+   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils
+   *         #streamResponse(HttpServletResponse, ExtractionResponse, Stream)
    *         streamElementsResponse}
    */
   public static void extract(RequestResource requestResource, ElementsGeometry elemGeom,
@@ -125,15 +127,15 @@ public static void extract(RequestResource requestResource, ElementsGeometry ele
         geom = snapshot.getGeometryUnclipped();
       }
       return exeUtils.createOSMFeature(snapshot.getEntity(), geom, properties, keysInt, includeTags,
-          includeOSMMetadata, false, elemGeom, null);
+          includeOSMMetadata, false, elemGeom, EnumSet.noneOf(ContributionType.class));
     }).filter(Objects::nonNull);
     Metadata metadata = null;
     if (processingData.isShowMetadata()) {
       metadata = new Metadata(null, requestResource.getDescription(),
           inputProcessor.getRequestUrlIfGetRequest(servletRequest));
     }
-    DataResponse osmData = new DataResponse(new Attribution(URL, TEXT), Application.API_VERSION,
-        metadata, "FeatureCollection", Collections.emptyList());
+    ExtractionResponse osmData = new ExtractionResponse(new Attribution(URL, TEXT), 
+        Application.API_VERSION, metadata, "FeatureCollection", Collections.emptyList());
     try (Stream<Feature> streamResult = preResult.stream()) {
       exeUtils.streamResponse(servletResponse, osmData, streamResult);
     }
@@ -151,11 +153,10 @@ public static void extract(RequestResource requestResource, ElementsGeometry ele
    * @param isSnapshot whether this request uses the snapshot-view (true), or contribution-view
    *        (false)
    * @param isDensity whether this request is accessed via the /density resource
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws BadRequestException if groupByKey parameter is not given
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#processParameters()
-   *         processParameters}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #processParameters() processParameters}
    */
   public static <P extends Geometry & Polygonal> Response aggregateGroupByBoundaryGroupByTag(
       RequestResource requestResource, HttpServletRequest servletRequest,
@@ -258,13 +259,12 @@ public static <P extends Geometry & Polygonal> Response aggregateGroupByBoundary
    * @param isSnapshot whether this request uses the snapshot-view (true), or contribution-view
    *        (false)
    * @param isDensity whether this request is accessed via the /density resource
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws BadRequestException if groupByKey parameter is not given
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#processParameters()
-   *         processParameters} and
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils#computeResult(RequestResource, MapAggregator)
-   *         computeResult}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #processParameters() processParameters} and
+   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils
+   *         #computeResult(RequestResource, MapAggregator) computeResult}
    */
   public static Response aggregateGroupByTag(RequestResource requestResource,
       HttpServletRequest servletRequest, HttpServletResponse servletResponse, boolean isSnapshot,
@@ -344,12 +344,11 @@ public static Response aggregateGroupByTag(RequestResource requestResource,
    * @param isSnapshot whether this request uses the snapshot-view (true), or contribution-view
    *        (false)
    * @param isDensity whether this request is accessed via the /density resource
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#processParameters()
-   *         processParameters} and
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils#computeResult(RequestResource, MapAggregator)
-   *         computeResult}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #processParameters() processParameters} and
+   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils
+   *         #computeResult(RequestResource, MapAggregator) computeResult}
    */
   public static Response aggregateGroupByType(RequestResource requestResource,
       HttpServletRequest servletRequest, HttpServletResponse servletResponse, boolean isSnapshot,
@@ -405,13 +404,12 @@ public static Response aggregateGroupByType(RequestResource requestResource,
    * @param isSnapshot whether this request uses the snapshot-view (true), or contribution-view
    *        (false)
    * @param isDensity whether this request is accessed via the /density resource
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws BadRequestException if groupByKeys parameter is not given
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#processParameters()
-   *         processParameters} and
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils#computeResult(RequestResource, MapAggregator)
-   *         computeResult}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #processParameters() processParameters} and
+   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils
+   *         #computeResult(RequestResource, MapAggregator) computeResult}
    */
   public static Response aggregateGroupByKey(RequestResource requestResource,
       HttpServletRequest servletRequest, HttpServletResponse servletResponse, boolean isSnapshot,
@@ -497,12 +495,11 @@ public static Response aggregateGroupByKey(RequestResource requestResource,
    *        request object
    * @param servletResponse {@link javax.servlet.http.HttpServletResponse HttpServletResponse]}
    *        outgoing response object
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#processParameters()
-   *         processParameters} and
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils#computeResult(RequestResource, MapAggregator)
-   *         computeResult}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #processParameters() processParameters} and
+   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils
+   *         #computeResult(RequestResource, MapAggregator) computeResult}
    */
   @Deprecated(forRemoval = true)
   public static Response aggregateBasicFiltersRatio(RequestResource requestResource,
@@ -643,12 +640,11 @@ public static Response aggregateBasicFiltersRatio(RequestResource requestResourc
    *        request object
    * @param servletResponse {@link javax.servlet.http.HttpServletResponse HttpServletResponse]}
    *        outgoing response object
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#processParameters()
-   *         processParameters} and
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils#computeResult(RequestResource, MapAggregator)
-   *         computeResult}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #processParameters() processParameters} and
+   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils
+   *         #computeResult(RequestResource, MapAggregator) computeResult}
    */
   public static Response aggregateRatio(RequestResource requestResource,
       HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws Exception {
@@ -685,8 +681,7 @@ public static Response aggregateRatio(RequestResource requestResource,
         new InputProcessor(servletRequest, isSnapshot, isDensity);
     inputProcessorCombined.setProcessingData(processingDataCombined);
     MapReducer<OSMEntitySnapshot> mapRed = inputProcessorCombined.processParameters();
-
-    mapRed = exeUtils.newSnapshotFilter(mapRed, filterExpr1, filterExpr2);
+    mapRed = mapRed.filter(combinedFilter);
     var preResult = mapRed.aggregateByTimestamp().aggregateBy(snapshot -> {
       OSMEntity entity = snapshot.getEntity();
       boolean matches1 = filterExpr1.applyOSMGeometry(entity, snapshot.getGeometry());
@@ -747,11 +742,10 @@ public static Response aggregateRatio(RequestResource requestResource,
    *        request object
    * @param servletResponse {@link javax.servlet.http.HttpServletResponse HttpServletResponse]}
    *        outgoing response object
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws BadRequestException if a boundary parameter (bboxes, bcircles, bpolys) is not defined
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#processParameters()
-   *         processParameters},
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #processParameters() processParameters},
    *         {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator#count() count}, or
    *         {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator#sum() sum}
    */
@@ -860,8 +854,8 @@ public static <P extends Geometry & Polygonal> Response aggregateBasicFiltersRat
           }
           return MatchType.MATCHESNONE;
         }, EnumSet.allOf(MatchType.class)).map(OSMEntitySnapshot::getGeometry);
-    SortedMap<OSHDBCombinedIndex<OSHDBCombinedIndex<OSHDBTimestamp, Integer>, MatchType>, ? extends Number> result =
-        null;
+    SortedMap<OSHDBCombinedIndex<OSHDBCombinedIndex<OSHDBTimestamp, Integer>, MatchType>, ? extends
+        Number> result = null;
     switch (requestResource) {
       case COUNT:
         result = preResult.count();
@@ -939,11 +933,10 @@ public static <P extends Geometry & Polygonal> Response aggregateBasicFiltersRat
    *        request object
    * @param servletResponse {@link javax.servlet.http.HttpServletResponse HttpServletResponse]}
    *        outgoing response object
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response Response}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.Response Response}
    * @throws BadRequestException if a boundary parameter (bboxes, bcircles, bpolys) is not defined
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#processParameters()
-   *         processParameters},
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #processParameters() processParameters},
    *         {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator#count() count}, or
    *         {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator#sum() sum}
    */
@@ -996,7 +989,7 @@ public static <P extends Geometry & Polygonal> Response aggregateRatioGroupByBou
     Map<Integer, P> geoms =
         arrGeoms.stream().collect(Collectors.toMap(arrGeoms::indexOf, geom -> (P) geom));
     var mapRed2 = mapRed.aggregateByTimestamp().aggregateByGeometry(geoms);
-    mapRed2 = exeUtils.newSnapshotFilter(mapRed2, filterExpr1, filterExpr2);
+    mapRed2 = mapRed2.filter(combinedFilter);
     var preResult =
         mapRed2.aggregateBy((SerializableFunction<OSMEntitySnapshot, MatchType>) snapshot -> {
           OSMEntity entity = snapshot.getEntity();
@@ -1013,8 +1006,8 @@ public static <P extends Geometry & Polygonal> Response aggregateRatioGroupByBou
           }
           return MatchType.MATCHESNONE;
         }, EnumSet.allOf(MatchType.class)).map(OSMEntitySnapshot::getGeometry);
-    SortedMap<OSHDBCombinedIndex<OSHDBCombinedIndex<OSHDBTimestamp, Integer>, MatchType>, ? extends Number> result =
-        null;
+    SortedMap<OSHDBCombinedIndex<OSHDBCombinedIndex<OSHDBTimestamp, Integer>, MatchType>, ? extends
+        Number> result = null;
     switch (requestResource) {
       case COUNT:
         result = preResult.count();
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils.java
index 51ddb6b3..950ce959 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils.java
@@ -1,6 +1,5 @@
 package org.heigit.ohsome.ohsomeapi.executor;
 
-import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.core.JsonEncoding;
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.core.JsonGenerator;
@@ -61,9 +60,8 @@
 import org.heigit.bigspatialdata.oshdb.util.tagtranslator.OSMTag;
 import org.heigit.bigspatialdata.oshdb.util.tagtranslator.TagTranslator;
 import org.heigit.bigspatialdata.oshdb.util.time.TimestampFormatter;
-import org.heigit.ohsome.filter.FilterExpression;
 import org.heigit.ohsome.ohsomeapi.Application;
-import org.heigit.ohsome.ohsomeapi.controller.rawdata.ElementsGeometry;
+import org.heigit.ohsome.ohsomeapi.controller.dataextraction.elements.ElementsGeometry;
 import org.heigit.ohsome.ohsomeapi.exception.DatabaseAccessException;
 import org.heigit.ohsome.ohsomeapi.exception.ExceptionMessages;
 import org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor;
@@ -71,30 +69,29 @@
 import org.heigit.ohsome.ohsomeapi.inputprocessing.SimpleFeatureType;
 import org.heigit.ohsome.ohsomeapi.oshdb.DbConnData;
 import org.heigit.ohsome.ohsomeapi.oshdb.ExtractMetadata;
+import org.heigit.ohsome.ohsomeapi.output.Attribution;
 import org.heigit.ohsome.ohsomeapi.output.Description;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Attribution;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Metadata;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.RatioResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.RatioResult;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Result;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.elements.ElementsResult;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByObject;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResult;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.RatioGroupByBoundaryResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.RatioGroupByResult;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.users.UsersResult;
-import org.heigit.ohsome.ohsomeapi.output.rawdataresponse.DataResponse;
+import org.heigit.ohsome.ohsomeapi.output.ExtractionResponse;
+import org.heigit.ohsome.ohsomeapi.output.Metadata;
+import org.heigit.ohsome.ohsomeapi.output.Response;
+import org.heigit.ohsome.ohsomeapi.output.Result;
+import org.heigit.ohsome.ohsomeapi.output.contributions.UsersResult;
+import org.heigit.ohsome.ohsomeapi.output.elements.ElementsResult;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByObject;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResult;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioGroupByBoundaryResponse;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioGroupByResult;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioResponse;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioResult;
 import org.heigit.ohsome.ohsomeapi.utils.GroupByBoundaryGeoJsonGenerator;
 import org.heigit.ohsome.ohsomeapi.utils.RequestUtils;
 import org.locationtech.jts.geom.Envelope;
 import org.locationtech.jts.geom.Geometry;
 import org.locationtech.jts.geom.Lineal;
 import org.locationtech.jts.geom.Polygonal;
+import org.locationtech.jts.geom.PrecisionModel;
 import org.locationtech.jts.geom.Puntal;
-import org.wololo.geojson.LineString;
-import org.wololo.geojson.Point;
-import org.wololo.geojson.Polygon;
+import org.locationtech.jts.precision.GeometryPrecisionReducer;
 import org.wololo.jts2geojson.GeoJSONWriter;
 
 /** Holds helper methods that are used by the executor classes. */
@@ -103,9 +100,7 @@ public class ExecutionUtils {
   private AtomicReference<Boolean> isFirst;
   private final ProcessingData processingData;
   private final DecimalFormat ratioDf = defineDecimalFormat("#.######");
-  private static final Point emptyPoint = new Point(new double[0]);
-  private static final LineString emptyLine = new LineString(new double[0][0]);
-  private static final Polygon emptyPolygon = new Polygon(new double[0][0][0]);
+  private final GeometryPrecisionReducer gpr = createGeometryPrecisionReducer();
 
   /** Applies a filter on the given MapReducer object using the given parameters. */
   public MapReducer<OSMEntitySnapshot> snapshotFilter(MapReducer<OSMEntitySnapshot> mapRed,
@@ -132,31 +127,6 @@ public MapReducer<OSMEntitySnapshot> snapshotFilter(MapReducer<OSMEntitySnapshot
             || snapshotMatches(snapshot, osmTypes2, simpleFeatureTypes2, keysInt2, valuesInt2));
   }
 
-  /** Applies a filter on the given MapReducer object using the given filter expressions. */
-  public MapReducer<OSMEntitySnapshot> newSnapshotFilter(MapReducer<OSMEntitySnapshot> mapRed,
-      FilterExpression filterExpr1, FilterExpression filterExpr2) {
-    return mapRed.filter(snapshot -> {
-      OSMEntity entity = snapshot.getEntity();
-      return filterExpr1.applyOSMGeometry(entity, snapshot::getGeometry)
-          || filterExpr2.applyOSMGeometry(entity, snapshot::getGeometry);
-    });
-  }
-
-  /**
-   * Applies a filter on the given MapReducer object using the given filter expressions. Used in
-   * /ratio/groupBy/boundary requests.
-   */
-  public MapAggregator<OSHDBCombinedIndex<OSHDBTimestamp, Integer>, OSMEntitySnapshot>
-      newSnapshotFilter(
-      MapAggregator<OSHDBCombinedIndex<OSHDBTimestamp, Integer>, OSMEntitySnapshot> mapRed,
-      FilterExpression filterExpr1, FilterExpression filterExpr2) {
-    return mapRed.filter(snapshot -> {
-      OSMEntity entity = snapshot.getEntity();
-      return filterExpr1.applyOSMGeometry(entity, snapshot::getGeometry)
-          || filterExpr2.applyOSMGeometry(entity, snapshot::getGeometry);
-    });
-  }
-
   /** Compares the type(s) and tag(s) of the given snapshot to the given types|tags. */
   public boolean snapshotMatches(OSMEntitySnapshot snapshot, Set<OSMType> osmTypes,
       Set<SimpleFeatureType> simpleFeatureTypes, Integer[] keysInt, Integer[] valuesInt) {
@@ -255,21 +225,20 @@ SortedMap<V, SortedMap<U, A>> nest(Map<OSHDBCombinedIndex<U, V>, A> result) {
    *         #writeStreamResponse(ThreadLocal, Stream, ThreadLocal, ServletOutputStream)
    *         writeStreamResponse}, {@link javax.servlet.ServletOutputStream#print(String) print},
    *         and {@link javax.servlet.ServletResponse#flushBuffer() flushBuffer}
-   * @throws ExecutionException thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils#writeStreamResponse(
-   *         ThreadLocal, Stream, ThreadLocal, ServletOutputStream) writeStreamResponse}
-   * @throws InterruptedException thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils#writeStreamResponse(
-   *         ThreadLocal, Stream, ThreadLocal, ServletOutputStream) writeStreamResponse}
+   * @throws ExecutionException thrown by {@link org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils
+   *         #writeStreamResponse(ThreadLocal, Stream, ThreadLocal, ServletOutputStream)
+   *         writeStreamResponse}
+   * @throws InterruptedException thrown by {@link
+   *         org.heigit.ohsome.ohsomeapi.executor.ExecutionUtils#writeStreamResponse(ThreadLocal,
+   *         Stream, ThreadLocal, ServletOutputStream) writeStreamResponse}
    */
-  public void streamResponse(HttpServletResponse servletResponse, DataResponse osmData,
+  public void streamResponse(HttpServletResponse servletResponse, ExtractionResponse osmData,
       Stream<org.wololo.geojson.Feature> resultStream) throws Exception {
     JsonFactory jsonFactory = new JsonFactory();
     ByteArrayOutputStream tempStream = new ByteArrayOutputStream();
 
     ObjectMapper objMapper = new ObjectMapper();
     objMapper.enable(SerializationFeature.INDENT_OUTPUT);
-    objMapper.setSerializationInclusion(Include.NON_NULL);
     jsonFactory.createGenerator(tempStream, JsonEncoding.UTF8).setCodec(objMapper)
         .writeObject(osmData);
 
@@ -431,46 +400,33 @@ public org.wololo.geojson.Feature createOSMFeature(OSMEntity entity, Geometry ge
     }
     properties.put("@osmId", entity.getType().toString().toLowerCase() + "/" + entity.getId());
     GeoJSONWriter gjw = new GeoJSONWriter();
-    boolean deletionHandling =
-        isContributionsEndpoint && contributionTypes.contains(ContributionType.DELETION);
+    if (isContributionsEndpoint && contributionTypes.contains(ContributionType.DELETION)) {
+      return new org.wololo.geojson.Feature(null, properties);
+    }
     Geometry outputGeometry;
     switch (elemGeom) {
       case BBOX:
-        if (deletionHandling) {
-          return new org.wololo.geojson.Feature(emptyPolygon, properties);
-        }
         Envelope envelope = geometry.getEnvelopeInternal();
         OSHDBBoundingBox bbox = OSHDBGeometryBuilder.boundingBoxOf(envelope);
         outputGeometry = OSHDBGeometryBuilder.getGeometry(bbox);
         break;
       case CENTROID:
-        if (deletionHandling) {
-          return new org.wololo.geojson.Feature(emptyPoint, properties);
-        }
         outputGeometry = geometry.getCentroid();
         break;
       case RAW:
       default:
-        if (deletionHandling && geometry.getGeometryType().contains("Polygon")) {
-          return new org.wololo.geojson.Feature(emptyPolygon, properties);
-        }
-        if (deletionHandling && geometry.getGeometryType().contains("LineString")) {
-          return new org.wololo.geojson.Feature(emptyLine, properties);
-        }
-        if (deletionHandling && geometry.getGeometryType().contains("Point")) {
-          return new org.wololo.geojson.Feature(emptyPoint, properties);
-        }
         outputGeometry = geometry;
     }
-    return new org.wololo.geojson.Feature(gjw.write(outputGeometry), properties);
+    return new org.wololo.geojson.Feature(gjw.write(gpr.reduce(outputGeometry)),
+        properties);
   }
 
   /**
    * Computes the result depending on the <code>RequestResource</code> using a
    * <code>MapAggregator</code> object as input and returning a <code>SortedMap</code>.
    * 
-   * @throws Exception thrown by
-   *         {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator#count() count}, and
+   * @throws Exception thrown by {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator
+   *         #count() count}, and
    *         {@link org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator#sum() sum}
    */
   @SuppressWarnings({"unchecked"}) // intentionally suppressed as type format is valid
@@ -991,21 +947,32 @@ private Map<String, Object> addAdditionalProperties(OSMEntity entity,
     properties.put("@changesetId", entity.getChangesetId());
     if (isContributionsEndpoint) {
       if (contributionTypes.contains(ContributionType.CREATION)) {
-        properties.put("@creation", "true");
+        properties.put("@creation", true);
       }
       if (contributionTypes.contains(ContributionType.DELETION)) {
-        properties.put("@deletion", "true");
+        properties.put("@deletion", true);
       }
       if (contributionTypes.contains(ContributionType.TAG_CHANGE)) {
-        properties.put("@tagChange", "true");
+        properties.put("@tagChange", true);
       }
       if (contributionTypes.contains(ContributionType.GEOMETRY_CHANGE)) {
-        properties.put("@geometryChange", "true");
+        properties.put("@geometryChange", true);
       }
     }
     return properties;
   }
 
+  /**
+   * Returns a new geometry precision reducer using a precision of 7 digits, having an activated
+   * point-wise mode and a deactivated remove-collapsed-components mode.
+   */
+  private GeometryPrecisionReducer createGeometryPrecisionReducer() {
+    var gpr = new GeometryPrecisionReducer(new PrecisionModel(1E7));
+    gpr.setPointwise(true);
+    gpr.setRemoveCollapsedComponents(false);
+    return gpr;
+  }
+  
   static Set<Integer> keysToKeysInt(String[] keys, TagTranslator tt) {
     final Set<Integer> keysInt;
     if (keys.length != 0) {
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/MetadataRequestExecutor.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/MetadataRequestExecutor.java
index e4d9c8b0..efd95cec 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/MetadataRequestExecutor.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/MetadataRequestExecutor.java
@@ -4,10 +4,10 @@
 import org.heigit.ohsome.ohsomeapi.Application;
 import org.heigit.ohsome.ohsomeapi.exception.BadRequestException;
 import org.heigit.ohsome.ohsomeapi.oshdb.ExtractMetadata;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Attribution;
-import org.heigit.ohsome.ohsomeapi.output.metadataresponse.ExtractRegion;
-import org.heigit.ohsome.ohsomeapi.output.metadataresponse.MetadataResponse;
-import org.heigit.ohsome.ohsomeapi.output.metadataresponse.TemporalExtent;
+import org.heigit.ohsome.ohsomeapi.output.Attribution;
+import org.heigit.ohsome.ohsomeapi.output.metadata.ExtractRegion;
+import org.heigit.ohsome.ohsomeapi.output.metadata.MetadataResponse;
+import org.heigit.ohsome.ohsomeapi.output.metadata.TemporalExtent;
 
 /** Includes the execute method for requests mapped to /metadata. */
 public class MetadataRequestExecutor {
@@ -15,8 +15,7 @@ public class MetadataRequestExecutor {
   /**
    * Returns the metadata of the underlying extract-file.
    * 
-   * @return {@link org.heigit.ohsome.ohsomeapi.output.metadataresponse.MetadataResponse
-   *         MetadataResponse}
+   * @return {@link org.heigit.ohsome.ohsomeapi.output.metadata.MetadataResponse MetadataResponse}
    * @throws BadRequestException if parameters are given in the query.
    */
   public static MetadataResponse executeGetMetadata(HttpServletRequest servletRequest) {
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/RequestExecutor.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/RequestExecutor.java
index 86aacc93..6b2f85b0 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/RequestExecutor.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/RequestExecutor.java
@@ -5,7 +5,7 @@
 import javax.servlet.http.HttpServletResponse;
 import lombok.RequiredArgsConstructor;
 import org.heigit.ohsome.ohsomeapi.oshdb.ExtractMetadata;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Attribution;
+import org.heigit.ohsome.ohsomeapi.output.Attribution;
 
 @RequiredArgsConstructor
 public abstract class RequestExecutor {
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/UsersRequestExecutor.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/UsersRequestExecutor.java
index 9b2b0a49..2c1572dd 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/UsersRequestExecutor.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/UsersRequestExecutor.java
@@ -32,14 +32,14 @@
 import org.heigit.ohsome.ohsomeapi.inputprocessing.ProcessingData;
 import org.heigit.ohsome.ohsomeapi.oshdb.DbConnData;
 import org.heigit.ohsome.ohsomeapi.oshdb.ExtractMetadata;
+import org.heigit.ohsome.ohsomeapi.output.Attribution;
+import org.heigit.ohsome.ohsomeapi.output.DefaultAggregationResponse;
 import org.heigit.ohsome.ohsomeapi.output.Description;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Attribution;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.DefaultAggregationResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Metadata;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResponse;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResult;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.users.UsersResult;
+import org.heigit.ohsome.ohsomeapi.output.Metadata;
+import org.heigit.ohsome.ohsomeapi.output.Response;
+import org.heigit.ohsome.ohsomeapi.output.contributions.UsersResult;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResponse;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResult;
 import org.heigit.ohsome.ohsomeapi.utils.GroupByBoundaryGeoJsonGenerator;
 import org.locationtech.jts.geom.Geometry;
 import org.locationtech.jts.geom.Polygonal;
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/filter/RequestFilter.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/filter/RequestFilter.java
index 30ac667f..82788370 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/filter/RequestFilter.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/filter/RequestFilter.java
@@ -22,13 +22,11 @@
 public class RequestFilter extends OncePerRequestFilter {
 
   /**
-   * @throws IOException thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.utils.RequestUtils#extractOSHDBMetadata()
-   *         extractOSHDBMetadata}, and
+   * @throws IOException thrown by {@link org.heigit.ohsome.ohsomeapi.utils.RequestUtils
+   *         #extractOSHDBMetadata() extractOSHDBMetadata}, and
    *         {@link javax.servlet.ServletRequest#setCharacterEncoding(String) setCharacterEncoding}
-   * @throws ServletException thrown by
-   *         {@link javax.servlet.FilterChain#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse)
-   *         doFilter}
+   * @throws ServletException thrown by {@link javax.servlet.FilterChain
+   *         #doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse) doFilter}
    */
   @Override
   protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder.java
index b595a2a5..df3931bb 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilder.java
@@ -312,9 +312,9 @@ private Geometry unifyPolys(Collection<Geometry> geometries) {
    * Creates a boundary ID value from the 'id' field in the given <code>JsonObject</code>.
    * 
    * @param jsonObject <code>JsonObject</code> where the 'id' value is extracted from
-   * @param inputProcessor used for
-   *        {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessingUtils#checkCustomBoundaryId(String)
-   *        checkCustomBoundaryId}
+   * @param inputProcessor used for {@link
+   *        org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessingUtils
+   *        #checkCustomBoundaryId(String) checkCustomBoundaryId}
    * @return <code>Object</code> having the custom id of type <code>String</code> or
    *         <code>Integer</code>
    */
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessingUtils.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessingUtils.java
index 4b93808a..30186fde 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessingUtils.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessingUtils.java
@@ -36,12 +36,11 @@ public class InputProcessingUtils {
   private String[] toTimestamps = null;
 
   /**
-   * Finds and returns the EPSG code of the given point, which is needed for
-   * {@link org.heigit.ohsome.ohsomeapi.inputprocessing.GeometryBuilder#createCircularPolygons(String[] bcircles)
-   * createCircularPolygons}.
+   * Finds and returns the EPSG code of the given point, which is needed for {@link
+   * org.heigit.ohsome.ohsomeapi.inputprocessing.GeometryBuilder#createCircularPolygons(String[]
+   * bcircles) createCircularPolygons}.
    * 
-   * <p>
-   * Adapted code from UTMCodeFromLonLat.java class in the osmatrix project (Â© by Michael Auer)
+   * <p>Adapted code from UTMCodeFromLonLat.java class in the osmatrix project (Â© by Michael Auer)
    * 
    * @param lon Longitude coordinate of the point.
    * @param lat Latitude coordinate of the point.
@@ -206,8 +205,7 @@ public String[] defineToTimestamps(String[] timeData) {
    * <li><strong>invalid</strong>: throws BadRequestException</li>
    * </ul>
    * 
-   * <p>
-   * For clarification: the format YYYY-MM-DDThh:mm:ss can be applied to any format, where a
+   * <p>For clarification: the format YYYY-MM-DDThh:mm:ss can be applied to any format, where a
    * timestamp is used and # is a replacement holder for "no value". Note that the positioning and
    * using of the forward slash '/' is very important.
    * 
@@ -414,8 +412,8 @@ protected void checkTemporalExtend(String... timeInfo) {
       start = IsoDateTimeParser.parseIsoDateTime(ExtractMetadata.fromTstamp).toEpochSecond();
       end = IsoDateTimeParser.parseIsoDateTime(ExtractMetadata.toTstamp).toEpochSecond();
     } catch (Exception e) {
-      throw new RuntimeException(
-          "The ISO 8601 Date or the combined Date-Time String cannot be converted into a UTC based ZonedDateTime Object");
+      throw new RuntimeException("The ISO 8601 Date or the combined Date-Time String cannot be"
+          + " converted into a UTC based ZonedDateTime Object");
     }
     for (String timestamp : timeInfo) {
       try {
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor.java
index 9686ca3d..33b64960 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessor.java
@@ -45,10 +45,11 @@
 
 /**
  * Holds general input processing and validation methods and validates specific parameters given by
- * the request. Uses geometry methods from
- * {@link org.heigit.ohsome.ohsomeapi.inputprocessing.GeometryBuilder GeometryBuilder} and
- * inputProcessingUtils from {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessingUtils
- * InputProcessingUtils}. Throws exceptions depending on their validity.
+ * the request. Uses geometry methods from {@link
+ * org.heigit.ohsome.ohsomeapi.inputprocessing.GeometryBuilder GeometryBuilder} and
+ * inputProcessingUtils from {@link
+ * org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessingUtils InputProcessingUtils}. Throws
+ * exceptions depending on their validity.
  */
 public class InputProcessor {
 
@@ -96,9 +97,8 @@ public InputProcessor(HttpServletRequest servletRequest, boolean isSnapshot, boo
   }
 
   /**
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#processParameters(ComputeMode)
-   *         processParameters}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #processParameters(ComputeMode) processParameters}
    */
   public <T extends OSHDBMapReducible> MapReducer<T> processParameters() throws Exception {
     return this.processParameters(null);
@@ -113,9 +113,8 @@ public <T extends OSHDBMapReducible> MapReducer<T> processParameters() throws Ex
    *         format, if the geometry of given boundary cannot be parsed for the creation of the
    *         response GeoJSON or if the keys, values and types parameters are not empty, while the
    *         filter parameter is set.
-   * @throws Exception thrown by
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#extractTime(MapReducer, String[], boolean)
-   *         extractTime}
+   * @throws Exception thrown by {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #extractTime(MapReducer, String[], boolean) extractTime}
    */
   @SuppressWarnings("unchecked") // unchecked to allow cast of (MapReducer<T>) to mapRed
   public <T extends OSHDBMapReducible> MapReducer<T> processParameters(ComputeMode forceComputeMode)
@@ -442,9 +441,8 @@ public String getRequestUrlIfGetRequest(HttpServletRequest servletRequest) {
    * Applies respective Puntal|Lineal|Polygonal filter(s) on features of the given MapReducer.
    *
    * @return MapReducer with filtered geometries
-   * @throws RuntimeException if
-   *         {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor#filterOnSimpleFeatures(Mappable)
-   *         filterOnSimpleFeatures} was called on mapped entries
+   * @throws RuntimeException if {@link org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor
+   *         #filterOnSimpleFeatures(Mappable) filterOnSimpleFeatures} was called on mapped entries
    */
   // suppressed, as filter always returns the same mappable type T
   @SuppressWarnings("unchecked")
@@ -535,9 +533,8 @@ private MapReducer<? extends OSHDBMapReducible> extractKeysValues(
    * (in case of isSnapshot=false).
    * 
    * @throws BadRequestException if the time format is invalid
-   * @throws Exception thrown by {@link
-   *         org.heigit.bigspatialdata.oshdb.util.time.IsoDateTimeParser#parseIsoDateTime(String)
-   *         parseIsoDateTime}
+   * @throws Exception thrown by {@link org.heigit.bigspatialdata.oshdb.util.time.IsoDateTimeParser
+   *         #parseIsoDateTime(String) parseIsoDateTime}
    */
   private MapReducer<? extends OSHDBMapReducible> extractTime(
       MapReducer<? extends OSHDBMapReducible> mapRed, String[] time, boolean isSnapshot)
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/ProcessingData.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/ProcessingData.java
index 3b0922a1..3f9cb431 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/ProcessingData.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/ProcessingData.java
@@ -11,7 +11,7 @@
 import org.heigit.ohsome.ohsomeapi.executor.RequestParameters;
 import org.locationtech.jts.geom.Geometry;
 
-/** Holds the relevant objects for processing the request and creating the response. */
+/** Holds the relevant objects for processing the request and creating the response.*/
 @Getter
 @Setter
 public class ProcessingData {
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/ResourceParameters.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/ResourceParameters.java
index 09205501..bfdaf7e3 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/ResourceParameters.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/ResourceParameters.java
@@ -15,13 +15,12 @@ private ResourceParameters() {
    * Checks the resource of the request and gives back a list of available parameters for this
    * resource.
    *
-   * <p>
-   * Note that some resources don't use this method, but implement their own checks. One example for
-   * this is the metadata request in
-   * {@link MetadataRequestExecutor#executeGetMetadata(HttpServletRequest) executeGetMetadata}.
+   * <p>Note that some resources don't use this method, but implement their own checks. One example 
+   * for this is the metadata request in {@link MetadataRequestExecutor
+   * #executeGetMetadata(HttpServletRequest) executeGetMetadata}.
    * 
-   * @return a list of of available parameters for the given resource.
    * @param servletRequest
+   * @return a list of of available parameters for the given resource.
    */
   public static List<String> getResourceSpecificParams(HttpServletRequest servletRequest) {
     String uri = servletRequest.getRequestURI();
@@ -62,9 +61,9 @@ public static List<String> getResourceSpecificParams(HttpServletRequest servletR
   /**
    * Checks, if the request contains unexpected parameters for this resource.
    * 
-   * @return a list of unexpected parameters
    * @param servletRequest
    * @param resourceParams
+   * @return a list of unexpected parameters
    */
   public static List<String> checkUnexpectedParams(HttpServletRequest servletRequest,
       List<String> resourceParams) {
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/StringSimilarity.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/StringSimilarity.java
index 92df0a2b..fc240938 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/StringSimilarity.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/inputprocessing/StringSimilarity.java
@@ -23,11 +23,9 @@ private StringSimilarity() {
    * considered. If all comparisons give a fuzzy score lower than 5, it returns only a message of
    * "unknown parameter" without suggestions.
    * 
-   * <p>
-   * For example:
+   * <p>For example:
    * 
-   * <p>
-   * <ul>
+   * <p><ul>
    * <li>Given the false parameter "metadata" for the resource "groupByTag", it returns the
    * suggestions "showMetadata" and "timeout", which are the only two matches with a score higher
    * than 4.</li>
@@ -40,15 +38,14 @@ private StringSimilarity() {
    * a message of "unknown parameter" without suggestions.</li>
    * </ul>
    * 
-   * <p>
-   * <strong>Warning: Given typical mistyped parameters like "froupByKeys" or "fgroupByKeys" for the
-   * resource "groupByKey", it returns only a message of "unknown parameter" without suggestions
+   * <p><strong>Warning: Given typical mistyped parameters like "froupByKeys" or "fgroupByKeys" for 
+   * the resource "groupByKey", it returns only a message of "unknown parameter" without suggestions
    * despite the similarity to the right available parameter. This is because the Fuzzy Score
    * algorithm matches the chars of the two strings from left to right.</strong>
    * 
-   * @return a String containing up to two suggested parameter if available.
    * @param parameter - request parameter to compare
    * @param possibleParameters - list of possible parameters
+   * @return a String containing up to two suggested parameter if available.
    */
   public static String findSimilarParameters(String parameter, List<String> possibleParameters) {
     ArrayList<FuzzyScoreObject> scoreHigherThanFour = new ArrayList<>();
@@ -85,10 +82,10 @@ public static String findSimilarParameters(String parameter, List<String> possib
    * Sorts the suggested parameters, which are already sorted by the fuzzy matching score, by the
    * difference in length between the requested parameter and the suggested parameters.
    * 
-   * @return an ArrayList of suggested parameters sorted by the difference in length between the
-   *         requested parameter and the suggested parameters.
    * @param parameter - request parameter
    * @param possibleParams - list of possible parameters
+   * @return an ArrayList of suggested parameters sorted by the difference in length between the
+   *        requested parameter and the suggested parameters.
    */
   private static ArrayList<FuzzyScoreObject> sortParamsByLength(String parameter,
       ArrayList<FuzzyScoreObject> possibleParams) {
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/Attribution.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/Attribution.java
similarity index 88%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/Attribution.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/Attribution.java
index 91e2a49f..cbfa8908 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/Attribution.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/Attribution.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse;
+package org.heigit.ohsome.ohsomeapi.output;
 
 import io.swagger.annotations.ApiModelProperty;
 import lombok.AllArgsConstructor;
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/DefaultAggregationResponse.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/DefaultAggregationResponse.java
similarity index 88%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/DefaultAggregationResponse.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/DefaultAggregationResponse.java
index a25d50a3..710fc4fb 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/DefaultAggregationResponse.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/DefaultAggregationResponse.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse;
+package org.heigit.ohsome.ohsomeapi.output;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
@@ -10,10 +10,9 @@
 
 /**
  * Represents the outer JSON response object for the data aggregation requests that do not use the
- * /groupBy resource. It contains attribution info, the version of the api, optional
- * {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Metadata Metadata} and the
- * {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.elements.ElementsResult
- * ElementsResult} objects.
+ * /groupBy resource. It contains attribution info, the version of the api, optional {@link
+ * org.heigit.ohsome.ohsomeapi.output.Metadata Metadata} and the {@link
+ * org.heigit.ohsome.ohsomeapi.output.elements.ElementsResult ElementsResult} objects.
  */
 @Getter
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/rawdataresponse/DataResponse.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ExtractionResponse.java
similarity index 71%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/rawdataresponse/DataResponse.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ExtractionResponse.java
index 0507ad7c..1610cae8 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/rawdataresponse/DataResponse.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ExtractionResponse.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.output.rawdataresponse;
+package org.heigit.ohsome.ohsomeapi.output;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
@@ -6,18 +6,16 @@
 import java.util.List;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Attribution;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Metadata;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response;
 import org.wololo.geojson.Feature;
 
 /**
- * Represents the whole GeoJSON response object for the data-extraction endpoints.
+ * Represents the whole GeoJSON response object for the data-extraction and contribution endpoints
+ * that always extract the data as GeoJSON, e.g. /elements/geometry or /contributions/geometry.
  */
 @JsonInclude(Include.NON_NULL)
 @Getter
 @AllArgsConstructor
-public class DataResponse implements Response {
+public class ExtractionResponse implements Response {
 
   @ApiModelProperty(notes = "License and copyright info", required = true)
   private Attribution attribution;
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/Metadata.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/Metadata.java
similarity index 92%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/Metadata.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/Metadata.java
index 73063a29..89e9f496 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/Metadata.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/Metadata.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse;
+package org.heigit.ohsome.ohsomeapi.output;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/Response.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/Response.java
new file mode 100644
index 00000000..80c3c4ca
--- /dev/null
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/Response.java
@@ -0,0 +1,22 @@
+package org.heigit.ohsome.ohsomeapi.output;
+
+/**
+ * Interface for all Response classes.
+ * <ul>
+ * <li>{@link org.heigit.ohsome.ohsomeapi.output.DefaultAggregationResponse
+ * DefaultAggregationResponse}</li>
+ * <li>{@link org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResponse GroupByResponse}</li>
+ * <li>{@link org.heigit.ohsome.ohsomeapi.output.ratio.RatioGroupByBoundaryResponse
+ * RatioGroupByBoundaryResponse}</li>
+ * <li>{@link org.heigit.ohsome.ohsomeapi.output.ratio.RatioResponse RatioResponse}</li>
+ * <li>{@link org.heigit.ohsome.ohsomeapi.output.ExtractionResponse DataResponse}</li>
+ * </ul>
+ */
+public interface Response {
+
+  Attribution getAttribution();
+
+  String getApiVersion();
+
+  Metadata getMetadata();
+}
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/Result.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/Result.java
new file mode 100644
index 00000000..23980e1c
--- /dev/null
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/Result.java
@@ -0,0 +1,13 @@
+package org.heigit.ohsome.ohsomeapi.output;
+
+/**
+ * Interface for two Result objects.
+ * <ul>
+ * <li>{@link org.heigit.ohsome.ohsomeapi.output.elements.ElementsResult ElementsResult}</li>
+ * <li>{@link org.heigit.ohsome.ohsomeapi.output.ratio.RatioResult RatioResult}</li>
+ * </ul>
+ */
+public interface Result {
+
+  double getValue();
+}
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/users/UsersResult.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/contributions/UsersResult.java
similarity index 84%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/users/UsersResult.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/contributions/UsersResult.java
index 6dfb0926..b48c8442 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/users/UsersResult.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/contributions/UsersResult.java
@@ -1,11 +1,11 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.users;
+package org.heigit.ohsome.ohsomeapi.output.contributions;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import io.swagger.annotations.ApiModelProperty;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Result;
+import org.heigit.ohsome.ohsomeapi.output.Result;
 
 /**
  * Represents the result JSON object for the /users resource containing the from timestamp together
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/Response.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/Response.java
deleted file mode 100644
index b93ad170..00000000
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/Response.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse;
-
-/**
- * Interface for all Response classes.
- * <ul>
- * <li>{@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.DefaultAggregationResponse
- * DefaultAggregationResponse}</li>
- * <li>{@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResponse
- * GroupByResponse}</li>
- * <li>{@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.RatioGroupByBoundaryResponse
- * RatioGroupByBoundaryResponse}</li>
- * <li>{@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.RatioResponse
- * RatioResponse}</li>
- * <li>{@link org.heigit.ohsome.ohsomeapi.output.rawdataresponse.DataResponse
- * DataResponse}</li>
- * </ul>
- */
-public interface Response {
-
-  Attribution getAttribution();
-
-  String getApiVersion();
-
-  Metadata getMetadata();
-}
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/Result.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/Result.java
deleted file mode 100644
index 25e7ca79..00000000
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/Result.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse;
-
-/**
- * Interface for two Result objects.
- * <ul>
- * <li>{@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.elements.ElementsResult
- * ElementsResult}</li>
- * <li>{@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.RatioResult
- * RatioResult}</li>
- * </ul>
- */
-public interface Result {
-
-  double getValue();
-}
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/elements/ElementsResult.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/elements/ElementsResult.java
similarity index 79%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/elements/ElementsResult.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/elements/ElementsResult.java
index 094606c2..b2945758 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/elements/ElementsResult.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/elements/ElementsResult.java
@@ -1,9 +1,9 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.elements;
+package org.heigit.ohsome.ohsomeapi.output.elements;
 
 import io.swagger.annotations.ApiModelProperty;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Result;
+import org.heigit.ohsome.ohsomeapi.output.Result;
 
 
 /**
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/GroupByObject.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/groupby/GroupByObject.java
similarity index 52%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/GroupByObject.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/groupby/GroupByObject.java
index 3ad9fe22..b88cbc20 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/GroupByObject.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/groupby/GroupByObject.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse;
+package org.heigit.ohsome.ohsomeapi.output.groupby;
 
 import io.swagger.annotations.ApiModelProperty;
 import lombok.AllArgsConstructor;
@@ -7,10 +7,8 @@
 /**
  * Abstract class used by the groupByResult classes:
  * <ul>
- * <li>{@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResult
- * GroupByResult}</li>
- * <li>{@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.RatioGroupByResult
- * RatioGroupByResult}</li>
+ * <li>{@link org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResult GroupByResult}</li>
+ * <li>{@link org.heigit.ohsome.ohsomeapi.output.ratio.RatioGroupByResult RatioGroupByResult}</li>
  * </ul>
  */
 @Getter
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/GroupByResponse.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/groupby/GroupByResponse.java
similarity index 71%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/GroupByResponse.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/groupby/GroupByResponse.java
index 82d25d6f..963d6852 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/GroupByResponse.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/groupby/GroupByResponse.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse;
+package org.heigit.ohsome.ohsomeapi.output.groupby;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
@@ -7,20 +7,19 @@
 import lombok.Getter;
 import lombok.NoArgsConstructor;
 import org.geojson.Feature;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Attribution;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Metadata;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response;
+import org.heigit.ohsome.ohsomeapi.output.Attribution;
+import org.heigit.ohsome.ohsomeapi.output.Metadata;
+import org.heigit.ohsome.ohsomeapi.output.Response;
 
 
 /**
  * Represents the whole JSON response object for the data aggregation response using the
- * count|length|area|perimeter/groupBy resource. It contains an optional
- * {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Metadata Metadata}, the
- * requested
- * {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResult
- * GroupByResult} for a JSON response and an identifier of the object. If the output format is
- * GeoJSON, the response includes a {@link org.geojson.Feature Feature} array, which holds the
- * respective objects with their timestamp-value pairs.
+ * count|length|area|perimeter/groupBy resource. It contains an optional {@link 
+ * org.heigit.ohsome.ohsomeapi.output.Metadata Metadata}, the requested {@link 
+ * org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResult GroupByResult} for a JSON response and 
+ * an identifier of the object. If the output format is GeoJSON, the response includes a {@link 
+ * org.geojson.Feature Feature} array, which holds the respective objects with their 
+ * timestamp-value pairs.
  */
 @Getter
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
@@ -49,7 +48,7 @@ public GroupByResponse(Attribution attribution, String apiVersion, Metadata meta
     this.groupByResult = groupByUserResult;
   }
 
-  /** Static factory method returning the whole GeoJSON response. */
+  /** Static factory method returning the whole GeoJSON response.*/
   public static GroupByResponse of(Attribution attribution, String apiVersion, Metadata metadata,
       String type, Feature[] features) {
     GroupByResponse response = new GroupByResponse();
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/GroupByResult.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/groupby/GroupByResult.java
similarity index 59%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/GroupByResult.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/groupby/GroupByResult.java
index a6a7d809..1bb5790d 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/GroupByResult.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/groupby/GroupByResult.java
@@ -1,13 +1,13 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse;
+package org.heigit.ohsome.ohsomeapi.output.groupby;
 
 import io.swagger.annotations.ApiModelProperty;
 import lombok.Getter;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Result;
+import org.heigit.ohsome.ohsomeapi.output.Result;
 
 /**
  * Represents the groupBy result JSON object containing the groupBy value and the respective
- * {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Result Result} objects. The
- * GroupByResult is only used in responses for groupBy requests.
+ * {@link org.heigit.ohsome.ohsomeapi.output.Result Result} objects. The GroupByResult is only used 
+ * in responses for groupBy requests.
  */
 @Getter
 public class GroupByResult extends GroupByObject {
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadataresponse/ExtractRegion.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadata/ExtractRegion.java
similarity index 73%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadataresponse/ExtractRegion.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadata/ExtractRegion.java
index 9ec465ef..c91f51bf 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadataresponse/ExtractRegion.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadata/ExtractRegion.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.output.metadataresponse;
+package org.heigit.ohsome.ohsomeapi.output.metadata;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import io.swagger.annotations.ApiModelProperty;
@@ -6,9 +6,9 @@
 import lombok.Getter;
 
 /**
- * Represents the result JSON object containing the spatial extent as GeoJSON, the
- * {@link org.heigit.ohsome.ohsomeapi.output.metadataresponse.TemporalExtent TemporalExtent} and the
- * replication sequence number of the data-extract.
+ * Represents the result JSON object containing the spatial extent as GeoJSON, the {@link
+ * org.heigit.ohsome.ohsomeapi.output.metadata.TemporalExtent TemporalExtent} and the replication
+ * sequence number of the data-extract.
  */
 @Getter
 @AllArgsConstructor
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadataresponse/MetadataResponse.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadata/MetadataResponse.java
similarity index 77%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadataresponse/MetadataResponse.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadata/MetadataResponse.java
index fd2ae650..1585e560 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadataresponse/MetadataResponse.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadata/MetadataResponse.java
@@ -1,16 +1,16 @@
-package org.heigit.ohsome.ohsomeapi.output.metadataresponse;
+package org.heigit.ohsome.ohsomeapi.output.metadata;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import io.swagger.annotations.ApiModelProperty;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Attribution;
+import org.heigit.ohsome.ohsomeapi.output.Attribution;
 
 /**
  * Represents the JSON response object for the /metadata request. It contains information about the
- * attribution, the version of the API and the
- * {@link org.heigit.ohsome.ohsomeapi.output.metadataresponse.ExtractRegion ExtractRegion}.
+ * attribution, the version of the API and the {@link
+ * org.heigit.ohsome.ohsomeapi.output.metadata.ExtractRegion ExtractRegion}.
  */
 @Getter
 @AllArgsConstructor
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadataresponse/TemporalExtent.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadata/TemporalExtent.java
similarity index 89%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadataresponse/TemporalExtent.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadata/TemporalExtent.java
index 0915591b..6ddf9fb6 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadataresponse/TemporalExtent.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/metadata/TemporalExtent.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.output.metadataresponse;
+package org.heigit.ohsome.ohsomeapi.output.metadata;
 
 import io.swagger.annotations.ApiModelProperty;
 import lombok.AllArgsConstructor;
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/RatioGroupByBoundaryResponse.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ratio/RatioGroupByBoundaryResponse.java
similarity index 70%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/RatioGroupByBoundaryResponse.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ratio/RatioGroupByBoundaryResponse.java
index 47ac2fd4..1f740907 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/RatioGroupByBoundaryResponse.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ratio/RatioGroupByBoundaryResponse.java
@@ -1,4 +1,4 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse;
+package org.heigit.ohsome.ohsomeapi.output.ratio;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
@@ -7,20 +7,19 @@
 import lombok.Getter;
 import lombok.NoArgsConstructor;
 import org.geojson.Feature;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Attribution;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Metadata;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Response;
+import org.heigit.ohsome.ohsomeapi.output.Attribution;
+import org.heigit.ohsome.ohsomeapi.output.Metadata;
+import org.heigit.ohsome.ohsomeapi.output.Response;
 
 
 /**
  * Represents the whole JSON response object for the data aggregation response using the
- * /ratio/groupBy/boundary resource. It contains an optional
- * {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Metadata Metadata} object, the
- * requested
- * {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.RatioGroupByResult
- * RatioGroupByResult} for a JSON response and an identifier of the object. If the output format is
- * GeoJSON, the response includes a {@link org.geojson.Feature Feature} array, which holds the
- * respective objects with their timestamp-value pairs.
+ * /ratio/groupBy/boundary resource. It contains an optional {@link
+ * org.heigit.ohsome.ohsomeapi.output.Metadata Metadata} object, the requested {@link
+ * org.heigit.ohsome.ohsomeapi.output.ratio.RatioGroupByResult RatioGroupByResult} for a JSON
+ * response and an identifier of the object. If the output format is GeoJSON, the response includes
+ * a {@link org.geojson.Feature Feature} array, which holds the respective objects with their
+ * timestamp-value pairs.
  */
 @Getter
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/RatioGroupByResult.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ratio/RatioGroupByResult.java
similarity index 60%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/RatioGroupByResult.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ratio/RatioGroupByResult.java
index 6c437fcd..bd84b2aa 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/RatioGroupByResult.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ratio/RatioGroupByResult.java
@@ -1,13 +1,13 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse;
+package org.heigit.ohsome.ohsomeapi.output.ratio;
 
 import io.swagger.annotations.ApiModelProperty;
 import lombok.Getter;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.RatioResult;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByObject;
 
 /**
  * Represents the ratio-groupBy result JSON object containing the groupBy value and the respective
- * {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.RatioResult RatioResult}
- * objects. The RatioGroupByResult is only used in responses for /ratio/groupBy requests.
+ * {@link org.heigit.ohsome.ohsomeapi.output.ratio.RatioResult RatioResult} objects. The
+ * RatioGroupByResult is only used in responses for /ratio/groupBy requests.
  */
 @Getter
 public class RatioGroupByResult extends GroupByObject {
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/RatioResponse.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ratio/RatioResponse.java
similarity index 65%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/RatioResponse.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ratio/RatioResponse.java
index 2d919ac3..3185d4c5 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/RatioResponse.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ratio/RatioResponse.java
@@ -1,18 +1,19 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse;
+package org.heigit.ohsome.ohsomeapi.output.ratio;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import io.swagger.annotations.ApiModelProperty;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
+import org.heigit.ohsome.ohsomeapi.output.Attribution;
+import org.heigit.ohsome.ohsomeapi.output.Metadata;
+import org.heigit.ohsome.ohsomeapi.output.Response;
 
 /**
  * Represents the whole JSON response object for the data aggregation response using the /ratio
- * resource. It contains the license and copyright, optional
- * {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Metadata Metadata}, as well as
- * the results section showing
- * {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.RatioResult RatioResult}
- * objects.
+ * resource. It contains the license and copyright, optional {@link
+ * org.heigit.ohsome.ohsomeapi.output.Metadata Metadata}, as well as the results section showing
+ * {@link org.heigit.ohsome.ohsomeapi.output.ratio.RatioResult RatioResult} objects.
  */
 @Getter
 @AllArgsConstructor
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/RatioResult.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ratio/RatioResult.java
similarity index 88%
rename from src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/RatioResult.java
rename to src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ratio/RatioResult.java
index 3882d9f8..f1a58422 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/RatioResult.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/output/ratio/RatioResult.java
@@ -1,8 +1,9 @@
-package org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse;
+package org.heigit.ohsome.ohsomeapi.output.ratio;
 
 import io.swagger.annotations.ApiModelProperty;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
+import org.heigit.ohsome.ohsomeapi.output.Result;
 
 /**
  * Represents the result JSON object for the /ratio resource containing the timestamp together with
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator.java
index bead19d0..f55b78e2 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator.java
@@ -2,20 +2,20 @@
 
 import org.geojson.Feature;
 import org.geojson.GeoJsonObject;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.RatioResult;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.Result;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.elements.ElementsResult;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByObject;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.GroupByResult;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.groupbyresponse.RatioGroupByResult;
-import org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.users.UsersResult;
+import org.heigit.ohsome.ohsomeapi.output.Result;
+import org.heigit.ohsome.ohsomeapi.output.contributions.UsersResult;
+import org.heigit.ohsome.ohsomeapi.output.elements.ElementsResult;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByObject;
+import org.heigit.ohsome.ohsomeapi.output.groupby.GroupByResult;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioGroupByResult;
+import org.heigit.ohsome.ohsomeapi.output.ratio.RatioResult;
 
 /**
  * Creates the GeoJson features used in the GeoJson response for the /groupBy/boundary endpoints.
  */
 public class GroupByBoundaryGeoJsonGenerator {
 
-  /** Creates the GeoJson features used in the GeoJson response. */
+  /** Creates the GeoJson features used in the GeoJson response.*/
   public static Feature[] createGeoJsonFeatures(GroupByObject[] results,
       GeoJsonObject[] geojsonGeoms) {
     int groupByResultsLength = results.length;
@@ -61,11 +61,9 @@ private static Feature[] generateRatioGroupByResultGeoJson(GroupByObject[] resul
 
   /**
    * @throws UnsupportedOperationException if one of the values contained in results is not an
-   *         instance of
-   *         {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.elements.ElementsResult
+   *         instance of {@link org.heigit.ohsome.ohsomeapi.output.elements.ElementsResult
    *         ElementsResult}, or
-   *         {@link org.heigit.ohsome.ohsomeapi.output.dataaggregationresponse.users.UsersResult
-   *         UserResult}
+   *         {@link org.heigit.ohsome.ohsomeapi.output.contributions.UsersResult UserResult}
    */
   private static Feature[] generateGroupByResultGeoJson(GroupByObject[] results,
       GeoJsonObject[] geojsonGeoms, int groupByResultsLength, int groupByResultCount,
diff --git a/src/main/lombok/org/heigit/ohsome/ohsomeapi/utils/RequestUtils.java b/src/main/lombok/org/heigit/ohsome/ohsomeapi/utils/RequestUtils.java
index 023e860c..b37ec84a 100644
--- a/src/main/lombok/org/heigit/ohsome/ohsomeapi/utils/RequestUtils.java
+++ b/src/main/lombok/org/heigit/ohsome/ohsomeapi/utils/RequestUtils.java
@@ -88,8 +88,8 @@ public static boolean usesCsvFormat(HttpServletRequest request) {
    * 
    * @throws DatabaseAccessException if the keytables are missing
    * @throws RuntimeException if the timerange metadata cannot be retrieved from the db
-   * @throws IOException thrown by
-   *         {@link com.fasterxml.jackson.databind.ObjectMapper#readTree(String) readTree}
+   * @throws IOException thrown by {@link com.fasterxml.jackson.databind.ObjectMapper
+   *         #readTree(String) readTree}
    */
   public static void extractOSHDBMetadata() throws IOException {
     OSHDBDatabase db;
diff --git a/src/test/java/org/heigit/ohsome/ohsomeapi/controller/DataExtractionTest.java b/src/test/java/org/heigit/ohsome/ohsomeapi/controller/DataExtractionTest.java
index b0ae551b..ad71f8f2 100644
--- a/src/test/java/org/heigit/ohsome/ohsomeapi/controller/DataExtractionTest.java
+++ b/src/test/java/org/heigit/ohsome/ohsomeapi/controller/DataExtractionTest.java
@@ -4,8 +4,9 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assume.assumeTrue;
+
 import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.node.ArrayNode;
+import com.fasterxml.jackson.databind.node.JsonNodeType;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -54,30 +55,29 @@ public static void applicationMainShutdown() {
   @Test
   public void elementsGeometryTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
-    ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/elements/geometry?bboxes=8.67452,49.40961,8.70392,49.41823&types=way"
-            + "&keys=building&values=residential&time=2015-01-01&properties=metadata",
+    ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port 
+        + "/elements/geometry?bboxes=8.67452,49.40961,8.70392,49.41823"
+        + "&time=2015-01-01&properties=metadata&filter=type:way and building=residential",
         JsonNode.class);
     JsonNode feature = Helper.getFeatureByIdentifier(response, "@osmId", "way/140112811");
-    assertEquals(7, feature.get("properties").size());
+    assertEquals(6, feature.get("properties").size());
   }
 
   @Test
   public void elementsGeomUsingOneTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
-        + "/elements/geometry?bboxes=8.67452,49.40961,8.70392,49.41823&types=way&keys=building"
-        + "&values=residential&time=2015-12-01&properties=metadata", JsonNode.class);
+        + "/elements/geometry?bboxes=8.67452,49.40961,8.70392,49.41823&time=2015-12-01"
+        + "&properties=metadata&filter=type:way and building=residential", JsonNode.class);
     assertTrue(Helper.getFeatureByIdentifier(response, "@osmId", "way/140112811") != null);
   }
 
   @Test
   public void elementsGeomUsingMultipleTagsTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
-    ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port
-            + "/elements/geometry?bboxes=8.67559,49.40853,8.69379,49.4231&types=way&keys=highway,"
-            + "name,maxspeed&values=residential&time=2015-10-01&properties=metadata",
+    ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port 
+        + "/elements/geometry?bboxes=8.67559,49.40853,8.69379,49.4231&time=2015-10-01"
+        + "&properties=metadata&filter=type:way and highway=residential and maxspeed=* and name=*",
         JsonNode.class);
     assertTrue(Helper.getFeatureByIdentifier(response, "@osmId", "way/4084860") != null);
   }
@@ -85,30 +85,32 @@ public void elementsGeomUsingMultipleTagsTest() {
   @Test
   public void elementsGeomUnclippedSimpleFeaturesTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
-    ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port
-            + "/elements/geometry?bboxes=8.700582,49.4143039,8.701247,49.414994&types=other,line&"
-            + "keys=building&showMetadata=true&properties=unclipped&time=2019-01-02",
+    ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
+        + "/elements/geometry?bboxes=8.700582,49.4143039,8.701247,49.414994&properties=unclipped"
+        + "&time=2019-01-02&filter=building=* and (geometry:other or geometry:line)",
         JsonNode.class);
     assertTrue(response.getBody().get("features").size() == 0);
   }
 
-  @Test
-  public void elementsGeomSimpleFeaturesOtherLineTest() {
-    TestRestTemplate restTemplate = new TestRestTemplate();
-    ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
-        + "/elements/geometry?bboxes=8.700582,49.4143039,8.701247,49.414994&types=other,line&"
-        + "keys=building&showMetadata=true&time=2019-01-02", JsonNode.class);
-    assertTrue("GeometryCollection"
-        .equals(response.getBody().get("features").get(0).get("geometry").get("type").asText()));
-  }
+  // this needs a fix in the OSHDB to work
+  // see https://github.com/GIScience/oshdb/issues/338
+  //  @Test
+  //  public void elementsGeomSimpleFeaturesOtherLineTest() {
+  //    TestRestTemplate restTemplate = new TestRestTemplate();
+  //    ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port 
+  //        + "/elements/geometry?bboxes=8.700582,49.4143039,8.701247,49.414994"
+  //        + "&time=2019-01-02&filter=building=* and (geometry:other or geometry:line)",
+  //        JsonNode.class);
+  //    assertTrue("GeometryCollection"
+  //        .equals(response.getBody().get("features").get(0).get("geometry").get("type").asText()));
+  //  }
 
   @Test
   public void elementsGeomUsingNoTagsTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.67452,49.40961,8.70392,49.41823");
-    map.add("types", "node");
+    map.add("filter", "type:node");
     map.add("time", "2016-02-05");
     map.add("properties", "metadata");
     ResponseEntity<JsonNode> response =
@@ -119,10 +121,9 @@ public void elementsGeomUsingNoTagsTest() {
   @Test
   public void elementsBboxTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
-    ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/elements/bbox?bboxes=8.67452,49.40961,8.70392,49.41823&types=way"
-            + "&keys=building&values=residential&time=2015-01-01&properties=metadata",
-        JsonNode.class);
+    ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port 
+        + "/elements/bbox?bboxes=8.67452,49.40961,8.70392,49.41823&time=2015-01-01"
+        + "&properties=metadata&filter=type:way and building=residential", JsonNode.class);
     JsonNode featureGeom =
         Helper.getFeatureByIdentifier(response, "@osmId", "way/294644468").get("geometry");
     assertEquals("Polygon", featureGeom.get("type").asText());
@@ -132,41 +133,52 @@ public void elementsBboxTest() {
   @Test
   public void elementsCentroidTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
-    ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/elements/centroid?bboxes=8.67452,49.40961,8.70392,49.41823&types=way"
-            + "&keys=building&values=residential&time=2015-01-01&properties=metadata",
-        JsonNode.class);
+    ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port 
+        + "/elements/centroid?bboxes=8.67452,49.40961,8.70392,49.41823&time=2015-01-01"
+        + "&properties=metadata&filter=type:way and building=residential", JsonNode.class);
     assertEquals(2, Helper.getFeatureByIdentifier(response, "@osmId", "way/294644468")
         .get("geometry").get("coordinates").size());
   }
 
-  @Test
-  public void elementsClipGeometryParamTrueFalseTest() {
-    TestRestTemplate restTemplate = new TestRestTemplate();
-    String uri = "/elements/geometry?bboxes=8.700582,49.4143039,8.701247,49.414994&types=other,"
-        + "line&keys=building&showMetadata=true&time=2018-01-02";
-    ResponseEntity<JsonNode> emptyFeatureResponse =
-        restTemplate.getForEntity(server + port + uri + "&clipGeometry=false", JsonNode.class);
-    ResponseEntity<JsonNode> featureResponse =
-        restTemplate.getForEntity(server + port + uri + "&clipGeometry=true", JsonNode.class);
-    assertTrue(emptyFeatureResponse.getBody().get("features").size() == 0);
-    assertTrue(featureResponse.getBody().get("features").size() == 1);
-  }
+  // this needs a fix in the OSHDB to work
+  // see https://github.com/GIScience/oshdb/issues/338
+  //  @Test
+  //  public void elementsClipGeometryParamTrueFalseTest() {
+  //    TestRestTemplate restTemplate = new TestRestTemplate();
+  //    String uri = "/elements/geometry?bboxes=8.700582,49.4143039,8.701247,49.414994&time=2018-01-02"
+  //        + "&filter=building=* and (geometry:other or geometry:line)";
+  //    ResponseEntity<JsonNode> emptyFeatureResponse =
+  //        restTemplate.getForEntity(server + port + uri + "&clipGeometry=false", JsonNode.class);
+  //    ResponseEntity<JsonNode> featureResponse =
+  //        restTemplate.getForEntity(server + port + uri + "&clipGeometry=true", JsonNode.class);
+  //    assertTrue(emptyFeatureResponse.getBody().get("features").size() == 0);
+  //    assertTrue(featureResponse.getBody().get("features").size() == 1);
+  //  }
 
   /*
    * ./elementsFullHistory/geometry|bbox|centroid tests
    */
 
+  @Test
+  public void elementsGeometryCoordinateTest() {
+    TestRestTemplate restTemplate = new TestRestTemplate();
+    ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
+        + "/elements/geometry?bboxes=8.68641,49.41642,8.69499,49.42112&filter=id:node/3429511451&"
+        + "time=2019-01-01", JsonNode.class);
+    JsonNode feature = Helper.getFeatureByIdentifier(response, "@osmId", "node/3429511451");
+    assertEquals(49.418466, feature.get("geometry").get("coordinates").get(1).asDouble(), 0);
+  }
+
   @Test
   public void elementsFullHistoryGeometryTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/elementsFullHistory/geometry?bboxes=8.67452,49.40961,8.70392,49.41823&"
-            + "types=way&keys=building&values=residential&properties=metadata&time=2015-01-01,"
-            + "2015-07-01&showMetadata=true",
+        server + port + "/elementsFullHistory/geometry?bboxes=8.67452,49.40961,8.70392,49.41823"
+            + "&properties=metadata&time=2015-01-01,2015-07-01"
+            + "&filter=type:way and building=residential",
         JsonNode.class);
     assertTrue(Helper.getFeatureByIdentifier(response, "@osmId", "way/295135436") != null);
-    assertEquals(7, Helper.getFeatureByIdentifier(response, "@validTo", "2015-05-05T06:59:35Z")
+    assertEquals(6, Helper.getFeatureByIdentifier(response, "@validTo", "2015-05-05T06:59:35Z")
         .get("properties").size());
   }
 
@@ -174,9 +186,8 @@ public void elementsFullHistoryGeometryTest() {
   public void elementsFullHistoryGeometryWithTagsTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/elementsFullHistory/geometry?bboxes=8.67494,49.417032,8.676136,49.419576&"
-            + "types=way&keys=brand&values=Aldi SÃ¼d&properties=tags&time=2017-01-01,2018-01-01&"
-            + "showMetadata=true",
+        server + port + "/elementsFullHistory/geometry?bboxes=8.67494,49.417032,8.676136,49.419576"
+            + "&properties=tags&time=2017-01-01,2018-01-01&filter=type:way and brand=\"Aldi SÃ¼d\"",
         JsonNode.class);
     assertTrue(
         Helper.getFeatureByIdentifier(response, "@validFrom", "2017-01-18T17:38:06Z") != null);
@@ -189,9 +200,7 @@ public void elementsFullHistoryBboxTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.67494,49.417032,8.676136,49.419576");
-    map.add("types", "way");
-    map.add("keys", "brand");
-    map.add("values", "Aldi SÃ¼d");
+    map.add("filter", "type:way and brand=\"Aldi SÃ¼d\"");
     map.add("time", "2017-01-01,2018-01-01");
     map.add("properties", "tags,metadata");
     ResponseEntity<JsonNode> response = restTemplate
@@ -207,13 +216,11 @@ public void elementsFullHistoryCentroidTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.67452,49.40961,8.70392,49.41823");
-    map.add("types", "way");
+    map.add("filter", "type:way and building=residential");
     map.add("time", "2017-01-01,2017-07-01");
-    map.add("keys", "building");
-    map.add("values", "residential");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elementsFullHistory/centroid", map, JsonNode.class);
-    assertEquals(4, Helper.getFeatureByIdentifier(response, "@osmId", "way/295135455")
+    assertEquals(3, Helper.getFeatureByIdentifier(response, "@osmId", "way/295135455")
         .get("properties").size());
   }
 
@@ -261,7 +268,7 @@ public void getDataExtractionWithSpecificParameterOfOtherSpecificResourceTest()
   public void postDataExtractionWithSpecificParameterOfOtherSpecificResourceTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
-    map.add("values2", "primary");
+    map.add("filter2", "highway=primary");
     ResponseEntity<JsonNode> response =
         restTemplate.postForEntity(server + port + "/elements/geometry", map, JsonNode.class);
     assertEquals(400, response.getBody().get("status").asInt());
@@ -288,10 +295,9 @@ public void contributionsContributionTypesTest() {
         + "/contributions/geometry?bboxes=8.686017,49.406453,8.686983,49.406966&filter=building=*&"
         + "time=2008-01-01,2009-09-01&properties=metadata,tags&clipGeometry=false", JsonNode.class);
     JsonNode featuresArray = response.getBody().get("features");
-    assertTrue(featuresArray.get(0).get("properties").get("@creation").asText().equals("true"));
-    assertTrue(
-        featuresArray.get(1).get("properties").get("@geometryChange").asText().equals("true"));
-    assertTrue(featuresArray.get(2).get("properties").get("@tagChange").asText().equals("true"));
+    assertTrue(featuresArray.get(0).get("properties").get("@creation").asBoolean());
+    assertTrue(featuresArray.get(1).get("properties").get("@geometryChange").asBoolean());
+    assertTrue(featuresArray.get(2).get("properties").get("@tagChange").asBoolean());
   }
 
   @Test
@@ -334,8 +340,8 @@ public void contributionsTwoContributionTypesTest() {
         + "time=2010-01-01,2012-01-01&properties=metadata&clipGeometry=false", JsonNode.class);
     JsonNode featureProperties =
         Helper.getFeatureByIdentifier(response, "@changesetId", "10082609").get("properties");
-    assertTrue(featureProperties.get("@geometryChange").asText().equals("true")
-        && featureProperties.get("@tagChange").asText().equals("true"));
+    assertTrue(featureProperties.get("@geometryChange").asBoolean()
+        && featureProperties.get("@tagChange").asBoolean());
   }
 
   @Test
@@ -347,7 +353,7 @@ public void contributionsCreationTest() {
         JsonNode.class);
     JsonNode featureProperties =
         Helper.getFeatureByIdentifier(response, "@changesetId", "8371765").get("properties");
-    assertEquals("true", featureProperties.get("@creation").asText());
+    assertTrue(featureProperties.get("@creation").asBoolean());
   }
 
   @Test
@@ -393,8 +399,19 @@ public void contributionsDeletionTest() {
         + "/contributions/geometry?bboxes=8.699552,49.411985,8.700909,49.412648&filter=building=* "
         + "and type:way and id:14195519&time=2008-01-28,2012-01-01&properties=metadata"
         + "&clipGeometry=false", JsonNode.class);
-    assertTrue(((ArrayNode) Helper.getFeatureByIdentifier(response, "@changesetId", "9218673")
-        .get("geometry").get("coordinates")).size() == 0);
+    assertEquals(Helper.getFeatureByIdentifier(response, "@changesetId", "9218673").get("geometry")
+        .getNodeType(), JsonNodeType.NULL);
+  }
+
+  @Test
+  public void contributionsGeometryCollectionDeletionTest() {
+    TestRestTemplate restTemplate = new TestRestTemplate();
+    ResponseEntity<JsonNode> response = restTemplate.getForEntity(
+        server + port + "/contributions/geometry?bboxes=8.66589,49.37737,8.6688,49.37861&"
+            + "filter=id:relation/3326519&properties=tags,metadata&time=2018-01-01,2019-01-01",
+        JsonNode.class);
+    assertEquals(Helper.getFeatureByIdentifier(response, "@changesetId", "61636634").get("geometry")
+        .getNodeType(), JsonNodeType.NULL);
   }
 
   @Test
@@ -421,6 +438,16 @@ public void contributionsAssociationChangeSetIdWithOsmIdAndVersion() {
         && featureProperties.get("@osmId").asText().equals("way/96054443"));
   }
 
+  @Test
+  public void contributionsGeometryCoordinateTest() {
+    TestRestTemplate restTemplate = new TestRestTemplate();
+    ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
+        + "/contributions/geometry?bboxes=8.68641,49.41642,8.69499,49.42112"
+        + "&filter=id:node/3429511451&time=2017-01-01,2019-01-01", JsonNode.class);
+    JsonNode feature = Helper.getFeatureByIdentifier(response, "@osmId", "node/3429511451");
+    assertEquals(49.418466, feature.get("geometry").get("coordinates").get(1).asDouble(), 0);
+  }
+
   /*
    * ./contributions/latest tests
    */
@@ -470,11 +497,11 @@ public void contributionsLatestOnlyOneEntryTest() {
   public void contributionsLatestDeletionTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
-        + "/contributions/latest/geometry?bboxes=8.699552,49.411985,8.700909,49.412648&filter=building=* "
-        + "and type:way and id:14195519&time=2008-01-28,2012-01-01&properties=metadata",
+        + "/contributions/latest/geometry?bboxes=8.699552,49.411985,8.700909,49.412648&filter="
+        + "building=* and type:way and id:14195519&time=2008-01-28,2012-01-01&properties=metadata",
         JsonNode.class);
-    assertTrue(((ArrayNode) Helper.getFeatureByIdentifier(response, "@changesetId", "9218673")
-        .get("geometry").get("coordinates")).size() == 0);
+    assertEquals(Helper.getFeatureByIdentifier(response, "@changesetId", "9218673").get("geometry")
+        .getNodeType(), JsonNodeType.NULL);
   }
 
   @Test
@@ -485,7 +512,7 @@ public void contributionsLatestCreationTest() {
             + "/contributions/latest/geometry?bboxes=8.679253,49.424025,8.679623,49.424185&filter="
             + "building=*&time=2010-01-01,2011-01-17&properties=metadata,tags&clipGeometry=false",
         JsonNode.class);
-    assertTrue(response.getBody().get("features").get(0).get("properties").get("@creation").asText()
-        .equals("true"));
+    assertTrue(
+        response.getBody().get("features").get(0).get("properties").get("@creation").asBoolean());
   }
 }
diff --git a/src/test/java/org/heigit/ohsome/ohsomeapi/controller/GetControllerTest.java b/src/test/java/org/heigit/ohsome/ohsomeapi/controller/GetControllerTest.java
index d3e940a5..ed247eda 100644
--- a/src/test/java/org/heigit/ohsome/ohsomeapi/controller/GetControllerTest.java
+++ b/src/test/java/org/heigit/ohsome/ohsomeapi/controller/GetControllerTest.java
@@ -1,7 +1,6 @@
 package org.heigit.ohsome.ohsomeapi.controller;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assume.assumeTrue;
 
@@ -83,8 +82,8 @@ public void getMetadataTest() {
   @Test
   public void getGeneralResourceWithFalseParameterTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
-    ResponseEntity<JsonNode> response =
-        restTemplate.getForEntity(server + port + "/elements/area?type=way", JsonNode.class);
+    ResponseEntity<JsonNode> response = restTemplate
+        .getForEntity(server + port + "/elements/area?filterr=type:way", JsonNode.class);
     assertEquals(400, response.getBody().get("status").asInt());
   }
 
@@ -92,7 +91,7 @@ public void getGeneralResourceWithFalseParameterTest() {
   public void getGeneralResourceWithSpecificParameterTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate
-        .getForEntity(server + port + "/elements/count/density?values2=highway", JsonNode.class);
+        .getForEntity(server + port + "/elements/count/density?filter2=highway", JsonNode.class);
     assertEquals(400, response.getBody().get("status").asInt());
   }
 
@@ -140,8 +139,8 @@ public void getMetadataParameterTest() {
   public void getElementsCountTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
-        + "/elements/count?bboxes=8.67452,49.40961,8.70392,49.41823&types=way&time=2015-01-01"
-        + "&keys=building&values=residential&showMetadata=true", JsonNode.class);
+        + "/elements/count?bboxes=8.67452,49.40961,8.70392,49.41823&time=2015-01-01&"
+        + "filter=type:way and building=residential", JsonNode.class);
     assertEquals(40, response.getBody().get("result").get(0).get("value").asInt());
   }
 
@@ -150,8 +149,8 @@ public void getElementsCountGroupByBoundaryTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
         server + port + "/elements/count/groupBy/boundary?bboxes=8.70538,49.40891,8.70832,49.41155|"
-            + "8.68667,49.41353,8.68828,49.414&types=polygon&time=2017-01-01&keys=building"
-            + "&values=church&showMetadata=true",
+            + "8.68667,49.41353,8.68828,49.414&time=2017-01-01&showMetadata=true&"
+            + "filter=geometry:polygon and building=church",
         JsonNode.class);
     assertEquals(2, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
@@ -165,7 +164,7 @@ public void getElementsCountGroupByBoundaryGroupByTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
         + "/elements/count/groupBy/boundary/groupBy/tag?bboxes=8.68086,49.39948,8.69401,49.40609&"
-        + "types=way&time=2016-11-09&keys=building&groupByKey=building&groupByValues=yes",
+        + "time=2016-11-09&groupByKey=building&groupByValues=yes&filter=type:way and building=*",
         JsonNode.class);
     assertEquals(43, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
@@ -180,8 +179,8 @@ public void getElementsCountGroupByBoundaryGroupByTagTest() {
   public void getElementsCountGroupByTypeTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/elements/count/groupBy/type?bboxes=8.67038,49.40341,8.69197,49.40873"
-            + "&types=way,relation&time=2017-01-01&keys=building&showMetadata=true",
+        server + port + "/elements/count/groupBy/type?bboxes=8.67038,49.40341,8.69197,49.40873&"
+            + "time=2017-01-01&filter=building=* and (type:way or type:relation)",
         JsonNode.class);
     assertEquals(967,
         StreamSupport
@@ -195,8 +194,8 @@ public void getElementsCountGroupByTypeTest() {
   public void getElementsCountGroupByTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/elements/count/groupBy/tag?bboxes=8.67859,49.41189,8.67964,49.41263"
-            + "&types=way&time=2017-01-01&keys=building&groupByKey=building&showMetadata=true",
+        server + port + "/elements/count/groupBy/tag?bboxes=8.67859,49.41189,8.67964,49.41263&"
+            + "time=2017-01-01&groupByKey=building&filter=building=* and type:way",
         JsonNode.class);
     assertEquals(8, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
@@ -210,8 +209,8 @@ public void getElementsCountGroupByKeyTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response =
         restTemplate.getForEntity(
-            server + port + "/elements/count/groupBy/key?bboxes=8.67859,49.41189,8.67964,49.41263"
-                + "&types=way&time=2012-01-01&groupByKeys=building&showMetadata=true",
+            server + port + "/elements/count/groupBy/key?bboxes=8.67859,49.41189,8.67964,49.41263&"
+                + "time=2012-01-01&groupByKeys=building&filter=type:way",
             JsonNode.class);
     assertEquals(7,
         StreamSupport
@@ -226,8 +225,9 @@ public void getElementsCountRatioTest() {
     final double expectedValue = 0.153933;
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/elements/count/ratio?bboxes=8.66004,49.41184,8.68481,49.42094&types=way"
-            + "&time=2015-01-01/2019-01-01/P1Y&keys=building&types2=node&keys2=addr:housenumber",
+        server + port + "/elements/count/ratio?bboxes=8.66004,49.41184,8.68481,49.42094&time="
+            + "2015-01-01/2019-01-01/P1Y&filter=type:way and building=*&filter2=type:node and "
+            + "addr:housenumber=*",
         JsonNode.class);
     assertEquals(expectedValue,
         response.getBody().get("ratioResult").get(0).get("ratio").asDouble(),
@@ -240,8 +240,8 @@ public void getElementsCountRatioGroupByBoundaryTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
         server + port + "/elements/count/ratio/groupBy/boundary?bcircles=8.66906,49.4167,100|"
-            + "8.69013,49.40223,100&types=way&time=2017-09-20&keys=building"
-            + "&types2=node&keys2=addr:housenumber",
+            + "8.69013,49.40223,100&time=2017-09-20&filter=type:way and building=*&"
+            + "filter2=type:node and addr:housenumber=*",
         JsonNode.class);
     assertEquals(expectedValue, StreamSupport
         .stream(
@@ -258,8 +258,8 @@ public void getElementsCountDensityTest() {
     final double expectedValue = 3868.09;
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/elements/count/density?bboxes=8.68794,49.41434,8.69021,49.41585"
-            + "&types=way&time=2017-08-11&keys=building&showMetadata=true",
+        server + port + "/elements/count/density?bboxes=8.68794,49.41434,8.69021,49.41585&"
+            + "time=2017-08-11&filter=type:way and building=*",
         JsonNode.class);
     assertEquals(expectedValue, response.getBody().get("result").get(0).get("value").asDouble(),
         expectedValue * deltaPercentage);
@@ -272,7 +272,7 @@ public void getElementsCountDensityGroupByBoundaryTest() {
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
         server + port
             + "/elements/count/density/groupBy/boundary?bboxes=8.68794,49.41434,8.69021,49.41585|"
-            + "8.67933,49.40505,8.6824,49.40638&types=way&time=2017-08-19&keys=building",
+            + "8.67933,49.40505,8.6824,49.40638&time=2017-08-19&filter=type:way and building=*",
         JsonNode.class);
     assertEquals(expectedValue, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
@@ -287,8 +287,8 @@ public void getElementsCountDensityGroupByTypeTest() {
     final double expectedValue = 890.76;
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
-        + "/elements/count/density/groupBy/type?bboxes=8.68086,49.39948,8.69401,49.40609"
-        + "&types=way,node&time=2016-11-09&keys=addr:housenumber", JsonNode.class);
+        + "/elements/count/density/groupBy/type?bboxes=8.68086,49.39948,8.69401,49.40609&"
+        + "time=2016-11-09&filter=addr:housenumber=* and (type:way or type:node)", JsonNode.class);
     assertEquals(expectedValue,
         StreamSupport
             .stream(Spliterators.spliteratorUnknownSize(
@@ -303,8 +303,9 @@ public void getElementsCountDensityGroupByTagTest() {
     final double expectedValue = 61.28;
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
-        + "/elements/count/density/groupBy/tag?bboxes=8.68086,49.39948,8.69401,49.40609&types=way"
-        + "&time=2016-11-09&keys=building&groupByKey=building&groupByValues=yes", JsonNode.class);
+        + "/elements/count/density/groupBy/tag?bboxes=8.68086,49.39948,8.69401,49.40609&"
+        + "time=2016-11-09&groupByKey=building&groupByValues=yes&filter=type:way and building=*",
+        JsonNode.class);
     assertEquals(expectedValue, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
@@ -319,8 +320,8 @@ public void getElementsCountDensityGroupByBoundaryGroupByTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
         + "/elements/count/density/groupBy/boundary/groupBy/tag?bboxes=b1:8.68086,49.39948,8.69401,"
-        + "49.40609|b2:8.68081,49.39943,8.69408,49.40605&types=way&time=2016-11-09&keys=building&"
-        + "groupByKey=building", JsonNode.class);
+        + "49.40609|b2:8.68081,49.39943,8.69408,49.40605&time=2016-11-09&groupByKey=building&"
+        + "filter=type:way and building=*", JsonNode.class);
     assertEquals(expectedValue, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
@@ -339,8 +340,8 @@ public void getElementsLengthTest() {
     final double expectedValue = 15198.89;
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/elements/length?bboxes=8.67452,49.40961,8.70392,49.41823&types=way"
-            + "&time=2012-01-01&keys=highway&values=residential",
+        server + port + "/elements/length?bboxes=8.67452,49.40961,8.70392,49.41823"
+            + "&time=2012-01-01&filter=type:way and highway=residential",
         JsonNode.class);
     assertEquals(expectedValue, response.getBody().get("result").get(0).get("value").asDouble(),
         expectedValue * deltaPercentage);
@@ -353,7 +354,7 @@ public void getElementsLengthGroupByBoundaryTest() {
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
         server + port
             + "/elements/length/groupBy/boundary?bboxes=8.695443,49.408928,8.695636,49.409151|"
-            + "8.699262,49.409451,8.701547,49.412205&types=way&time=2014-08-21&keys=highway",
+            + "8.699262,49.409451,8.701547,49.412205&time=2014-08-21&filter=type:way and highway=*",
         JsonNode.class);
     assertEquals(expectedValue, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
@@ -369,7 +370,7 @@ public void getElementsLengthGroupByBoundaryGroupByTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
         + "/elements/length/groupBy/boundary/groupBy/tag?bboxes=8.68086,49.39948,8.69401,49.40609"
-        + "&types=way&time=2017-11-25&keys=highway&groupByKey=highway", JsonNode.class);
+        + "&time=2017-11-25&groupByKey=highway&filter=type:way and highway=*", JsonNode.class);
     assertEquals(expectedValue, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
@@ -386,7 +387,7 @@ public void getElementsLengthGroupByTypeTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
         server + port + "/elements/length/groupBy/type?bboxes=8.701665,49.408802,8.703999,49.409553"
-            + "&types=way,relation&time=2014-08-21&keys=highway",
+            + "&time=2014-08-21&filter=highway=* and (type:way or type:relation)",
         JsonNode.class);
     assertEquals(expectedValue,
         StreamSupport
@@ -403,7 +404,7 @@ public void getElementsLengthGroupByKeyTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
         server + port + "/elements/length/groupBy/key?bboxes=8.67181,49.40434,8.67846,49.40878"
-            + "&types=way&time=2016-08-21&groupByKeys=highway,railway",
+            + "&time=2016-08-21&groupByKeys=highway,railway&filter=type:way",
         JsonNode.class);
     assertEquals(expectedValue, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
@@ -418,8 +419,8 @@ public void getElementsLengthGroupByTagTest() {
     final double expectedValue = 373.51;
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
-        + "/elements/length/groupBy/tag?bboxes=8.70773,49.40832,8.71413,49.41092&types=way"
-        + "&time=2016-08-21&groupByKey=highway", JsonNode.class);
+        + "/elements/length/groupBy/tag?bboxes=8.70773,49.40832,8.71413,49.41092&time=2016-08-21"
+        + "&groupByKey=highway&filter=type:way", JsonNode.class);
     assertEquals(expectedValue, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
@@ -434,7 +435,7 @@ public void getElementsLengthRatioTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
         server + port + "/elements/length/ratio?bboxes=8.67567,49.40695,8.69434,49.40882"
-            + "&types=way&time=2011-12-13&keys=highway&keys2=railway",
+            + "&time=2011-12-13&&filter=type:way and highway=*&filter2=railway=*",
         JsonNode.class);
     assertEquals(expectedValue,
         response.getBody().get("ratioResult").get(0).get("ratio").asDouble(),
@@ -447,7 +448,8 @@ public void getElementsLengthRatioGroupByBoundaryTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port + "/elements"
         + "/length/ratio/groupBy/boundary?bboxes=8.67829,49.39807,8.69061,49.40578|"
-        + "8.68306,49.42407,8.68829,49.42711&types=way&time=2012-12-22&keys=highway&keys2=railway",
+        + "8.68306,49.42407,8.68829,49.42711&time=2012-12-22&filter=type:way and highway=*"
+        + "&filter2=railway=*",
         JsonNode.class);
     assertEquals(expectedValue, StreamSupport
         .stream(
@@ -465,7 +467,7 @@ public void getElementsLengthDensityTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
         server + port + "/elements/length/density?bboxes=8.70538,49.40464,8.71264,49.41042"
-            + "&types=way&time=2013-01-04&keys=highway",
+            + "&time=2013-01-04&filter=type:way and highway=*",
         JsonNode.class);
     assertEquals(expectedValue, response.getBody().get("result").get(0).get("value").asDouble(),
         expectedValue * deltaPercentage);
@@ -477,7 +479,7 @@ public void getElementsLengthDensityGroupByTypeTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
         + "/elements/length/density/groupBy/type?bboxes=8.68242,49.40059,8.68732,49.4059"
-        + "&types=way,node&time=2015-03-25", JsonNode.class);
+        + "&time=2015-03-25&filter=type:way or type:node", JsonNode.class);
     assertEquals(expectedValue,
         StreamSupport
             .stream(Spliterators.spliteratorUnknownSize(
@@ -493,7 +495,7 @@ public void getElementsLengthDensityGroupByTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
         + "/elements/length/density/groupBy/tag?bboxes=8.66972,49.40453,8.67564,49.4076"
-        + "&types=way&time=2016-01-17&groupByKey=railway", JsonNode.class);
+        + "&time=2016-01-17&groupByKey=railway&filter=type:way", JsonNode.class);
     assertEquals(expectedValue, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
@@ -509,7 +511,7 @@ public void getElementsLengthDensityGroupByBoundaryTest() {
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
         server + port
             + "/elements/length/density/groupBy/boundary?bboxes=8.69079,49.40129,8.69238,49.40341|"
-            + "8.67504,49.4119,8.67813,49.41668&types=way&time=2017-05-30&keys=highway",
+            + "8.67504,49.4119,8.67813,49.41668&time=2017-05-30&filter=type:way and highway=*",
         JsonNode.class);
     assertEquals(expectedValue, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
@@ -525,8 +527,8 @@ public void getElementsLengthDensityGroupByBoundaryGroupByTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
         + "/elements/length/density/groupBy/boundary/groupBy/tag?bboxes=b1:8.68086,49.39948,8.69401"
-        + ",49.40609|b2:8.68081,49.39943,8.69408,49.40605&types=way&time=2017-10-08&keys=highway&"
-        + "groupByKey=highway", JsonNode.class);
+        + ",49.40609|b2:8.68081,49.39943,8.69408,49.40605&time=2017-10-08&groupByKey=highway"
+        + "&filter=type:way and highway=*", JsonNode.class);
     assertEquals(expectedValue,
         StreamSupport
             .stream(Spliterators.spliteratorUnknownSize(
@@ -544,21 +546,20 @@ public void getElementsLengthDensityGroupByBoundaryGroupByTagTest() {
   @Test
   public void getUsersCountTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
-    ResponseEntity<JsonNode> response =
-        restTemplate
-            .getForEntity(
-                server + port + "/users/count?bboxes=8.67452,49.40961,8.70392,49.41823&types=way"
-                    + "&time=2014-01-01,2015-01-01&keys=building&values=residential",
-                JsonNode.class);
+    ResponseEntity<JsonNode> response = restTemplate.getForEntity(
+        server + port + "/users/count?bboxes=8.67452,49.40961,8.70392,49.41823&"
+            + "&time=2014-01-01,2015-01-01&filter=type:way and building=residential",
+        JsonNode.class);
     assertEquals(5, response.getBody().get("result").get(0).get("value").asInt());
   }
 
   @Test
   public void getUsersCountGroupByTypeTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
-    ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
-        + "/users/count/groupBy/type?bboxes=8.67,49.39941,8.69545,49.4096&types=way,relation"
-        + "&time=2014-01-01,2015-01-01&keys=building", JsonNode.class);
+    ResponseEntity<JsonNode> response = restTemplate.getForEntity(
+        server + port + "/users/count/groupBy/type?bboxes=8.67,49.39941,8.69545,49.4096"
+            + "&time=2014-01-01,2015-01-01&filter=(type:way or type:relation) and building=*",
+        JsonNode.class);
     assertEquals(30,
         StreamSupport
             .stream(Spliterators.spliteratorUnknownSize(
@@ -571,8 +572,8 @@ public void getUsersCountGroupByTypeTest() {
   public void getUsersCountGroupByKeyTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/users/count/groupBy/key?bboxes=8.67,49.39941,8.69545,49.4096&types=way"
-            + "&time=2014-01-01,2015-01-01&groupByKeys=building",
+        server + port + "/users/count/groupBy/key?bboxes=8.67,49.39941,8.69545,49.4096"
+            + "&time=2014-01-01,2015-01-01&groupByKeys=building&filter=type:way",
         JsonNode.class);
     assertEquals(30,
         StreamSupport
@@ -586,8 +587,8 @@ public void getUsersCountGroupByKeyTest() {
   public void getUsersCountGroupByTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/users/count/groupBy/tag?bboxes=8.67,49.39941,8.69545,49.4096&types=way"
-            + "&time=2014-01-01,2015-01-01&groupByKey=building",
+        server + port + "/users/count/groupBy/tag?bboxes=8.67,49.39941,8.69545,49.4096"
+            + "&time=2014-01-01,2015-01-01&groupByKey=building&filter=type:way",
         JsonNode.class);
     assertEquals(29, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
@@ -601,8 +602,8 @@ public void getUsersCountDensityTest() {
     final double expectedValue = 14.33;
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/users/count/density?bboxes=8.67,49.39941,8.69545,49.4096&types=way"
-            + "&time=2014-01-01,2015-01-01&keys=building",
+        server + port + "/users/count/density?bboxes=8.67,49.39941,8.69545,49.4096"
+            + "&time=2014-01-01,2015-01-01&filter=type:way and building=*",
         JsonNode.class);
     assertEquals(expectedValue, response.getBody().get("result").get(0).get("value").asDouble(),
         expectedValue * deltaPercentage);
@@ -612,9 +613,10 @@ public void getUsersCountDensityTest() {
   public void getUsersCountDensityGroupByTypeTest() {
     final double expectedValue = 3.82;
     TestRestTemplate restTemplate = new TestRestTemplate();
-    ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
-        + "/users/count/density/groupBy/type?bboxes=8.67,49.39941,8.69545,49.4096&types=way,"
-        + "relation&time=2014-01-01,2015-01-01&keys=building", JsonNode.class);
+    ResponseEntity<JsonNode> response = restTemplate.getForEntity(
+        server + port + "/users/count/density/groupBy/type?bboxes=8.67,49.39941,8.69545,49.4096"
+            + "&time=2014-01-01,2015-01-01&filter=(type:way or type:relation) and building=*",
+        JsonNode.class);
     assertEquals(expectedValue,
         StreamSupport
             .stream(Spliterators.spliteratorUnknownSize(
@@ -629,8 +631,8 @@ public void getUsersCountDensityGroupByTagTest() {
     final double expectedValue = 26.75;
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
-        + "/users/count/density/groupBy/tag?bboxes=8.67,49.39941,8.69545,49.4096&types=way"
-        + "&time=2014-01-01,2015-01-01&groupByKey=building&showMetadata=true", JsonNode.class);
+        + "/users/count/density/groupBy/tag?bboxes=8.67,49.39941,8.69545,49.4096"
+        + "&time=2014-01-01,2015-01-01&groupByKey=building&filter=type:way", JsonNode.class);
     assertEquals(expectedValue, StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(
             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
@@ -644,8 +646,8 @@ public void getUsersCountGroupByBoundaryTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
         + "/users/count/groupBy/boundary?bboxes=a:8.67452,49.40961,8.70392,49.41823|"
-        + "b:8.67,49.39941,8.69545,49.4096&types=way&time=2014-01-01,2015-01-01&showMetadata=true"
-        + "&keys=building", JsonNode.class);
+        + "b:8.67,49.39941,8.69545,49.4096&time=2014-01-01,2015-01-01"
+        + "&filter=building=* and type:way", JsonNode.class);
     assertEquals(29,
         StreamSupport
             .stream(Spliterators.spliteratorUnknownSize(
@@ -666,8 +668,8 @@ public void getUsersCountDensityGroupByBoundaryTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
         + "/users/count/density/groupBy/boundary?bboxes=a:8.67452,49.40961,8.70392,49.41823|"
-        + "b:8.67,49.39941,8.69545,49.4096&types=way&time=2014-01-01,2015-01-01&showMetadata=true"
-        + "&keys=building", JsonNode.class);
+        + "b:8.67,49.39941,8.69545,49.4096&time=2014-01-01,2015-01-01"
+        + "&filter=type:way and building=*", JsonNode.class);
     assertEquals(expectedValue,
         StreamSupport
             .stream(Spliterators.spliteratorUnknownSize(
@@ -685,7 +687,7 @@ public void getElementsCountCsvTest() throws IOException {
     // expect result to have 1 entry row, with 2 columns
     final double expectedValue = 5.0;
     String responseBody = getResponseBody("/elements/count?"
-        + "bboxes=8.689086,49.40268,8.689606,49.402973&types=way&time=2019-01-01" + "&format=csv");
+        + "bboxes=8.689086,49.40268,8.689606,49.402973&time=2019-01-01&format=csv&filter=type:way");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -699,9 +701,8 @@ public void getElementsCountDensityCsvTest() throws IOException {
     // expect result to have 1 entry row, with 2 columns
     // bbox contains 2 shops(bbox 1 ~ 0.01kmÂ²)
     final double expectedValue = 215.87;
-    String responseBody =
-        getResponseBody("/elements/count/density?" + "bboxes=8.6889,49.39281,8.69025,49.39366&"
-            + "types=node&time=2017-01-01&keys=shop&format=csv");
+    String responseBody = getResponseBody("/elements/count/density?bboxes=8.6889,49.39281,8.69025,"
+        + "49.39366&time=2017-01-01&format=csv&filter=type:node and shop=*");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -716,8 +717,8 @@ public void getElementsCountDensityGroupByBoundaryCsvTest() throws IOException {
     // bbox 1 contains 3, bbox 2 contains 0 residential buildings (bbox 1 ~ 1kmÂ²)
     final double expectedValue = 3.76;
     String responseBody = getResponseBody("/elements/count/density/groupBy/boundary?"
-        + "bboxes=8.678,49.41254,8.69074,49.4203|8.67959,49.41039,8.68092,49.41125&"
-        + "types=way&time=2017-07-01&keys=building&values=residential&format=csv");
+        + "bboxes=8.678,49.41254,8.69074,49.4203|8.67959,49.41039,8.68092,49.41125"
+        + "&time=2017-07-01&format=csv&filter=type:way and building=residential");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -733,8 +734,8 @@ public void getElementsCountDensityGroupByBoundaryGroupByTagCsvTest() throws IOE
     final double expectedValue = 1455.77;
     String responseBody = getResponseBody("/elements/count/density/groupBy/boundary/"
         + "groupBy/tag?bboxes=b1:8.692826,49.399133,8.693497,49.399388"
-        + "|b2:8.69376,49.398376,8.69443,49.39863&types=way&time=2016-11-09&keys=building&"
-        + "groupByKey=building&format=csv&groupByValues=garage,residential");
+        + "|b2:8.69376,49.398376,8.69443,49.39863&time=2016-11-09&groupByKey=building&format=csv"
+        + "&groupByValues=garage,residential&filter=type:way and building=*");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -750,7 +751,7 @@ public void getElementsCountDensityGroupByTagCsvTest() throws IOException {
     final double expectedValue = 35.08;
     String responseBody = getResponseBody("/elements/count/density/groupBy/tag?"
         + "bboxes=8.687208,49.403608,8.690481,49.404687&format=csv&"
-        + "groupByKey=building&groupByValues=church,synagogue&time=2019-01-01&types=way");
+        + "groupByKey=building&groupByValues=church,synagogue&time=2019-01-01&filter=type:way");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -765,12 +766,12 @@ public void getElementsCountDensityGroupByTypeCsvTest() throws IOException {
     // bbox contains 1 way and 1 relation with highway=pedestrian
     final double expectedValue = 2556.22;
     String responseBody = getResponseBody("/elements/count/density/groupBy/type?"
-        + "bboxes=8.694322,49.409853,8.694584,49.410038&keys=highway&values=pedestrian"
-        + "&types=way,relation&time=2015-01-01&format=csv");
+        + "bboxes=8.694322,49.409853,8.694584,49.410038&time=2015-01-01&format=csv"
+        + "&filter=(type:way or type:relation) and highway=pedestrian");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
-    assertEquals(3, headers.size());
+    assertEquals(4, headers.size());
     assertEquals(expectedValue, Double.parseDouble(records.get(0).get("RELATION")),
         expectedValue * deltaPercentage);
   }
@@ -781,8 +782,8 @@ public void getElementsCountGroupByBoundaryCsvTest() throws IOException {
     final double expectedValue = 2.0;
     String responseBody = getResponseBody("/elements/count/groupBy/boundary?"
         + "bboxes=8.672445,49.418337,8.673196,49.419087|"
-        + "8.670868,49.418892,8.672188,49.419216&types=node&time=2017-05-01&keys=bicycle_parking"
-        + "&values=stands&format=csv");
+        + "8.670868,49.418892,8.672188,49.419216&time=2017-05-01&format=csv"
+        + "&filter=type:node and bicycle_parking=stands");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -798,9 +799,8 @@ public void getElementsCountGroupByBoundaryGroupByTagCsvTest() throws IOExceptio
     // remainder , key=value 1 , ... , key=value N
     final double expectedValue = 5.0;
     String responseBody = getResponseBody("/elements/count/groupBy/boundary/groupBy/tag?"
-        + "bboxes=8.673025,49.41914,8.673931,49.419597|8.671206,49.419401,8.672215,49.41951&"
-        + "types=way,node,relation&time=2016-11-09&&groupByKey=natural&groupByValues=tree,water"
-        + "&format=csv");
+        + "bboxes=8.673025,49.41914,8.673931,49.419597|8.671206,49.419401,8.672215,49.41951"
+        + "&time=2016-11-09&&groupByKey=natural&groupByValues=tree,water&format=csv");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -814,8 +814,8 @@ public void getElementsCountGroupByKeyCsvTest() throws IOException {
     // expect result to have 1 entry row, with 4 columns
     final double expectedValue = 1.0;
     String responseBody =
-        getResponseBody("/elements/count/groupBy/key?" + "bboxes=8.66841,49.40129,8.6728,49.40282&"
-            + "format=csv&groupByKeys=female,male&time=2019-01-01&types=node");
+        getResponseBody("/elements/count/groupBy/key?bboxes=8.66841,49.40129,8.6728,49.40282&"
+            + "format=csv&groupByKeys=female,male&time=2019-01-01&filter=type:node");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -829,9 +829,9 @@ public void getElementsCountGroupByTagCsvTest() throws IOException {
     // expect result to have 1 entry row, with 4 columns
     final double expectedValue = 2.0;
     String responseBody = getResponseBody(
-        "/elements/count/groupBy/tag?" + "bboxes=8.685459,49.412258,8.689724,49.412868"
+        "/elements/count/groupBy/tag?bboxes=8.685459,49.412258,8.689724,49.412868"
             + "&format=csv&groupByKey=amenity&groupByValues=bbq,cafe&time=2019-01-01&"
-            + "types=node,way");
+            + "filter=type:node or type:way");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -846,12 +846,12 @@ public void getElementsCountGroupByTypeCsvTest() throws IOException {
     // type
     final double expectedValue = 2.0;
     String responseBody =
-        getResponseBody("/elements/count/groupBy/type?" + "bboxes=8.68748,49.41404,8.69094,49.41458"
-            + "&format=csv&time=2016-01-01&types=way,node&keys=amenity&values=restaurant");
+        getResponseBody("/elements/count/groupBy/type?bboxes=8.68748,49.41404,8.69094,49.41458"
+            + "&format=csv&time=2016-01-01&filter=(type:way or type:node) and amenity=restaurant");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
-    assertEquals(3, headers.size());
+    assertEquals(4, headers.size());
     assertEquals(expectedValue, Double.parseDouble(records.get(0).get("WAY")),
         expectedValue * deltaPercentage);
   }
@@ -861,8 +861,8 @@ public void getElementsCountRatioCsvTest() throws IOException {
     // expect result to have 1 entry row, with 4 columns
     final double expectedValue = 0.2;
     String responseBody = getResponseBody("/elements/count/ratio?"
-        + "bboxes=8.689317,49.395149,8.689799,49.395547&format=csv&keys=building&"
-        + "keys2=addr:housenumber&time=2018-01-01&types=way&types2=node");
+        + "bboxes=8.689317,49.395149,8.689799,49.395547&format=csv&time=2018-01-01"
+        + "&filter=building=* and type:way&filter2=type:node and addr:housenumber=*");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -877,9 +877,9 @@ public void getElementsCountRatioGroupByBoundaryCsvTest() throws IOException {
     // key=value , key2=value2, ratio)
     final double expectedValue = 0.6;
     String responseBody = getResponseBody(
-        "/elements/count/ratio/groupBy/boundary?" + "bboxes=8.65917,49.39534,8.66428,49.40019|"
-            + "8.65266,49.40178,8.65400,49.40237&format=csv&keys=highway&keys2=name&"
-            + "time=2018-01-01&types=way&types2=way");
+        "/elements/count/ratio/groupBy/boundary?bboxes=8.65917,49.39534,8.66428,49.40019|"
+            + "8.65266,49.40178,8.65400,49.40237&format=csv&time=2018-01-01"
+            + "&filter=highway=* and type:way&filter2=type:way and name=*");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -895,8 +895,8 @@ public void getElementsLengthGroupByBoundaryGroupByTagCsvTest() throws IOExcepti
     final double expectedValue = 44.5;
     String responseBody = getResponseBody("/elements/length/groupBy/boundary/groupBy/tag?"
         + "bboxes=bboxes=b1:8.68593,49.39461,8.68865,49.39529|b2:8.68885,49.39450,8.68994,49.39536"
-        + "&types=way&time=2017-11-25&keys=highway&groupByKey=highway&format=csv&groupByValues="
-        + "service,residential");
+        + "&time=2017-11-25&groupByKey=highway&format=csv&groupByValues=service,residential"
+        + "&filter=type:way and highway=*");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -928,13 +928,12 @@ public void getElementsAreaDensityGroupByTypeCsvTest() throws IOException {
     final double expectedValue1 = 264812.41;
     final double expectedValue2 = 46838.97;
     String responseBody =
-        getResponseBody("/elements/area/density/groupBy/type?" + "bcircles=8.68250,49.39384,300"
-            + "&format=csv&keys=leisure&time=2018-01-01&types=way,relation");
+        getResponseBody("/elements/area/density/groupBy/type?bcircles=8.68250,49.39384,300"
+            + "&format=csv&time=2018-01-01&filter=leisure=* and (type:way or type:relation)");
     final List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
-    assertFalse(headers.containsKey("NODE"));
-    assertEquals(3, headers.size());
+    assertEquals(4, headers.size());
     assertEquals(expectedValue1, Double.parseDouble(records.get(0).get("WAY")),
         expectedValue1 * deltaPercentage);
     assertEquals(expectedValue2, Double.parseDouble(records.get(0).get("RELATION")),
@@ -947,7 +946,7 @@ public void getElementsAreaDensityGroupByTagCsvTest() throws IOException {
     final double expectedValue = 14440.82;
     String responseBody = getResponseBody("/elements/area/density/groupBy/tag?"
         + "bboxes=8.68482,49.40167,8.68721,49.40267&format=csv&groupByKey=building&"
-        + "groupByValues=retail,church&time=2018-10-01&types=way");
+        + "groupByValues=retail,church&time=2018-10-01&filter=type:way");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -958,17 +957,17 @@ public void getElementsAreaDensityGroupByTagCsvTest() throws IOException {
 
   @Test
   public void getElementsAreaGroupByTypeCsvTest() throws IOException {
-    // expect result to have 1 entry row, with 3 columns
+    // expect result to have 1 entry row, with 4 columns
     final double expectedValue = 1984.58;
     String responseBody =
-        getResponseBody("/elements/area/groupBy/type?" + "bcircles=8.689054,49.402481,80&"
-            + "format=csv&keys=building&time=2018-01-01&types=way,relation");
+        getResponseBody("/elements/area/groupBy/type?bcircles=8.689054,49.402481,80&"
+            + "format=csv&time=2018-01-01&filter=building=* and (type:way or type:relation)");
     // way in geojson.io sq meters: 23.97
     // relation in geojson.io sq meters: 5399.27; in response:6448.93; in qgis 5393.5
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
-    assertEquals(3, headers.size());
+    assertEquals(4, headers.size());
     assertEquals(expectedValue, Double.parseDouble(records.get(0).get("WAY")),
         expectedValue * deltaPercentage);
   }
@@ -977,10 +976,9 @@ public void getElementsAreaGroupByTypeCsvTest() throws IOException {
   public void getElementsAreaRatioCsvTest() throws IOException {
     // expect result to have 1 entry row, with 4 columns
     final double expectedValue = 0.041629;
-    String responseBody =
-        getResponseBody("/elements/area/ratio?" + "bboxes=8.68934,49.39415,8.69654,49.39936"
-            + "&format=csv&keys=landuse&keys2=building&time=2018-01-01&"
-            + "types=way&types2=way&values=cemetery&values2=yes");
+    String responseBody = getResponseBody("/elements/area/ratio?"
+        + "bboxes=8.68934,49.39415,8.69654,49.39936&format=csv&time=2018-01-01"
+        + "&filter=type:way and landuse=cemetery&filter2=type:way and building=yes");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -994,8 +992,8 @@ public void getUsersCountCsvTest() throws IOException {
     // expect result to have 3 entry rows (1 row per time interval), with 3 columns
     final double expectedValue = 7.0;
     String responseBody =
-        getResponseBody("/users/count?" + "bboxes=8.69338,49.40772,8.71454,49.41251"
-            + "&format=csv&keys=shop&time=2014-01-01/2017-01-01/P1Y&types=node&values=clothes");
+        getResponseBody("/users/count?bboxes=8.69338,49.40772,8.71454,49.41251&format=csv"
+            + "&time=2014-01-01/2017-01-01/P1Y&filter=type:node and shop=clothes");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(3, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -1009,8 +1007,8 @@ public void getUsersCountDensityCsvTest() throws IOException {
     // expect result to have 3 entry rows (1 row per time interval), with 3 columns
     final double expectedValue = 28.85;
     String responseBody = getResponseBody(
-        "users/count/density?" + "bcircles=8.68628,49.41117,200|8.68761,49.40819,200"
-            + "&format=csv&keys=wheelchair&time=2014-01-01/2017-01-01/P1Y&types=way&values=yes");
+        "users/count/density?bcircles=8.68628,49.41117,200|8.68761,49.40819,200"
+            + "&format=csv&time=2014-01-01/2017-01-01/P1Y&filter=type:way and wheelchair=yes");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(3, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -1023,14 +1021,13 @@ public void getUsersCountDensityCsvTest() throws IOException {
   public void getUsersCountDensityGroupByTypeCsvTest() throws IOException {
     // expect result to have 3 entry rows (1 row per time interval)
     final double expectedValue = 3854.35;
-    String responseBody = getResponseBody(
-        "users/count/density/groupBy/type?" + "bboxes=8.691773,49.413804,8.692149,49.413975"
-            + "&format=csv&keys=addr:housenumber&time=2014-01-01/2017-01-01/P1Y"
-            + "&types=way,node&values=5");
+    String responseBody = getResponseBody("users/count/density/groupBy/type?"
+        + "bboxes=8.691773,49.413804,8.692149,49.413975&format=csv&time=2014-01-01/2017-01-01/P1Y"
+        + "&filter=addr:housenumber=5 and (type:way or type:node)");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(3, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
-    assertEquals(4, headers.size());
+    assertEquals(5, headers.size());
     assertEquals(expectedValue, Double.parseDouble(records.get(0).get("NODE")),
         expectedValue * deltaPercentage);
   }
@@ -1040,9 +1037,9 @@ public void getUsersCountGroupByTagCsvTest() throws IOException {
     // expect result to have 3 entry rows (1 row per time interval)
     final double expectedValue = 2.0;
     String responseBody =
-        getResponseBody("users/count/groupBy/tag?" + "bboxes=8.691865,49.413835,8.692605,49.414756"
+        getResponseBody("users/count/groupBy/tag?bboxes=8.691865,49.413835,8.692605,49.414756"
             + "&format=csv&groupByKey=shop&time=2015-01-01/2018-01-01/P1Y"
-            + "&types=node&groupByValues=clothes,wine");
+            + "&groupByValues=clothes,wine&filter=type:node");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(3, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
@@ -1055,14 +1052,13 @@ public void getUsersCountGroupByTagCsvTest() throws IOException {
   public void getUsersCountGroupByTypeCsvTest() throws IOException {
     // expect result to have 3 entry rows (1 row per time interval)
     final double expectedValue = 1.0;
-    String responseBody =
-        getResponseBody("users/count/groupBy/type?" + "bboxes=8.700609,49.409336,8.701488,49.409591"
-            + "&format=csv&keys=addr:housenumber,addr:street&time=2010-01-01/2013-01-01/P1Y"
-            + "&types=way,node&values=,PlÃ¶ck");
+    String responseBody = getResponseBody("users/count/groupBy/type?"
+        + "bboxes=8.700609,49.409336,8.701488,49.409591&format=csv&time=2010-01-01/2013-01-01/P1Y"
+        + "&filter=(type:way or type:node) and addr:housenumber=* and addr:street=\"PlÃ¶ck\"");
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(3, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
-    assertEquals(4, headers.size());
+    assertEquals(5, headers.size());
     assertEquals(expectedValue, Double.parseDouble(records.get(2).get("WAY")),
         expectedValue * deltaPercentage);
   }
@@ -1075,8 +1071,8 @@ public void getUsersCountGroupByTypeCsvTest() throws IOException {
   public void getElementsCountFilterTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     ResponseEntity<JsonNode> response = restTemplate.getForEntity(
-        server + port + "/elements/count?bboxes=8.67452,49.40961,"
-            + "8.70392,49.41823&time=2015-01-01&filter=building=residential and type:way",
+        server + port + "/elements/count?bboxes=8.67452,49.40961,8.70392,49.41823"
+            + "&time=2015-01-01&filter=building=residential and type:way",
         JsonNode.class);
     assertEquals(40, response.getBody().get("result").get(0).get("value").asInt());
   }
diff --git a/src/test/java/org/heigit/ohsome/ohsomeapi/controller/Helper.java b/src/test/java/org/heigit/ohsome/ohsomeapi/controller/Helper.java
index 56909860..6b2b335a 100644
--- a/src/test/java/org/heigit/ohsome/ohsomeapi/controller/Helper.java
+++ b/src/test/java/org/heigit/ohsome/ohsomeapi/controller/Helper.java
@@ -54,8 +54,8 @@ public static Map<String, Integer> getCsvHeaders(String responseBody) throws IOE
    * Gets the feature from a data-extraction endpoint via the given identifier and corresponding
    * value.
    */
-  public static JsonNode getFeatureByIdentifier(ResponseEntity<JsonNode> response, String identifier,
-      String value) {
+  public static JsonNode getFeatureByIdentifier(ResponseEntity<JsonNode> response,
+      String identifier, String value) {
     return StreamSupport
         .stream(Spliterators.spliteratorUnknownSize(response.getBody().get("features").iterator(),
             Spliterator.ORDERED), false)
diff --git a/src/test/java/org/heigit/ohsome/ohsomeapi/controller/PostControllerTest.java b/src/test/java/org/heigit/ohsome/ohsomeapi/controller/PostControllerTest.java
index fb030742..3aa97b85 100644
--- a/src/test/java/org/heigit/ohsome/ohsomeapi/controller/PostControllerTest.java
+++ b/src/test/java/org/heigit/ohsome/ohsomeapi/controller/PostControllerTest.java
@@ -113,10 +113,8 @@ public void elementsCountTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.67452,49.40961,8.70392,49.41823");
-    map.add("types", "way");
     map.add("time", "2013-01-01/2016-01-01/P1Y");
-    map.add("keys", "building");
-    map.add("values", "residential");
+    map.add("filter", "type:way and building=residential");
     ResponseEntity<JsonNode> response =
         restTemplate.postForEntity(server + port + "/elements/count", map, JsonNode.class);
     assertEquals(40, StreamSupport
@@ -137,9 +135,8 @@ public void elementsCountGroupByBoundaryGeoJsonTest() {
             + "[8.67902,49.41460],[8.69009,49.41527],[8.68494,49.41951]]]}},{\"type\":\"Feature\","
             + "\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[8.68812,"
             + "49.40466],[8.68091,49.40058],[8.69121,49.40069],[8.68812,49.40466]]]}}]}");
-    map.add("types", "way");
     map.add("time", "2016-01-01");
-    map.add("keys", "building");
+    map.add("filter", "type:way and building=*");
     map.add("format", "geojson");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elements/count/groupBy/boundary", map, JsonNode.class);
@@ -156,9 +153,8 @@ public void elementsCountSimpleFeaturePointTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.6475,49.4002,8.7057,49.4268");
-    map.add("types", "point");
     map.add("time", "2013-01-01/2016-01-01/P1Y");
-    map.add("keys", "building");
+    map.add("filter", "geometry:point and building=*");
     ResponseEntity<JsonNode> response =
         restTemplate.postForEntity(server + port + "/elements/count", map, JsonNode.class);
     assertEquals(64, StreamSupport
@@ -175,9 +171,8 @@ public void elementsCountSimpleFeaturePointLineTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.663031,49.41513,8.663616,49.415451");
-    map.add("types", "point,line");
     map.add("time", "2018-01-01");
-    map.add("keys", "highway");
+    map.add("filter", "(geometry:point or geometry:line) and highway=*");
     ResponseEntity<JsonNode> response =
         restTemplate.postForEntity(server + port + "/elements/count", map, JsonNode.class);
     assertEquals(5, StreamSupport
@@ -193,9 +188,8 @@ public void elementsCountSimpleFeatureLineTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.6519,49.3758,8.721,49.4301");
-    map.add("types", "line");
     map.add("time", "2013-01-01/2016-01-01/P1Y");
-    map.add("keys", "building");
+    map.add("filter", "geometry:line and building=*");
     ResponseEntity<JsonNode> response =
         restTemplate.postForEntity(server + port + "/elements/count", map, JsonNode.class);
     assertEquals(2, StreamSupport
@@ -211,10 +205,8 @@ public void elementsCountSimpleFeaturePolygonTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.6519,49.3758,8.721,49.4301");
-    map.add("types", "polygon");
     map.add("time", "2015-01-01/2019-01-01/P1Y");
-    map.add("keys", "leisure");
-    map.add("values", "track");
+    map.add("filter", "geometry:polygon and leisure=track");
     ResponseEntity<JsonNode> response =
         restTemplate.postForEntity(server + port + "/elements/count", map, JsonNode.class);
     assertEquals(11, StreamSupport
@@ -230,10 +222,8 @@ public void elementsCountSimpleFeatureOtherTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.6519,49.3758,8.721,49.4301");
-    map.add("types", "other");
     map.add("time", "2015-01-01/2019-01-01/P1Y");
-    map.add("keys", "type");
-    map.add("values", "restriction");
+    map.add("filter", "geometry:other and type=restriction");
     ResponseEntity<JsonNode> response =
         restTemplate.postForEntity(server + port + "/elements/count", map, JsonNode.class);
     assertEquals(246, StreamSupport
@@ -250,9 +240,8 @@ public void elementsCountGroupByTypeSimpleFeaturePointPolygonTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.690314,49.409546,8.690861,49.409752");
-    map.add("types", "point,polygon");
     map.add("time", "2017-03-01");
-    map.add("keys", "building");
+    map.add("filter", "building=* and (geometry:polygon or geometry:point)");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elements/count/groupBy/type", map, JsonNode.class);
     assertEquals(2,
@@ -271,10 +260,8 @@ public void elementsPerimeterTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.69416,49.40969,8.71154,49.41161");
-    map.add("types", "way");
     map.add("time", "2013-01-01/2016-01-01/P1Y");
-    map.add("keys", "building");
-    map.add("values", "residential");
+    map.add("filter", "type:way and building=residential");
     ResponseEntity<JsonNode> response =
         restTemplate.postForEntity(server + port + "/elements/perimeter", map, JsonNode.class);
     assertEquals(expectedValue, StreamSupport
@@ -292,10 +279,8 @@ public void elementsPerimeterGroupByBoundaryTest() {
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "Weststadt:8.68081,49.39821,8.69528,49.40687|Neuenheim:8.67691,"
         + "49.41256,8.69304,49.42331");
-    map.add("types", "way");
     map.add("time", "2016-01-01");
-    map.add("keys", "building");
-    map.add("values", "residential");
+    map.add("filter", "type:way and building=residential");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elements/perimeter/groupBy/boundary", map, JsonNode.class);
     assertEquals(expectedValue, StreamSupport
@@ -313,9 +298,8 @@ public void elementsPerimeterGroupByBoundaryGroupByTagTest() {
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "Weststadt:8.68081,49.39821,8.69528,49.40687|Neuenheim:8.67691,"
         + "49.41256,8.69304,49.42331");
-    map.add("types", "way");
     map.add("time", "2016-07-01");
-    map.add("keys", "building");
+    map.add("filter", "type:way and building=*");
     map.add("groupByKey", "building");
     map.add("groupByValues", "residential,garage");
     ResponseEntity<JsonNode> response = restTemplate.postForEntity(
@@ -337,9 +321,8 @@ public void elementsPerimeterGroupByTypeTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way,relation");
     map.add("time", "2016-01-01");
-    map.add("keys", "building");
+    map.add("filter", "(type:way or type:relation) and building=*");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elements/perimeter/groupBy/type", map, JsonNode.class);
     assertEquals(expectedValue,
@@ -357,9 +340,9 @@ public void elementsPerimeterGroupByKeyTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way");
     map.add("time", "2016-01-01");
     map.add("groupByKeys", "building,highway");
+    map.add("filter", "type:way");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elements/perimeter/groupBy/key", map, JsonNode.class);
     assertEquals(expectedValue,
@@ -377,9 +360,9 @@ public void elementsPerimeterGroupByTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way");
     map.add("time", "2015-01-01");
     map.add("groupByKey", "building");
+    map.add("filter", "type:way");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elements/perimeter/groupBy/tag", map, JsonNode.class);
     assertEquals(expectedValue, StreamSupport
@@ -396,11 +379,9 @@ public void elementsPerimeterRatioTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way");
-    map.add("keys", "building");
+    map.add("filter", "type:way and building=*");
+    map.add("filter2", "type:relation and building=*");
     map.add("time", "2015-01-01");
-    map.add("types2", "relation");
-    map.add("keys2", "building");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elements/perimeter/ratio", map, JsonNode.class);
     assertEquals(expectedValue,
@@ -415,13 +396,9 @@ public void elementsPerimeterRatioGroupByBoundaryTest() {
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "Weststadt:8.68081,49.39821,8.69528,49.40687|Neuenheim:8.67691,49.41256,"
         + "8.69304,49.42331");
-    map.add("types", "way");
-    map.add("keys", "building");
     map.add("time", "2015-01-01");
-    map.add("values", "yes");
-    map.add("types2", "relation");
-    map.add("keys2", "building");
-    map.add("values2", "yes");
+    map.add("filter", "type:way and building=yes");
+    map.add("filter2", "type:relation and building=yes");
     ResponseEntity<JsonNode> response = restTemplate.postForEntity(
         server + port + "/elements/perimeter/ratio/groupBy/boundary", map, JsonNode.class);
     assertEquals(expectedValue, StreamSupport
@@ -440,10 +417,8 @@ public void elementsPerimeterDensityTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.69416,49.40969,8.71154,49.41161");
-    map.add("types", "way");
     map.add("time", "2015-01-01");
-    map.add("keys", "building");
-    map.add("values", "residential");
+    map.add("filter", "type:way and building=residential");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elements/perimeter/density", map, JsonNode.class);
     assertEquals(expectedValue, response.getBody().get("result").get(0).get("value").asDouble(),
@@ -456,9 +431,8 @@ public void elementsPerimeterDensityGroupByTypeTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way,relation");
     map.add("time", "2015-01-01");
-    map.add("keys", "building");
+    map.add("filter", "(type:way or type:relation) and building=*");
     ResponseEntity<JsonNode> response = restTemplate.postForEntity(
         server + port + "/elements/perimeter/density/groupBy/type", map, JsonNode.class);
     assertEquals(expectedValue,
@@ -476,9 +450,8 @@ public void elementsPerimeterDensityGroupByTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way");
     map.add("time", "2015-01-01");
-    map.add("keys", "building");
+    map.add("filter", "type:way and building=*");
     map.add("groupByKey", "building");
     map.add("groupByValues", "yes");
     ResponseEntity<JsonNode> response = restTemplate.postForEntity(
@@ -498,10 +471,8 @@ public void elementsPerimeterDensityGroupByBoundaryTest() {
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "Weststadt:8.68081,49.39821,8.69528,49.40687|Neuenheim:8.67691,49.41256,"
         + "8.69304,49.42331");
-    map.add("types", "way");
     map.add("time", "2015-01-01");
-    map.add("keys", "building");
-    map.add("values", "residential");
+    map.add("filter", "type:way and building=residential");
     ResponseEntity<JsonNode> response = restTemplate.postForEntity(
         server + port + "/elements/perimeter/density/groupBy/boundary", map, JsonNode.class);
     assertEquals(expectedValue, StreamSupport
@@ -518,9 +489,8 @@ public void elementsPerimeterDensityGroupByBoundaryGroupByTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "Weststadt:8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way");
     map.add("time", "2016-07-09");
-    map.add("keys", "building");
+    map.add("filter", "type:way and building=*");
     map.add("groupByKey", "building");
     ResponseEntity<JsonNode> response = restTemplate.postForEntity(
         server + port + "/elements/perimeter/density/groupBy/boundary/groupBy/tag", map,
@@ -543,8 +513,8 @@ public void elementsPerimeterGroupByKeySimpleFeaturePolygonTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.662714,49.413594,8.663337,49.414324");
-    map.add("types", "polygon");
     map.add("time", "2018-03-24");
+    map.add("filter", "geometry:polygon");
     map.add("groupByKeys", "building,landuse");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elements/perimeter/groupBy/key", map, JsonNode.class);
@@ -566,10 +536,8 @@ public void elementsAreaTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.69416,49.40969,8.71154,49.41161");
-    map.add("types", "way");
     map.add("time", "2015-01-01");
-    map.add("keys", "building");
-    map.add("values", "residential");
+    map.add("filter", "type:way and building=residential");
     ResponseEntity<JsonNode> response =
         restTemplate.postForEntity(server + port + "/elements/area", map, JsonNode.class);
     assertEquals(expectedValue, response.getBody().get("result").get(0).get("value").asDouble(),
@@ -583,10 +551,8 @@ public void elementsAreaGroupByBoundaryTest() {
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "Weststadt:8.68081,49.39821,8.69528,49.40687|Neuenheim:8.67691,49.41256,"
         + "8.69304,49.42331");
-    map.add("types", "way");
     map.add("time", "2015-01-01");
-    map.add("keys", "building");
-    map.add("values", "residential");
+    map.add("filter", "type:way and building=residential");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elements/area/groupBy/boundary", map, JsonNode.class);
     assertEquals(expectedValue, StreamSupport
@@ -603,9 +569,8 @@ public void elementsAreaGroupByBoundaryGroupByTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "b1:8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way");
     map.add("time", "2014-07-09");
-    map.add("keys", "building");
+    map.add("filter", "type:way and building=*");
     map.add("groupByKey", "building");
     map.add("groupByValues", "residential,garage");
     ResponseEntity<JsonNode> response = restTemplate.postForEntity(
@@ -626,9 +591,8 @@ public void elementsAreaGroupByTypeTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way,relation");
     map.add("time", "2017-01-01");
-    map.add("keys", "building");
+    map.add("filter", "(type:way or type:relation) and building=*");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elements/area/groupBy/type", map, JsonNode.class);
     assertEquals(expectedValue,
@@ -646,7 +610,7 @@ public void elementsAreaGroupByKeyTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way");
+    map.add("filter", "type:way");
     map.add("time", "2017-01-01");
     map.add("groupByKeys", "building");
     ResponseEntity<JsonNode> response = restTemplate
@@ -666,7 +630,7 @@ public void elementsAreaGroupByTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way");
+    map.add("filter", "type:way");
     map.add("time", "2017-01-01");
     map.add("groupByKey", "building");
     ResponseEntity<JsonNode> response = restTemplate
@@ -685,11 +649,9 @@ public void elementsAreaRatioTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way");
-    map.add("keys", "building");
     map.add("time", "2017-01-01");
-    map.add("types2", "relation");
-    map.add("keys2", "building");
+    map.add("filter", "type:way and building=*");
+    map.add("filter2", "type:relation and building=*");
     ResponseEntity<JsonNode> response =
         restTemplate.postForEntity(server + port + "/elements/area/ratio", map, JsonNode.class);
     assertEquals(expectedValue,
@@ -704,11 +666,9 @@ public void elementsAreaRatioGroupByBoundaryTest() {
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "Neuenheim:8.67691,49.41256,8.69304,49.42331|"
         + "Weststadt:8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way");
-    map.add("keys", "building");
     map.add("time", "2017-01-01");
-    map.add("types2", "relation");
-    map.add("keys2", "building");
+    map.add("filter", "type:way and building=*");
+    map.add("filter2", "type:relation and building=*");
     ResponseEntity<JsonNode> response = restTemplate.postForEntity(
         server + port + "/elements/area/ratio/groupBy/boundary", map, JsonNode.class);
     assertEquals(expectedValue, response.getBody().get("groupByBoundaryResult").get(1)
@@ -721,10 +681,8 @@ public void elementsAreaDensityTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.69416,49.40969,8.71154,49.41161");
-    map.add("types", "way");
     map.add("time", "2017-01-01");
-    map.add("keys", "building");
-    map.add("values", "yes");
+    map.add("filter", "type:way and building=yes");
     ResponseEntity<JsonNode> response =
         restTemplate.postForEntity(server + port + "/elements/area/density", map, JsonNode.class);
     assertEquals(expectedValue, response.getBody().get("result").get(0).get("value").asDouble(),
@@ -737,25 +695,25 @@ public void elementsAreaDensityGroupByTypeTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.69416,49.40969,8.71154,49.41161");
-    map.add("types", "way,relation");
     map.add("time", "2017-01-01");
-    map.add("keys", "building");
+    map.add("filter", "building=* and (type:way or type:relation)");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elements/area/density/groupBy/type", map, JsonNode.class);
     assertEquals(expectedValue,
-        response.getBody().get("groupByResult").get(1).get("result").get(0).get("value").asDouble(),
+        response.getBody().get("groupByResult").get(2).get("result").get(0).get("value").asDouble(),
         expectedValue * deltaPercentage);
   }
 
+
   @Test
   public void elementsAreaDensityGroupByTagTest() {
     final double expectedValue = 404281.85;
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.69416,49.40969,8.71154,49.41161");
-    map.add("types", "way");
     map.add("time", "2017-01-01");
     map.add("groupByKey", "building");
+    map.add("filter", "type:way");
     ResponseEntity<JsonNode> response = restTemplate
         .postForEntity(server + port + "/elements/area/density/groupBy/tag", map, JsonNode.class);
     assertEquals(expectedValue, StreamSupport
@@ -773,9 +731,8 @@ public void elementsAreaDensityGroupByBoundaryTest() {
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "Weststadt:8.68081,49.39821,8.69528,49.40687|Neuenheim:8.67691,49.41256,"
         + "8.69304,49.42331");
-    map.add("types", "way");
     map.add("time", "2017-01-01");
-    map.add("keys", "building");
+    map.add("filter", "type:way and building=*");
     ResponseEntity<JsonNode> response = restTemplate.postForEntity(
         server + port + "/elements/area/density/groupBy/boundary", map, JsonNode.class);
     assertEquals(expectedValue,
@@ -789,7 +746,7 @@ public void elementsAreaDensityGroupByBoundaryGroupByTagTest() {
     TestRestTemplate restTemplate = new TestRestTemplate();
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "b1:8.68081,49.39821,8.69528,49.40687");
-    map.add("types", "way");
+    map.add("filter", "type:way");
     map.add("time", "2014-07-09");
     map.add("groupByKey", "building");
     map.add("groupByValues", "residential,garage");
@@ -814,9 +771,7 @@ public void elementsAreaSimpleFeaturePolygonTest() {
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.68815,49.41964,8.68983,49.42045");
     map.add("time", "2019-01-01");
-    map.add("types", "polygon");
-    map.add("keys", "highway");
-    map.add("values", "pedestrian");
+    map.add("filter", "geometry:polygon and highway=pedestrian");
     ResponseEntity<JsonNode> response =
         restTemplate.postForEntity(server + port + "/elements/area", map, JsonNode.class);
     assertEquals(expectedValue, response.getBody().get("result").get(0).get("value").asDouble(),
@@ -830,12 +785,8 @@ public void elementsAreaRatioSimpleFeaturePolygonTest() {
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.679789,49.409088,8.680535,49.40943");
     map.add("time", "2018-12-01");
-    map.add("types", "polygon");
-    map.add("types2", "polygon");
-    map.add("keys", "leisure");
-    map.add("keys2", "name");
-    map.add("values", "swimming_pool");
-    map.add("values2", "Schwimmerbecken");
+    map.add("filter", "geometry:polygon and leisure=swimming_pool");
+    map.add("filter2", "geometry:polygon and name=Schwimmerbecken");
     ResponseEntity<JsonNode> response =
         restTemplate.postForEntity(server + port + "/elements/area/ratio", map, JsonNode.class);
     assertEquals(expectedValue,
@@ -850,7 +801,7 @@ public void elementsAreaGroupByTagSimpleFeaturePolygonTest() {
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "b1:8.68287,49.36967,8.68465,49.37135");
     map.add("time", "2019-01-01");
-    map.add("types", "polygon");
+    map.add("filter", "geometry:polygon");
     map.add("groupByKey", "leisure");
     map.add("groupByValues", "pitch,sports_centre");
     ResponseEntity<JsonNode> response = restTemplate
@@ -872,11 +823,9 @@ public void elementsLengthCsvTest() throws IOException {
     // expect result to have 1 entry rows with 2 columns
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.67508,49.37834,8.67565,49.38026");
-    map.add("types", "way");
     map.add("time", "2019-01-11");
-    map.add("keys", "railway");
-    map.add("values", "platform");
     map.add("format", "csv");
+    map.add("filter", "type:way and railway=platform");
     String responseBody = Helper.getPostResponseBody("/elements/length", map);
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
@@ -892,11 +841,11 @@ public void elementsLengthDensityGroupByTagCsvTest() throws IOException {
     // expect result to have 1 entry rows with 4 columns
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.687782,49.412861,8.687986,49.412945");
-    map.add("types", "way");
     map.add("time", "2017-08-04");
     map.add("groupByKey", "highway");
     map.add("groupByValues", "path,footway");
     map.add("format", "csv");
+    map.add("filter", "type:way");
     String responseBody = Helper.getPostResponseBody("/elements/length/density/groupBy/tag", map);
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
@@ -913,14 +862,10 @@ public void elementsLengthRatioGroupByBoundaryCsvTest() throws IOException {
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes",
         "8.672343,49.413675,8.673797,49.41395|" + "8.674157,49.413455,8.67465,49.413741");
-    map.add("types", "way");
-    map.add("types2", "way");
     map.add("time", "2018-01-01");
-    map.add("keys", "highway");
-    map.add("keys2", "highway");
-    map.add("values", "unclassified");
-    map.add("values2", "service");
     map.add("format", "csv");
+    map.add("filter", "type:way and highway=unclassified");
+    map.add("filter2", "type:way and highway=service");
     String responseBody =
         Helper.getPostResponseBody("/elements/length/ratio/" + "groupBy/boundary", map);
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
@@ -933,31 +878,31 @@ public void elementsLengthRatioGroupByBoundaryCsvTest() throws IOException {
 
   @Test
   public void elementsLengthGroupByTypeCsvTest() throws IOException {
-    // expect result to have 1 entry rows with 3 columns
+    // expect result to have 1 entry rows with 4 columns
     final double expectedValue = 106.16;
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.675873,49.412488,8.676082,49.412701");
-    map.add("types", "way,relation");
     map.add("time", "2018-01-01");
-    map.add("keys", "name");
     map.add("format", "csv");
+    map.add("filter", "(type:way or type:relation) and name=*");
     String responseBody = Helper.getPostResponseBody("/elements/length/groupBy/type", map);
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
-    assertEquals(3, headers.size());
+    assertEquals(4, headers.size());
     assertEquals(expectedValue, Double.parseDouble(records.get(0).get("RELATION")),
         expectedValue * deltaPercentage);
   }
 
 
+
   @Test
   public void elementsLengthGroupByBoundaryGroupByTagSimpleFeatureCsvTest() throws IOException {
     // expect result to have 1 entry rows with 9 columns
     final double expectedValue = 226.58;
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "b1:8.69205,49.41164,8.69319,49.41287|b2:8.66785,49.40973,8.66868,49.41176");
-    map.add("types", "line");
+    map.add("filter", "geometry:line");
     map.add("time", "2017-09-02");
     map.add("groupByKey", "highway");
     map.add("groupByValues", "path,primary,footway");
@@ -980,11 +925,9 @@ public void elementsPerimeterCsvTest() throws IOException {
     final double expectedValue = 662.23;
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.68855,49.40193,8.68979,49.40316");
-    map.add("types", "relation");
     map.add("time", "2017-01-01");
-    map.add("keys", "building");
-    map.add("values", "hospital");
     map.add("format", "csv");
+    map.add("filter", "type:relation and building=hospital");
     String responseBody = Helper.getPostResponseBody("/elements/perimeter", map);
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
@@ -1001,12 +944,11 @@ public void elementsPerimeterGroupByBoundaryGroupByTagCsvTest() throws IOExcepti
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "Weststadt:8.68081,49.39821,8.69528,49.40687|Neuenheim:8.676699,"
         + "49.414781,8.678003,49.415371");
-    map.add("types", "way");
     map.add("time", "2016-07-01");
-    map.add("keys", "building");
     map.add("groupByKey", "building");
     map.add("groupByValues", "house");
     map.add("format", "csv");
+    map.add("filter", "type:way and building=*");
     String responseBody =
         Helper.getPostResponseBody("/elements/perimeter/" + "groupBy/boundary/groupBy/tag", map);
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
@@ -1023,11 +965,9 @@ public void elementsPerimeterDensityGroupByBoundaryCsvTest() throws IOException
     final double expectedValue = 62501.18;
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bcircles", "8.67512, 49.40023,60|8.675659,49.39841,50");
-    map.add("types", "way");
     map.add("time", "2017-03-01");
-    map.add("keys", "building");
-    map.add("values", "yes");
     map.add("format", "csv");
+    map.add("filter", "type:way and building=yes");
     String responseBody =
         Helper.getPostResponseBody("/elements/perimeter/density/" + "groupBy/boundary", map);
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
@@ -1044,7 +984,7 @@ public void elementsPerimeterGroupByKeyCsvTest() throws IOException {
     final double expectedValue = 366.12;
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.685642,49.395621,8.687128,49.396528");
-    map.add("types", "way");
+    map.add("filter", "type:way");
     map.add("time", "2018-01-01");
     map.add("groupByKeys", "building,leisure");
     map.add("format", "csv");
@@ -1064,12 +1004,10 @@ public void elementsPerimeterRatioGroupByBoundaryCsvTest() throws IOException {
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes",
         "8.685642,49.396078,8.687192,49.396528|8.685744,49.395621,8.687294,49.396078");
-    map.add("types", "way");
     map.add("time", "2018-01-01");
-    map.add("keys", "leisure");
-    map.add("keys2", "leisure");
-    map.add("values2", "pitch");
     map.add("format", "csv");
+    map.add("filter", "type:way and leisure=*");
+    map.add("filter2", "leisure=pitch");
     String responseBody =
         Helper.getPostResponseBody("/elements/perimeter/ratio/" + "groupBy/boundary", map);
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
@@ -1086,13 +1024,10 @@ public void elementsAreaRatioGroupByBoundarySimpleFeatureCsvTest() throws IOExce
     final double expectedValue = 0.257533;
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bcircles", "b1:8.70167,49.38686,60|b2: 8.70231,49.38952,60");
-    map.add("types", "polygon");
-    map.add("types2", "polygon");
     map.add("time", "2018-08-09");
-    map.add("keys", "landuse");
-    map.add("keys2", "landuse");
-    map.add("values2", "meadow");
     map.add("format", "csv");
+    map.add("filter", "geometry:polygon and landuse=*");
+    map.add("filter2", "geometry:polygon and landuse=meadow");
     String responseBody = Helper.getPostResponseBody("/elements/area/ratio/groupBy/boundary", map);
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
@@ -1109,12 +1044,11 @@ public void elementsAreaGroupByBoundaryGroupByTagCsvTest() throws IOException {
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes",
         "b1:8.695003,49.399594,8.695421,49.399789|" + "b2:8.687788,49.402997,8.68856,49.403441");
-    map.add("types", "way");
     map.add("time", "2014-07-09");
-    map.add("keys", "building");
     map.add("groupByKey", "building");
     map.add("groupByValues", "garage");
     map.add("format", "csv");
+    map.add("filter", "type:way and building=*");
     String responseBody =
         Helper.getPostResponseBody("/elements/area/" + "groupBy/boundary/groupBy/tag", map);
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
@@ -1127,18 +1061,17 @@ public void elementsAreaGroupByBoundaryGroupByTagCsvTest() throws IOException {
 
   @Test
   public void elementsCountGroupByTypeSimpleFeatureCsvTest() throws IOException {
-    // expect result to have 1 entry rows with 3 columns
+    // expect result to have 1 entry rows with 4 columns
     MultiValueMap<String, String> map = new LinkedMultiValueMap<>();
     map.add("bboxes", "8.688517,49.401936,8.68981,49.403168");
-    map.add("types", "line,polygon");
     map.add("time", "2019-01-01");
-    map.add("keys", "wheelchair");
     map.add("format", "csv");
+    map.add("filter", "(geometry:line or geometry:polygon) and wheelchair=*");
     String responseBody = Helper.getPostResponseBody("/elements/count/groupBy/type", map);
     List<CSVRecord> records = Helper.getCsvRecords(responseBody);
     assertEquals(1, Helper.getCsvRecords(responseBody).size());
     Map<String, Integer> headers = Helper.getCsvHeaders(responseBody);
-    assertEquals(3, headers.size());
+    assertEquals(4, headers.size());
     assertEquals(1.0, Double.parseDouble(records.get(0).get("RELATION")), 0.0);
     assertEquals(1.0, Double.parseDouble(records.get(0).get("WAY")), 0.0);
   }
diff --git a/src/test/java/org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilderTest.java b/src/test/java/org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilderTest.java
index 9ff339bc..54b767c7 100644
--- a/src/test/java/org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilderTest.java
+++ b/src/test/java/org/heigit/ohsome/ohsomeapi/inputprocessing/GeometryBuilderTest.java
@@ -3,12 +3,9 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assume.assumeTrue;
+
 import org.heigit.ohsome.ohsomeapi.controller.TestProperties;
 import org.heigit.ohsome.ohsomeapi.exception.BadRequestException;
-import org.heigit.ohsome.ohsomeapi.inputprocessing.GeometryBuilder;
-import org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessingUtils;
-import org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessor;
-import org.heigit.ohsome.ohsomeapi.inputprocessing.ProcessingData;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
diff --git a/src/test/java/org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessingUtilsTest.java b/src/test/java/org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessingUtilsTest.java
index 4cc4abb0..c90912a7 100644
--- a/src/test/java/org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessingUtilsTest.java
+++ b/src/test/java/org/heigit/ohsome/ohsomeapi/inputprocessing/InputProcessingUtilsTest.java
@@ -2,9 +2,9 @@
 
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assume.assumeTrue;
+
 import org.heigit.ohsome.ohsomeapi.controller.TestProperties;
 import org.heigit.ohsome.ohsomeapi.exception.BadRequestException;
-import org.heigit.ohsome.ohsomeapi.inputprocessing.InputProcessingUtils;
 import org.heigit.ohsome.ohsomeapi.oshdb.ExtractMetadata;
 import org.junit.Before;
 import org.junit.BeforeClass;
