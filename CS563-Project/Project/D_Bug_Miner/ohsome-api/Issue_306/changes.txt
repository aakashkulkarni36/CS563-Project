Issue #306: allow ContributionView-only filters in contribution extraction endpoints
URL: https://github.com/GIScience/ohsome-api/pull/306

Commit ID: 44c01dccf285b2b1b494f0764f8f0f8bc987c362

Commit Message: fix: allow contrib-only filters in contrib extraction endpoint(s), fixes #305

Files Changed (3):
File: CHANGELOG.md ======================
    - Additions: 9
    - Deletions: 0
=======================================================

    +++Added (new line 4): ## 1.10.0-SNAPSHOT (current master)
    +++Added (new line 5): 
    +++Added (new line 6): ### Bug Fixes
    +++Added (new line 7): * Fix bug which prevented some filters (which only work on ContributionView-based queries) to correctly work in contribution extraction endpoints ([#305])
    +++Added (new line 8): 
    +++Added (new line 9): [#305]: https://github.com/GIScience/ohsome-api/issues/305
    +++Added (new line 10): 
    +++Added (new line 11): 
    +++Added (new line 13): 

File: src/main/lombok/org/heigit/ohsome/ohsomeapi/executor/DataRequestExecutor.java ======================
    - Additions: 24
    - Deletions: 23
=======================================================

    +++Added (new line 27): import org.heigit.ohsome.oshdb.util.mappable.OSHDBMapReducible;
    ---Removed (old line 64):     InputProcessor snapshotInputProcessor = new InputProcessor(servletRequest, true, false);
    ---Removed (old line 65):     snapshotInputProcessor.getProcessingData().setFullHistory(true);
    ---Removed (old line 66):     MapReducer<OSMEntitySnapshot> mapRedSnapshot = null;
    ---Removed (old line 67):     MapReducer<OSMContribution> mapRedContribution = null;
    ---Removed (old line 68):     if (DbConnData.db instanceof OSHDBIgnite) {
    ---Removed (old line 69):       // on ignite: Use AffinityCall backend, which is the only one properly supporting streaming
    ---Removed (old line 70):       // of result data, without buffering the whole result in memory before returning the result.
    ---Removed (old line 71):       // This allows to write data out to the client via a chunked HTTP response.
    ---Removed (old line 72):       mapRedSnapshot = snapshotInputProcessor.processParameters(ComputeMode.AFFINITY_CALL);
    ---Removed (old line 73):       mapRedContribution = inputProcessor.processParameters(ComputeMode.AFFINITY_CALL);
    ---Removed (old line 74):     } else {
    ---Removed (old line 75):       mapRedSnapshot = snapshotInputProcessor.processParameters();
    ---Removed (old line 76):       mapRedContribution = inputProcessor.processParameters();
    ---Removed (old line 77):     }
    +++Added (new line 65):     final MapReducer<List<OSMContribution>> mapRedContributions = getMapReducer(inputProcessor);
    ---Removed (old line 105):     MapReducer<List<OSMContribution>> mapRedContributions = mapRedContribution.groupByEntity();
    ---Removed (old line 106):     MapReducer<List<OSMEntitySnapshot>> mapRedSnapshots = mapRedSnapshot.groupByEntity();
    ---Removed (old line 107):     Optional<FilterExpression> filter = processingData.getFilterExpression();
    ---Removed (old line 108):     if (filter.isPresent()) {
    ---Removed (old line 109):       mapRedSnapshots = mapRedSnapshots.filter(filter.get());
    ---Removed (old line 110):       mapRedContributions = mapRedContributions.filter(filter.get());
    ---Removed (old line 111):     }
    ---Removed (old line 114):         startTimestamp, endTimestamp, filter.orElse(null), isContributionsEndpoint,
    ---Removed (old line 115):         isContributionsLatestEndpoint,
    +++Added (new line 95):         startTimestamp, endTimestamp, processingData.getFilterExpression().orElse(null),
    +++Added (new line 96):         isContributionsEndpoint, isContributionsLatestEndpoint,
    +++Added (new line 112):       InputProcessor snapshotInputProcessor = new InputProcessor(servletRequest, true, false);
    +++Added (new line 113):       snapshotInputProcessor.getProcessingData().setFullHistory(true);
    +++Added (new line 114):       MapReducer<List<OSMEntitySnapshot>> mapRedSnapshots = getMapReducer(snapshotInputProcessor);
    +++Added (new line 133): 
    +++Added (new line 134):   private <X extends OSHDBMapReducible> MapReducer<List<X>> getMapReducer(
    +++Added (new line 135):       InputProcessor inputProcessor) throws Exception {
    +++Added (new line 136):     MapReducer<X> mapRed;
    +++Added (new line 137):     if (DbConnData.db instanceof OSHDBIgnite) {
    +++Added (new line 138):       // on ignite: Use AffinityCall backend, which is the only one properly supporting streaming
    +++Added (new line 139):       // of result data, without buffering the whole result in memory before returning the result.
    +++Added (new line 140):       // This allows to write data out to the client via a chunked HTTP response.
    +++Added (new line 141):       mapRed = inputProcessor.processParameters(ComputeMode.AFFINITY_CALL);
    +++Added (new line 142):     } else {
    +++Added (new line 143):       mapRed = inputProcessor.processParameters();
    +++Added (new line 144):     }
    +++Added (new line 145):     MapReducer<List<X>> mapRedGrouped = mapRed.groupByEntity();
    +++Added (new line 146):     Optional<FilterExpression> filter = processingData.getFilterExpression();
    +++Added (new line 147):     return filter.map(mapRedGrouped::filter)
    +++Added (new line 148):         .orElse(mapRedGrouped);
    +++Added (new line 149):   }

File: src/test/java/org/heigit/ohsome/ohsomeapi/controller/DataExtractionTest.java ======================
    - Additions: 14
    - Deletions: 0
=======================================================

    +++Added (new line 463):   @Test
    +++Added (new line 464):   public void contributionsChangesetFilterTest() {
    +++Added (new line 465):     TestRestTemplate restTemplate = new TestRestTemplate();
    +++Added (new line 466):     ResponseEntity<JsonNode> response = restTemplate.getForEntity(server + port
    +++Added (new line 467):         + "/contributions/bbox?bboxes=8.67,49.39,8.71,49.42&clipGeometry=true&"
    +++Added (new line 468):         + "filter=id:way/25316163 and changeset:14227603&"
    +++Added (new line 469):         + "properties=metadata,contributionTypes&time=2012-12-10,2017-12-11",
    +++Added (new line 470):         JsonNode.class);
    +++Added (new line 471):     var features = response.getBody().get("features");
    +++Added (new line 472):     assertEquals(1, features.size());
    +++Added (new line 473):     assertEquals("14227603",
    +++Added (new line 474):         features.get(0).get("properties").get("@contributionChangesetId").asText());
    +++Added (new line 475):   }
    +++Added (new line 476): 

