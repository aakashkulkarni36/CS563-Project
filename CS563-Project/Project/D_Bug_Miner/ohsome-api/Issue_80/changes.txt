Issue #80: fix a regression in v1.2.0
URL: https://github.com/GIScience/ohsome-api/pull/80

Commit ID: 64162b1bee317a835801c88a2cbd24f26bc0d2af

Commit Message: fix a regression in v1.2.0

This reverts commit 360508a6be35a4b0c2d6a9e731d911f1840d3d9e.

Files Changed (9):
File: CHANGELOG.md ======================
    - Additions: 2
    - Deletions: 0
=======================================================

    +++Added (new line 3): * fix a regression in version 1.2.0: `groupBy` requests return the property `groupByObjectId` instead of `groupByObject` as documented.
    +++Added (new line 4): 

File: src/main/java/org/heigit/ohsome/ohsomeapi/controller/dataaggregation/AreaController.java ======================
    - Additions: 6
    - Deletions: 10
=======================================================

    ---Removed (old line 40):    *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate()
    ---Removed (old line 41):    *         aggregate}
    +++Added (new line 40):    *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
    ---Removed (old line 47):   public Response area(HttpServletRequest servletRequest, HttpServletResponse servletResponse)
    ---Removed (old line 48):       throws Exception {
    +++Added (new line 46):   public Response area(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws Exception
    +++Added (new line 47):       {
    ---Removed (old line 81):    *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregateGroupByBoundary()
    ---Removed (old line 82):    *         aggregateGroupByBoundary}
    +++Added (new line 80):    *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregateGroupByBoundary() aggregateGroupByBoundary}
    ---Removed (old line 179):    *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate()
    ---Removed (old line 180):    *         aggregate}
    +++Added (new line 177):    *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregate() aggregate}
    ---Removed (old line 223):    *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregateGroupByBoundary()
    ---Removed (old line 224):    *         aggregateGroupByBoundary}
    +++Added (new line 220):    *         {@link org.heigit.ohsome.ohsomeapi.executor.AggregateRequestExecutor#aggregateGroupByBoundary() aggregateGroupByBoundary}

File: src/main/java/org/heigit/ohsome/ohsomeapi/executor/AggregateRequestExecutor.java ======================
    - Additions: 1
    - Deletions: 1
=======================================================

    ---Removed (old line 288):       Object groupByObject = groupByResult.getGroupByObjectId();
    +++Added (new line 288):       Object groupByObject = groupByResult.getGroupByObject();

File: src/main/java/org/heigit/ohsome/ohsomeapi/executor/ExecutionUtils.java ======================
    - Additions: 5
    - Deletions: 5
=======================================================

    ---Removed (old line 781):       Object groupByObject = groupByResult.getGroupByObjectId();
    +++Added (new line 781):       Object groupByObject = groupByResult.getGroupByObject();
    ---Removed (old line 817):       columnNames.add(ratioGroupByResult.getGroupByObjectId() + "_value");
    ---Removed (old line 818):       columnNames.add(ratioGroupByResult.getGroupByObjectId() + "_value2");
    ---Removed (old line 819):       columnNames.add(ratioGroupByResult.getGroupByObjectId() + "_ratio");
    +++Added (new line 817):       columnNames.add(ratioGroupByResult.getGroupByObject() + "_value");
    +++Added (new line 818):       columnNames.add(ratioGroupByResult.getGroupByObject() + "_value2");
    +++Added (new line 819):       columnNames.add(ratioGroupByResult.getGroupByObject() + "_ratio");
    ---Removed (old line 855):       columnNames.add(groupByResult.getGroupByObjectId().toString());
    +++Added (new line 855):       columnNames.add(groupByResult.getGroupByObject().toString());

File: src/main/java/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/GroupByObject.java ======================
    - Additions: 1
    - Deletions: 1
=======================================================

    ---Removed (old line 21):   protected Object groupByObjectId;
    +++Added (new line 21):   protected Object groupByObject;

File: src/main/java/org/heigit/ohsome/ohsomeapi/output/dataaggregationresponse/groupbyresponse/RatioGroupByResult.java ======================
    - Additions: 2
    - Deletions: 2
=======================================================

    ---Removed (old line 19):   public RatioGroupByResult(Object groupByObjectId, RatioResult[] ratioResult) {
    ---Removed (old line 20):     super(groupByObjectId);
    +++Added (new line 19):   public RatioGroupByResult(Object groupByObject, RatioResult[] ratioResult) {
    +++Added (new line 20):     super(groupByObject);

File: src/main/java/org/heigit/ohsome/ohsomeapi/utils/GroupByBoundaryGeoJsonGenerator.java ======================
    - Additions: 2
    - Deletions: 2
=======================================================

    ---Removed (old line 96):       if (results[groupByResultCount].getGroupByObjectId() instanceof Object[]) {
    +++Added (new line 96):       if (results[groupByResultCount].getGroupByObject() instanceof Object[]) {
    ---Removed (old line 135):     Object groupByBoundaryId = results[groupByResultCount].getGroupByObjectId();
    +++Added (new line 135):     Object groupByBoundaryId = results[groupByResultCount].getGroupByObject();

File: src/test/java/org/heigit/ohsome/ohsomeapi/controller/GetControllerTest.java ======================
    - Additions: 65
    - Deletions: 69
=======================================================

    ---Removed (old line 27):   private static final String GROUP_BY_OBJECT_ID = "groupByObjectId";
    ---Removed (old line 151):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("boundary1"))
    +++Added (new line 150):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("boundary1"))
    ---Removed (old line 162):     assertEquals(43,
    ---Removed (old line 163):         StreamSupport
    ---Removed (old line 164):             .stream(Spliterators.spliteratorUnknownSize(
    ---Removed (old line 165):                 response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    ---Removed (old line 166):             .filter(jsonNode -> "boundary1"
    ---Removed (old line 167):                 .equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(0).asText())
    ---Removed (old line 168):                 && "remainder".equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(1).asText()))
    ---Removed (old line 169):             .findFirst().get().get("result").get(0).get("value").asInt(),
    ---Removed (old line 170):         0);
    +++Added (new line 161):     assertEquals(43, StreamSupport
    +++Added (new line 162):         .stream(Spliterators.spliteratorUnknownSize(
    +++Added (new line 163):             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    +++Added (new line 164):         .filter(
    +++Added (new line 165):             jsonNode -> "boundary1".equalsIgnoreCase(jsonNode.get("groupByObject").get(0).asText())
    +++Added (new line 166):                 && "remainder".equalsIgnoreCase(jsonNode.get("groupByObject").get(1).asText()))
    +++Added (new line 167):         .findFirst().get().get("result").get(0).get("value").asInt(), 0);
    ---Removed (old line 184):             .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("way"))
    +++Added (new line 181):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("way"))
    ---Removed (old line 198):         .filter(
    ---Removed (old line 199):             jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("building=yes"))
    +++Added (new line 195):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("building=yes"))
    ---Removed (old line 211):     assertEquals(7, StreamSupport
    ---Removed (old line 212):         .stream(Spliterators.spliteratorUnknownSize(
    ---Removed (old line 213):             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    ---Removed (old line 214):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("building"))
    ---Removed (old line 215):         .findFirst().get().get("result").get(0).get("value").asInt());
    +++Added (new line 207):     assertEquals(7,
    +++Added (new line 208):         StreamSupport
    +++Added (new line 209):             .stream(Spliterators.spliteratorUnknownSize(
    +++Added (new line 210):                 response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    +++Added (new line 211):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("building"))
    +++Added (new line 212):             .findFirst().get().get("result").get(0).get("value").asInt());
    ---Removed (old line 242):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("boundary1"))
    +++Added (new line 239):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("boundary1"))
    ---Removed (old line 267):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("boundary2"))
    +++Added (new line 264):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("boundary2"))
    ---Removed (old line 281):             .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("way"))
    +++Added (new line 278):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("way"))
    ---Removed (old line 295):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("remainder"))
    +++Added (new line 292):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("remainder"))
    ---Removed (old line 309):         .filter(jsonNode -> "b2".equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(0).asText())
    ---Removed (old line 310):             && "building=church".equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(1).asText()))
    +++Added (new line 306):         .filter(jsonNode -> "b2".equalsIgnoreCase(jsonNode.get("groupByObject").get(0).asText())
    +++Added (new line 307):             && "building=church".equalsIgnoreCase(jsonNode.get("groupByObject").get(1).asText()))
    ---Removed (old line 339):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("boundary1"))
    +++Added (new line 336):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("boundary1"))
    ---Removed (old line 349):     assertEquals(670.61,
    ---Removed (old line 350):         StreamSupport
    ---Removed (old line 351):             .stream(Spliterators.spliteratorUnknownSize(
    ---Removed (old line 352):                 response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    ---Removed (old line 353):             .filter(jsonNode -> "boundary1"
    ---Removed (old line 354):                 .equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(0).asText())
    ---Removed (old line 355):                 && "highway=secondary"
    ---Removed (old line 356):                     .equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(1).asText()))
    ---Removed (old line 357):             .findFirst().get().get("result").get(0).get("value").asDouble(),
    ---Removed (old line 358):         1e-6);
    +++Added (new line 346):     assertEquals(670.61, StreamSupport
    +++Added (new line 347):         .stream(Spliterators.spliteratorUnknownSize(
    +++Added (new line 348):             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    +++Added (new line 349):         .filter(jsonNode -> "boundary1"
    +++Added (new line 350):             .equalsIgnoreCase(jsonNode.get("groupByObject").get(0).asText())
    +++Added (new line 351):             && "highway=secondary".equalsIgnoreCase(jsonNode.get("groupByObject").get(1).asText()))
    +++Added (new line 352):         .findFirst().get().get("result").get(0).get("value").asDouble(), 1e-6);
    ---Removed (old line 372):             .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("way"))
    +++Added (new line 366):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("way"))
    ---Removed (old line 387):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("remainder"))
    +++Added (new line 381):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("remainder"))
    ---Removed (old line 400):         .filter(
    ---Removed (old line 401):             jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("highway=path"))
    +++Added (new line 394):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("highway=path"))
    ---Removed (old line 428):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("boundary1"))
    +++Added (new line 421):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("boundary1"))
    ---Removed (old line 452):             .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("way"))
    +++Added (new line 445):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("way"))
    ---Removed (old line 466):         .filter(
    ---Removed (old line 467):             jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("railway=tram"))
    +++Added (new line 459):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("railway=tram"))
    ---Removed (old line 482):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("boundary2"))
    +++Added (new line 474):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("boundary2"))
    ---Removed (old line 493):     assertEquals(73.71, StreamSupport
    ---Removed (old line 494):         .stream(Spliterators.spliteratorUnknownSize(
    ---Removed (old line 495):             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    ---Removed (old line 496):         .filter(jsonNode -> "b1".equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(0).asText())
    ---Removed (old line 497):             && "highway=steps".equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(1).asText()))
    ---Removed (old line 498):         .findFirst().get().get("result").get(0).get("value").asDouble(), 1e-6);
    +++Added (new line 485):     assertEquals(73.71,
    +++Added (new line 486):         StreamSupport
    +++Added (new line 487):             .stream(Spliterators.spliteratorUnknownSize(
    +++Added (new line 488):                 response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    +++Added (new line 489):             .filter(jsonNode -> "b1".equalsIgnoreCase(jsonNode.get("groupByObject").get(0).asText())
    +++Added (new line 490):                 && "highway=steps".equalsIgnoreCase(jsonNode.get("groupByObject").get(1).asText()))
    +++Added (new line 491):             .findFirst().get().get("result").get(0).get("value").asDouble(),
    +++Added (new line 492):         1e-6);
    ---Removed (old line 527):             .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("way"))
    +++Added (new line 521):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("way"))
    ---Removed (old line 538):     assertEquals(30, StreamSupport
    ---Removed (old line 539):         .stream(Spliterators.spliteratorUnknownSize(
    ---Removed (old line 540):             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    ---Removed (old line 541):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("building"))
    ---Removed (old line 542):         .findFirst().get().get("result").get(0).get("value").asInt());
    +++Added (new line 532):     assertEquals(30,
    +++Added (new line 533):         StreamSupport
    +++Added (new line 534):             .stream(Spliterators.spliteratorUnknownSize(
    +++Added (new line 535):                 response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    +++Added (new line 536):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("building"))
    +++Added (new line 537):             .findFirst().get().get("result").get(0).get("value").asInt());
    ---Removed (old line 555):         .filter(
    ---Removed (old line 556):             jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("building=yes"))
    +++Added (new line 550):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("building=yes"))
    ---Removed (old line 576):     assertEquals(3.83, StreamSupport
    ---Removed (old line 577):         .stream(Spliterators.spliteratorUnknownSize(
    ---Removed (old line 578):             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    ---Removed (old line 579):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("relation"))
    ---Removed (old line 580):         .findFirst().get().get("result").get(0).get("value").asDouble(), 1e-6);
    +++Added (new line 570):     assertEquals(3.83,
    +++Added (new line 571):         StreamSupport
    +++Added (new line 572):             .stream(Spliterators.spliteratorUnknownSize(
    +++Added (new line 573):                 response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    +++Added (new line 574):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("relation"))
    +++Added (new line 575):             .findFirst().get().get("result").get(0).get("value").asDouble(),
    +++Added (new line 576):         1e-6);
    ---Removed (old line 592):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("remainder"))
    +++Added (new line 588):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("remainder"))
    ---Removed (old line 607):             .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("a"))
    +++Added (new line 603):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("a"))
    ---Removed (old line 613):             .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("b"))
    +++Added (new line 609):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("b"))
    ---Removed (old line 628):             .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("b"))
    +++Added (new line 624):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("b"))
    ---Removed (old line 1012):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("b2"))
    +++Added (new line 1008):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("b2"))

File: src/test/java/org/heigit/ohsome/ohsomeapi/controller/PostControllerTest.java ======================
    - Additions: 59
    - Deletions: 54
=======================================================

    ---Removed (old line 28):   private static final String GROUP_BY_OBJECT_ID = "groupByObjectId";
    ---Removed (old line 303):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("Weststadt"))
    +++Added (new line 302):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("Weststadt"))
    ---Removed (old line 320):     assertEquals(3051.72,
    ---Removed (old line 321):         StreamSupport
    ---Removed (old line 322):             .stream(Spliterators.spliteratorUnknownSize(
    ---Removed (old line 323):                 response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    ---Removed (old line 324):             .filter(jsonNode -> "Weststadt"
    ---Removed (old line 325):                 .equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(0).asText())
    +++Added (new line 319):     assertEquals(3051.72, StreamSupport
    +++Added (new line 320):         .stream(Spliterators.spliteratorUnknownSize(
    +++Added (new line 321):             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    +++Added (new line 322):         .filter(
    +++Added (new line 323):             jsonNode -> "Weststadt".equalsIgnoreCase(jsonNode.get("groupByObject").get(0).asText())
    ---Removed (old line 327):                     .equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(1).asText()))
    ---Removed (old line 328):             .findFirst().get().get("result").get(0).get("value").asDouble(),
    ---Removed (old line 329):         1e-6);
    +++Added (new line 325):                     .equalsIgnoreCase(jsonNode.get("groupByObject").get(1).asText()))
    +++Added (new line 326):         .findFirst().get().get("result").get(0).get("value").asDouble(), 1e-6);
    ---Removed (old line 346):             .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("way"))
    +++Added (new line 343):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("way"))
    ---Removed (old line 361):     assertEquals(65283.12, StreamSupport
    ---Removed (old line 362):         .stream(Spliterators.spliteratorUnknownSize(
    ---Removed (old line 363):             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    ---Removed (old line 364):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("building"))
    ---Removed (old line 365):         .findFirst().get().get("result").get(0).get("value").asDouble(), 0);
    +++Added (new line 358):     assertEquals(65283.12,
    +++Added (new line 359):         StreamSupport
    +++Added (new line 360):             .stream(Spliterators.spliteratorUnknownSize(
    +++Added (new line 361):                 response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    +++Added (new line 362):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("building"))
    +++Added (new line 363):             .findFirst().get().get("result").get(0).get("value").asDouble(),
    +++Added (new line 364):         0);
    ---Removed (old line 381):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("remainder"))
    +++Added (new line 380):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("remainder"))
    ---Removed (old line 421):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("Neuenheim"))
    +++Added (new line 420):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("Neuenheim"))
    ---Removed (old line 449):     assertEquals(990.97, StreamSupport
    ---Removed (old line 450):         .stream(Spliterators.spliteratorUnknownSize(
    ---Removed (old line 451):             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    ---Removed (old line 452):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("relation"))
    ---Removed (old line 453):         .findFirst().get().get("result").get(0).get("value").asDouble(), 0);
    +++Added (new line 448):     assertEquals(990.97,
    +++Added (new line 449):         StreamSupport
    +++Added (new line 450):             .stream(Spliterators.spliteratorUnknownSize(
    +++Added (new line 451):                 response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    +++Added (new line 452):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("relation"))
    +++Added (new line 453):             .findFirst().get().get("result").get(0).get("value").asDouble(),
    +++Added (new line 454):         0);
    ---Removed (old line 471):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("remainder"))
    +++Added (new line 472):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("remainder"))
    ---Removed (old line 490):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("Neuenheim"))
    +++Added (new line 491):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("Neuenheim"))
    ---Removed (old line 509):         .filter(jsonNode -> "Weststadt"
    ---Removed (old line 510):             .equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(0).asText())
    ---Removed (old line 511):             && "building=house".equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(1).asText()))
    +++Added (new line 510):         .filter(
    +++Added (new line 511):             jsonNode -> "Weststadt".equalsIgnoreCase(jsonNode.get("groupByObject").get(0).asText())
    +++Added (new line 512):                 && "building=house".equalsIgnoreCase(jsonNode.get("groupByObject").get(1).asText()))
    ---Removed (old line 567):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("Neuenheim"))
    +++Added (new line 568):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("Neuenheim"))
    ---Removed (old line 586):         .filter(jsonNode -> "b1".equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(0).asText())
    ---Removed (old line 587):             && "building=garage".equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(1).asText()))
    +++Added (new line 587):         .filter(jsonNode -> "b1".equalsIgnoreCase(jsonNode.get("groupByObject").get(0).asText())
    +++Added (new line 588):             && "building=garage".equalsIgnoreCase(jsonNode.get("groupByObject").get(1).asText()))
    ---Removed (old line 602):     assertEquals(15969.39, StreamSupport
    ---Removed (old line 603):         .stream(Spliterators.spliteratorUnknownSize(
    ---Removed (old line 604):             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    ---Removed (old line 605):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("relation"))
    ---Removed (old line 606):         .findFirst().get().get("result").get(0).get("value").asDouble(), 0);
    +++Added (new line 603):     assertEquals(15969.39,
    +++Added (new line 604):         StreamSupport
    +++Added (new line 605):             .stream(Spliterators.spliteratorUnknownSize(
    +++Added (new line 606):                 response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    +++Added (new line 607):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("relation"))
    +++Added (new line 608):             .findFirst().get().get("result").get(0).get("value").asDouble(),
    +++Added (new line 609):         0);
    ---Removed (old line 619):     assertEquals(263900.49, StreamSupport
    ---Removed (old line 620):         .stream(Spliterators.spliteratorUnknownSize(
    ---Removed (old line 621):             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    ---Removed (old line 622):         .filter(jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("building"))
    ---Removed (old line 623):         .findFirst().get().get("result").get(0).get("value").asDouble(), 0);
    +++Added (new line 622):     assertEquals(263900.49,
    +++Added (new line 623):         StreamSupport
    +++Added (new line 624):             .stream(Spliterators.spliteratorUnknownSize(
    +++Added (new line 625):                 response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    +++Added (new line 626):             .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("building"))
    +++Added (new line 627):             .findFirst().get().get("result").get(0).get("value").asDouble(),
    +++Added (new line 628):         0);
    ---Removed (old line 639):         .filter(
    ---Removed (old line 640):             jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("building=yes"))
    +++Added (new line 644):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("building=yes"))
    ---Removed (old line 719):         .filter(
    ---Removed (old line 720):             jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("building=yes"))
    +++Added (new line 723):         .filter(jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("building=yes"))
    ---Removed (old line 751):     assertEquals(7568.03, StreamSupport
    ---Removed (old line 752):         .stream(Spliterators.spliteratorUnknownSize(
    ---Removed (old line 753):             response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    ---Removed (old line 754):         .filter(jsonNode -> "b1".equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(0).asText())
    ---Removed (old line 755):             && "building=residential"
    ---Removed (old line 756):                 .equalsIgnoreCase(jsonNode.get(GROUP_BY_OBJECT_ID).get(1).asText()))
    ---Removed (old line 757):         .findFirst().get().get("result").get(0).get("value").asDouble(), 1e-6);
    +++Added (new line 754):     assertEquals(7568.03,
    +++Added (new line 755):         StreamSupport
    +++Added (new line 756):             .stream(Spliterators.spliteratorUnknownSize(
    +++Added (new line 757):                 response.getBody().get("groupByResult").iterator(), Spliterator.ORDERED), false)
    +++Added (new line 758):             .filter(jsonNode -> "b1".equalsIgnoreCase(jsonNode.get("groupByObject").get(0).asText())
    +++Added (new line 759):                 && "building=residential"
    +++Added (new line 760):                     .equalsIgnoreCase(jsonNode.get("groupByObject").get(1).asText()))
    +++Added (new line 761):             .findFirst().get().get("result").get(0).get("value").asDouble(),
    +++Added (new line 762):         1e-6);
    ---Removed (old line 808):             jsonNode -> jsonNode.get(GROUP_BY_OBJECT_ID).asText().equalsIgnoreCase("leisure=pitch"))
    +++Added (new line 813):             jsonNode -> jsonNode.get("groupByObject").asText().equalsIgnoreCase("leisure=pitch"))

