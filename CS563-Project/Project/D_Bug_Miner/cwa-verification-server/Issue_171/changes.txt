Issue #171: fix: updated the release to 1.0.1 in POM-File
URL: https://github.com/corona-warn-app/cwa-verification-server/pull/171

Commit ID: eadc8a0cf618851a7a8e8845106fc8ed732abf44

Commit Message: Merge branch 'master' into Fix-Update-the-release-to-1.0.1-in-POM-File

Files Changed (6):
File: pom.xml ======================
    - Additions: 14
    - Deletions: 2
=======================================================

    ---Removed (old line 43):     <jsonwebtoken.version>0.9.1</jsonwebtoken.version>
    +++Added (new line 43):     <jsonwebtoken.version>0.11.2</jsonwebtoken.version>
    ---Removed (old line 148):       <artifactId>jjwt</artifactId>
    +++Added (new line 148):       <artifactId>jjwt-api</artifactId>
    +++Added (new line 151):     <dependency>
    +++Added (new line 152):       <groupId>io.jsonwebtoken</groupId>
    +++Added (new line 153):       <artifactId>jjwt-impl</artifactId>
    +++Added (new line 154):       <version>${jsonwebtoken.version}</version>
    +++Added (new line 155):     </dependency>
    +++Added (new line 156):     <dependency>
    +++Added (new line 157):       <groupId>io.jsonwebtoken</groupId>
    +++Added (new line 158):       <artifactId>jjwt-jackson</artifactId>
    +++Added (new line 159):       <version>${jsonwebtoken.version}</version>
    +++Added (new line 160):       <scope>runtime</scope>
    +++Added (new line 161):     </dependency>
    +++Added (new line 162): 

File: src/main/java/app/coronawarn/verification/controller/VerificationController.java ======================
    - Additions: 2
    - Deletions: 6
=======================================================

    ---Removed (old line 92):   /**
    ---Removed (old line 93):    * The http request header 'X-Auth-Token'.
    ---Removed (old line 94):    */
    ---Removed (old line 95):   private static final String REQ_HEADER_X_AUTH_TOKEN = "X-Auth-Token";
    ---Removed (old line 96): 
    +++Added (new line 92):   
    ---Removed (old line 297):     @RequestHeader(REQ_HEADER_X_AUTH_TOKEN) @Valid AuthorizationToken authorization) {
    +++Added (new line 293):     @RequestHeader(JwtService.HEADER_NAME_AUTHORIZATION) @Valid AuthorizationToken authorization) {

File: src/main/java/app/coronawarn/verification/model/AuthorizationToken.java ======================
    - Additions: 2
    - Deletions: 2
=======================================================

    ---Removed (old line 31):  * This class represents the authorization token (JWT), which is used for the
    +++Added (new line 31):  * This class represents the authorization bearer token (JWT), which is used for the
    ---Removed (old line 35):   description = "The jwt token header model."
    +++Added (new line 35):   description = "The bearer jwt token header model."

File: src/main/java/app/coronawarn/verification/service/JwtService.java ======================
    - Additions: 46
    - Deletions: 27
=======================================================

    ---Removed (old line 32): import java.security.KeyFactory;
    ---Removed (old line 33): import java.security.NoSuchAlgorithmException;
    +++Added (new line 32): import java.io.ByteArrayInputStream;
    +++Added (new line 33): import java.io.InputStream;
    ---Removed (old line 35): import java.security.spec.InvalidKeySpecException;
    ---Removed (old line 36): import java.security.spec.X509EncodedKeySpec;
    +++Added (new line 35): import java.security.cert.CertificateException;
    +++Added (new line 36): import java.security.cert.CertificateFactory;
    +++Added (new line 37): import java.security.cert.X509Certificate;
    ---Removed (old line 38): import java.util.Base64;
    ---Removed (old line 56):    * The prefix for the json web token.
    +++Added (new line 56):    * The bearer prefix for the json web token.
    +++Added (new line 59):   /**
    +++Added (new line 60):    * The certificate begin prefix.
    +++Added (new line 61):    */
    +++Added (new line 62):   public static final String BEGIN_CERT = "-----BEGIN CERTIFICATE-----";
    +++Added (new line 63):   /**
    +++Added (new line 64):    * The certificate end suffix.
    +++Added (new line 65):    */
    +++Added (new line 66):   public static final String END_CERT = "-----END CERTIFICATE-----";
    +++Added (new line 67):   /**
    +++Added (new line 68):    * The http request header name for JWT 'Authorization'.
    +++Added (new line 69):    */
    +++Added (new line 70):   public static final String HEADER_NAME_AUTHORIZATION = "Authorization";
    +++Added (new line 71): 
    ---Removed (old line 64):   
    +++Added (new line 77): 
    ---Removed (old line 66):   private final VerificationApplicationConfig verificationApplicationConfig;  
    +++Added (new line 79):   private final VerificationApplicationConfig verificationApplicationConfig;
    ---Removed (old line 69):    * Validates the given token is given, the token starts with the needed prefix, 
    ---Removed (old line 70):    * the signing key is not null and the token is valid.
    +++Added (new line 82):    * Validates the given token is given, the token starts with the needed prefix, the signing key is not null and the
    +++Added (new line 83):    * token is valid.
    ---Removed (old line 73):    * @return <code>true</code>, if the token is valid, otherwise
    ---Removed (old line 74):    * <code>false</code>
    +++Added (new line 86):    * @return <code>true</code>, if the token is valid, otherwise <code>false</code>
    ---Removed (old line 81):     if (null != authorizationToken && authorizationToken.startsWith(JwtService.TOKEN_PREFIX)) {
    ---Removed (old line 82):       String jwtToken = authorizationToken.substring(JwtService.TOKEN_PREFIX.length());
    +++Added (new line 93):     if (null != authorizationToken && authorizationToken.startsWith(TOKEN_PREFIX)) {
    +++Added (new line 94):       String jwtToken = authorizationToken.substring(TOKEN_PREFIX.length());
    ---Removed (old line 89):    * Validates the given token. If one of the given roles
    ---Removed (old line 90):    * {@link AuthorizationRole} exists and verified by a public key
    +++Added (new line 101):    * Validates the given token. If one of the given roles {@link AuthorizationRole} exists and verified by a public key
    ---Removed (old line 94):    * @return <code>true</code>, if the token is valid, otherwise
    ---Removed (old line 95):    * <code>false</code>
    +++Added (new line 105):    * @return <code>true</code>, if the token is valid, otherwise <code>false</code>
    +++Added (new line 108):     log.debug("process validateToken() by - token: {} PK: {}", token, publicKey);
    ---Removed (old line 137):     return Jwts.parser().setSigningKey(publicKey).parseClaimsJws(token).getBody();
    +++Added (new line 148):     return Jwts.parserBuilder().setSigningKey(publicKey).build().parseClaimsJws(token).getBody();
    ---Removed (old line 141):    * Get the public key from IAM client.
    +++Added (new line 152):    * Get the certificate from IAM client.
    +++Added (new line 153):    * As long as Keycloak can rotate itâ€™s keys we decided to reload 
    +++Added (new line 154):    * the key on every validateToken call especially the method call 
    +++Added (new line 155):    * is fortunately limited in time and number too.
    ---Removed (old line 143):    * @return the calculated Public key from PEM
    +++Added (new line 157):    * @return the calculated Public key from the certificate
    +++Added (new line 161):     log.debug("process getPublicKey() - cert info from IAM certs: {}", certs);
    +++Added (new line 165):         String wrappedCert = BEGIN_CERT + System.lineSeparator() + certb64 + System.lineSeparator() + END_CERT;
    ---Removed (old line 151):           KeyFactory kf = KeyFactory.getInstance("RSA");
    ---Removed (old line 152):           X509EncodedKeySpec keySpecX509 = new X509EncodedKeySpec(Base64.getMimeDecoder().decode(certb64));
    ---Removed (old line 153):           return kf.generatePublic(keySpecX509);
    ---Removed (old line 154):         } catch (NoSuchAlgorithmException | InvalidKeySpecException ex) {
    ---Removed (old line 155):           log.warn("Error getting public key: {}.", ex.getMessage());
    +++Added (new line 167):           byte[] certBytes = wrappedCert.getBytes(java.nio.charset.StandardCharsets.UTF_8);
    +++Added (new line 168):           CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
    +++Added (new line 169):           InputStream in = new ByteArrayInputStream(certBytes);
    +++Added (new line 170):           X509Certificate certificate = (X509Certificate) certFactory.generateCertificate(in);
    +++Added (new line 171):           return certificate.getPublicKey();
    +++Added (new line 172):         } catch (CertificateException ex) {
    +++Added (new line 173):           log.warn("Error generate certificate: {}.", ex.getMessage());
    ---Removed (old line 158):         log.warn("Error getting public key - not the right use or alg key");
    +++Added (new line 176):         log.warn("Wrong use or alg key given! use: {} alg: {}", key.getUse(), key.getAlg());
    +++Added (new line 177):         log.warn("Keys use: {} and alg: {} are expected!", Key.SIG, Key.RS256);

File: src/test/java/app/coronawarn/verification/VerificationApplicationTest.java ======================
    - Additions: 5
    - Deletions: 5
=======================================================

    ---Removed (old line 120):   
    +++Added (new line 120): 
    ---Removed (old line 280):     keyGenerator.initialize(1024);
    +++Added (new line 280):     keyGenerator.initialize(2048);
    ---Removed (old line 288):     mockMvc.perform(post(PREFIX_API_VERSION + "/tan/teletan").header("X-Auth-Token", "Bearer " + jwtString))
    +++Added (new line 288):     mockMvc.perform(post(PREFIX_API_VERSION + "/tan/teletan").header(JwtService.HEADER_NAME_AUTHORIZATION, JwtService.TOKEN_PREFIX + jwtString))
    ---Removed (old line 302):     keyGenerator.initialize(1024);
    +++Added (new line 302):     keyGenerator.initialize(2048);
    ---Removed (old line 307):     mockMvc.perform(post(PREFIX_API_VERSION + "/tan/teletan").header("X-Auth-Token", "Bearer " + jwtString))
    +++Added (new line 307):     mockMvc.perform(post(PREFIX_API_VERSION + "/tan/teletan").header(JwtService.HEADER_NAME_AUTHORIZATION, JwtService.TOKEN_PREFIX + jwtString))

File: src/test/java/app/coronawarn/verification/service/JwtServiceTest.java ======================
    - Additions: 58
    - Deletions: 28
=======================================================

    ---Removed (old line 23): import app.coronawarn.verification.VerificationApplication;
    +++Added (new line 33): import java.math.BigInteger;
    +++Added (new line 39): import java.security.Security;
    +++Added (new line 41): import java.time.LocalDate;
    +++Added (new line 42): import java.time.LocalDateTime;
    +++Added (new line 43): import java.time.ZoneId;
    ---Removed (old line 41): import java.util.logging.Level;
    ---Removed (old line 42): import java.util.logging.Logger;
    +++Added (new line 46): import lombok.extern.slf4j.Slf4j;
    +++Added (new line 47): import org.bouncycastle.asn1.x500.X500Name;
    +++Added (new line 48): import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
    +++Added (new line 49): import org.bouncycastle.cert.X509CertificateHolder;
    +++Added (new line 50): import org.bouncycastle.cert.X509v3CertificateBuilder;
    +++Added (new line 51): import org.bouncycastle.operator.ContentSigner;
    +++Added (new line 52): import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;
    ---Removed (old line 50): 
    ---Removed (old line 51): public class JwtServiceTest
    ---Removed (old line 52): {
    +++Added (new line 59): @Slf4j
    +++Added (new line 60): public class JwtServiceTest {
    +++Added (new line 68):   private String cert;
    +++Added (new line 69): 
    +++Added (new line 70):   static {
    +++Added (new line 71):     Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    +++Added (new line 72):   }
    ---Removed (old line 64):   public void setUp() throws NoSuchAlgorithmException {
    ---Removed (old line 65):     KeyPairGenerator keyGenerator = KeyPairGenerator.getInstance(RSA);
    ---Removed (old line 66):     keyGenerator.initialize(1024);
    ---Removed (old line 67):     KeyPair kp = keyGenerator.genKeyPair();
    ---Removed (old line 68):     publicKey = kp.getPublic();
    ---Removed (old line 69):     privateKey = kp.getPrivate();
    +++Added (new line 77):   public void setUp() throws Exception {
    +++Added (new line 78):     KeyPair pair = generateTestCertificate();
    +++Added (new line 79):     publicKey = pair.getPublic();
    +++Added (new line 80):     privateKey = pair.getPrivate();
    ---Removed (old line 76):    * @throws java.io.UnsupportedEncodingException
    ---Removed (old line 77):    * @throws java.security.NoSuchAlgorithmException
    +++Added (new line 87):    * @throws java.io.UnsupportedEncodingException if the test cannot be performed.
    +++Added (new line 88):    * @throws java.security.NoSuchAlgorithmException if the test cannot be performed.
    ---Removed (old line 89):    * @throws java.io.UnsupportedEncodingException
    ---Removed (old line 90):    * @throws java.security.NoSuchAlgorithmException
    +++Added (new line 100):    * @throws java.io.UnsupportedEncodingException if the test cannot be performed.
    +++Added (new line 101):    * @throws java.security.NoSuchAlgorithmException if the test cannot be performed.
    ---Removed (old line 101):    * @throws java.io.UnsupportedEncodingException
    ---Removed (old line 102):    * @throws java.security.NoSuchAlgorithmException
    +++Added (new line 112):    * @throws java.io.UnsupportedEncodingException if the test cannot be performed.
    +++Added (new line 113):    * @throws java.security.NoSuchAlgorithmException if the test cannot be performed.
    ---Removed (old line 108):     jwtService = new JwtService(clientMock, new VerificationApplicationConfig());
    ---Removed (old line 109):     Assert.assertTrue(jwtService.isAuthorized(TOKEN_PREFIX + jwToken));
    +++Added (new line 119):     VerificationApplicationConfig config = new VerificationApplicationConfig();
    +++Added (new line 120):     config.getJwt().setEnabled(Boolean.TRUE);
    +++Added (new line 121):     jwtService = new JwtService(clientMock, config);
    +++Added (new line 122):     Assert.assertTrue(jwtService.isAuthorized(JwtService.TOKEN_PREFIX + jwToken));
    ---Removed (old line 116):    * @throws java.io.UnsupportedEncodingException
    ---Removed (old line 117):    * @throws java.security.NoSuchAlgorithmException
    +++Added (new line 129):    * @throws java.io.UnsupportedEncodingException if the test cannot be performed.
    +++Added (new line 130):    * @throws java.security.NoSuchAlgorithmException if the test cannot be performed.
    ---Removed (old line 151):       .signWith(SignatureAlgorithm.RS256, privateKey)
    +++Added (new line 164):       .signWith(privateKey, SignatureAlgorithm.RS256)
    ---Removed (old line 155):   private IamClientMock createIamClientMock() {
    +++Added (new line 168):   private KeyPair generateTestCertificate() throws Exception {
    +++Added (new line 169):     KeyPairGenerator kpGen = KeyPairGenerator.getInstance("RSA", "BC");
    +++Added (new line 170):     KeyPair pair = kpGen.generateKeyPair();
    +++Added (new line 171):     LocalDateTime startDate = LocalDate.now().atStartOfDay();
    +++Added (new line 172):     X509v3CertificateBuilder builder = new X509v3CertificateBuilder(
    +++Added (new line 173):       new X500Name("CN=ca"),
    +++Added (new line 174):       new BigInteger("0"),
    +++Added (new line 175):       Date.from(startDate.atZone(ZoneId.systemDefault()).toInstant()),
    +++Added (new line 176):       Date.from(startDate.plusDays(3650).atZone(ZoneId.systemDefault()).toInstant()),
    +++Added (new line 177):       new X500Name("CN=ca"),
    +++Added (new line 178):       SubjectPublicKeyInfo.getInstance(pair.getPublic().getEncoded()));
    +++Added (new line 179):     JcaContentSignerBuilder csBuilder = new JcaContentSignerBuilder("SHA512WithRSAEncryption");
    +++Added (new line 180):     ContentSigner signer = csBuilder.build(pair.getPrivate());
    +++Added (new line 181):     X509CertificateHolder holder = builder.build(signer);
    ---Removed (old line 159):       pemWriter.writeObject(new PemObject("PUBLIC KEY", publicKey.getEncoded()));
    +++Added (new line 185):       pemWriter.writeObject(new PemObject("CERTIFICATE", holder.toASN1Structure().getEncoded()));
    ---Removed (old line 163):       Logger.getLogger(JwtServiceTest.class.getName()).log(Level.SEVERE, null, ex);
    +++Added (new line 189):       log.warn("Error writeObject: {}.", ex.getMessage());
    +++Added (new line 191):     cert = writer.toString();
    +++Added (new line 192):     return pair;
    +++Added (new line 193):   }
    +++Added (new line 194): 
    +++Added (new line 195):   private IamClientMock createIamClientMock() {
    ---Removed (old line 166):     String pem = writer.toString().replaceAll(System.lineSeparator(), "").replace(BEGIN_PEM, "").replace(END_PEM, "");
    ---Removed (old line 167):     clientMock.setPem(pem);
    +++Added (new line 197):     clientMock.setPem(cert.replaceAll(System.lineSeparator(), "").replace(JwtService.BEGIN_CERT, "").replace(JwtService.END_CERT, ""));

