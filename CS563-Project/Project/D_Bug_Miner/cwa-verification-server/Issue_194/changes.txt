Issue #194: fix: temporary remove response padding
URL: https://github.com/corona-warn-app/cwa-verification-server/pull/194

Commit ID: dc7a5042c0b39d87cd4c8c69ddb3b84e60293592

Commit Message: Merge remote-tracking branch 'origin/master' into fix/temporarly-remove-resp_padding

Files Changed (8):
File: api-docs.json ======================
    - Additions: 303
    - Deletions: 215
=======================================================

    ---Removed (old line 2):   "openapi":"3.0.1",
    ---Removed (old line 3):   "info":{
    ---Removed (old line 4):     "title":"cwa-verification-server",
    ---Removed (old line 5):     "description":"OpenApi documentation of cwa-verification-server",
    ---Removed (old line 6):     "license":{
    ---Removed (old line 7):       "name":"Apache 2.0",
    ---Removed (old line 8):       "url":"http://www.apache.org/licenses/LICENSE-2.0"
    +++Added (new line 2):   "openapi": "3.0.1",
    +++Added (new line 3):   "info": {
    +++Added (new line 4):     "title": "cwa-verification-server",
    +++Added (new line 5):     "license": {
    +++Added (new line 6):       "name": "Apache 2.0",
    +++Added (new line 7):       "url": "http://www.apache.org/licenses/LICENSE-2.0"
    ---Removed (old line 10):     "version":"0.3.2-SNAPSHOT"
    +++Added (new line 9):     "version": "1.2.0-SNAPSHOT"
    ---Removed (old line 12):   "servers":[
    +++Added (new line 11):   "servers": [
    ---Removed (old line 14):       "url":"http://localhost:8080",
    ---Removed (old line 15):       "description":"Generated server url"
    +++Added (new line 13):       "url": "http://localhost:8080",
    +++Added (new line 14):       "description": "Generated server url"
    ---Removed (old line 18):   "paths":{
    ---Removed (old line 19):     "/version/v1/registrationToken":{
    ---Removed (old line 20):       "post":{
    ---Removed (old line 21):         "tags":[
    ---Removed (old line 22):           "verification-controller"
    +++Added (new line 17):   "paths": {
    +++Added (new line 18):     "/version/v1/tan": {
    +++Added (new line 19):       "post": {
    +++Added (new line 20):         "tags": [
    +++Added (new line 21):           "external-tan-controller"
    ---Removed (old line 24):         "summary":"Get registration Token",
    ---Removed (old line 25):         "description":"Get a registration token by providing a SHA-256 hashed GUID or a TeleTAN",
    ---Removed (old line 26):         "operationId":"generateRegistrationToken",
    ---Removed (old line 27):         "requestBody":{
    ---Removed (old line 28):           "content":{
    ---Removed (old line 29):             "application/json":{
    ---Removed (old line 30):               "schema":{
    ---Removed (old line 31):                 "$ref":"#/components/schemas/RegistrationTokenRequest"
    +++Added (new line 23):         "summary": "Generates a Tan",
    +++Added (new line 24):         "description": "Generates a TAN on input of Registration Token. With the TAN one can submit his Diagnosis keys",
    +++Added (new line 25):         "operationId": "generateTan",
    +++Added (new line 26):         "parameters": [
    +++Added (new line 27):           {
    +++Added (new line 28):             "name": "cwa-fake",
    +++Added (new line 29):             "in": "header",
    +++Added (new line 30):             "required": false,
    +++Added (new line 31):             "schema": {
    +++Added (new line 32):               "type": "string"
    +++Added (new line 33):             }
    +++Added (new line 34):           }
    +++Added (new line 35):         ],
    +++Added (new line 36):         "requestBody": {
    +++Added (new line 37):           "content": {
    +++Added (new line 38):             "application/json": {
    +++Added (new line 39):               "schema": {
    +++Added (new line 40):                 "$ref": "#/components/schemas/RegistrationToken"
    ---Removed (old line 35):           "required":true
    +++Added (new line 44):           "required": true
    ---Removed (old line 37):         "responses":{
    ---Removed (old line 38):           "500":{
    ---Removed (old line 39):             "description":"Internal Server Error",
    ---Removed (old line 40):             "content":{
    ---Removed (old line 41):               "application/json":{
    ---Removed (old line 42):                 "schema":{
    ---Removed (old line 43):                   "$ref":"#/components/schemas/RegistrationToken"
    +++Added (new line 46):         "responses": {
    +++Added (new line 47):           "201": {
    +++Added (new line 48):             "description": "Registration Token is valid",
    +++Added (new line 49):             "content": {
    +++Added (new line 50):               "application/json": {
    +++Added (new line 51):                 "schema": {
    +++Added (new line 52):                   "$ref": "#/components/schemas/DeferredResultResponseEntityTan"
    ---Removed (old line 48):           "400":{
    ---Removed (old line 49):             "description":"GUID/TeleTAN already exists.",
    ---Removed (old line 50):             "content":{
    ---Removed (old line 51):               "application/json":{
    ---Removed (old line 52):                 "schema":{
    ---Removed (old line 53):                   "$ref":"#/components/schemas/RegistrationToken"
    ---Removed (old line 54):                 }
    ---Removed (old line 55):               }
    ---Removed (old line 56):             }
    +++Added (new line 57):           "400": {
    +++Added (new line 58):             "description": "Registration Token does not exist"
    ---Removed (old line 58):           "200":{
    ---Removed (old line 59):             "description":"GUID/TeleTAN found",
    ---Removed (old line 60):             "content":{
    ---Removed (old line 61):               "application/json":{
    ---Removed (old line 62):                 "schema":{
    ---Removed (old line 63):                   "$ref":"#/components/schemas/RegistrationToken"
    ---Removed (old line 64):                 }
    ---Removed (old line 65):               }
    ---Removed (old line 66):             }
    +++Added (new line 60):           "500": {
    +++Added (new line 61):             "description": "Internal Server Error"
    ---Removed (old line 71):     "/version/v1/tan":{
    ---Removed (old line 72):       "post":{
    ---Removed (old line 73):         "tags":[
    ---Removed (old line 74):           "verification-controller"
    +++Added (new line 66):     "/version/v1/testresult": {
    +++Added (new line 67):       "post": {
    +++Added (new line 68):         "tags": [
    +++Added (new line 69):           "external-test-state-controller"
    +++Added (new line 70):         ],
    +++Added (new line 71):         "summary": "COVID-19 test result for given RegistrationToken",
    +++Added (new line 72):         "description": "Gets the result of COVID-19 Test. If the RegistrationToken belongs to a TeleTan the result is always positive",
    +++Added (new line 73):         "operationId": "getTestState",
    +++Added (new line 74):         "parameters": [
    +++Added (new line 75):           {
    +++Added (new line 76):             "name": "cwa-fake",
    +++Added (new line 77):             "in": "header",
    +++Added (new line 78):             "required": false,
    +++Added (new line 79):             "schema": {
    +++Added (new line 80):               "type": "string"
    +++Added (new line 81):             }
    +++Added (new line 82):           }
    ---Removed (old line 76):         "summary":"Generates a Tan",
    ---Removed (old line 77):         "description":"Generates a TAN on input of Registration Token. With the TAN one can submit his Diagnosis keys",
    ---Removed (old line 78):         "operationId":"generateTan",
    ---Removed (old line 79):         "requestBody":{
    ---Removed (old line 80):           "content":{
    ---Removed (old line 81):             "application/json":{
    ---Removed (old line 82):               "schema":{
    ---Removed (old line 83):                 "$ref":"#/components/schemas/RegistrationToken"
    +++Added (new line 84):         "requestBody": {
    +++Added (new line 85):           "content": {
    +++Added (new line 86):             "application/json": {
    +++Added (new line 87):               "schema": {
    +++Added (new line 88):                 "$ref": "#/components/schemas/RegistrationToken"
    ---Removed (old line 87):           "required":true
    +++Added (new line 92):           "required": true
    ---Removed (old line 89):         "responses":{
    ---Removed (old line 90):           "500":{
    ---Removed (old line 91):             "description":"Internal Server Error",
    ---Removed (old line 92):             "content":{
    ---Removed (old line 93):               "application/json":{
    ---Removed (old line 94):                 "schema":{
    ---Removed (old line 95):                   "$ref":"#/components/schemas/RegistrationToken"
    +++Added (new line 94):         "responses": {
    +++Added (new line 95):           "200": {
    +++Added (new line 96):             "description": "Testresult retrieved",
    +++Added (new line 97):             "content": {
    +++Added (new line 98):               "application/json": {
    +++Added (new line 99):                 "schema": {
    +++Added (new line 100):                   "$ref": "#/components/schemas/DeferredResultResponseEntityTestResult"
    ---Removed (old line 100):           "400":{
    ---Removed (old line 101):             "description":"Registration Token does not exist",
    ---Removed (old line 102):             "content":{
    ---Removed (old line 103):               "application/json":{
    ---Removed (old line 104):                 "schema":{
    ---Removed (old line 105):                   "$ref":"#/components/schemas/Tan"
    ---Removed (old line 106):                 }
    ---Removed (old line 107):               }
    ---Removed (old line 108):             }
    +++Added (new line 105):           "400": {
    +++Added (new line 106):             "description": "Bad Request"
    ---Removed (old line 110):           "201":{
    ---Removed (old line 111):             "description":"Registration Token is valid",
    ---Removed (old line 112):             "content":{
    ---Removed (old line 113):               "application/json":{
    ---Removed (old line 114):                 "schema":{
    ---Removed (old line 115):                   "$ref":"#/components/schemas/Tan"
    ---Removed (old line 116):                 }
    ---Removed (old line 117):               }
    ---Removed (old line 118):             }
    +++Added (new line 108):           "500": {
    +++Added (new line 109):             "description": "Internal Server Error"
    ---Removed (old line 123):     "/version/v1/testresult":{
    ---Removed (old line 124):       "post":{
    ---Removed (old line 125):         "tags":[
    ---Removed (old line 126):           "verification-controller"
    +++Added (new line 114):     "/version/v1/registrationToken": {
    +++Added (new line 115):       "post": {
    +++Added (new line 116):         "tags": [
    +++Added (new line 117):           "external-token-controller"
    ---Removed (old line 128):         "summary":"COVID-19 test result",
    ---Removed (old line 129):         "description":"Gets the result of COVID-19 Test.",
    ---Removed (old line 130):         "operationId":"getTestState",
    ---Removed (old line 131):         "requestBody":{
    ---Removed (old line 132):           "content":{
    ---Removed (old line 133):             "application/json":{
    ---Removed (old line 134):               "schema":{
    ---Removed (old line 135):                 "$ref":"#/components/schemas/RegistrationToken"
    +++Added (new line 119):         "summary": "Get registration Token",
    +++Added (new line 120):         "description": "Get a registration token by providing a SHA-256 hasehd GUID or a teleTAN",
    +++Added (new line 121):         "operationId": "generateRegistrationToken",
    +++Added (new line 122):         "parameters": [
    +++Added (new line 123):           {
    +++Added (new line 124):             "name": "cwa-fake",
    +++Added (new line 125):             "in": "header",
    +++Added (new line 126):             "required": false,
    +++Added (new line 127):             "schema": {
    +++Added (new line 128):               "type": "string"
    +++Added (new line 129):             }
    +++Added (new line 130):           }
    +++Added (new line 131):         ],
    +++Added (new line 132):         "requestBody": {
    +++Added (new line 133):           "content": {
    +++Added (new line 134):             "application/json": {
    +++Added (new line 135):               "schema": {
    +++Added (new line 136):                 "$ref": "#/components/schemas/RegistrationTokenRequest"
    ---Removed (old line 139):           "required":true
    +++Added (new line 140):           "required": true
    ---Removed (old line 141):         "responses":{
    ---Removed (old line 142):           "500":{
    ---Removed (old line 143):             "description":"Internal Server Error",
    ---Removed (old line 144):             "content":{
    ---Removed (old line 145):               "application/json":{
    ---Removed (old line 146):                 "schema":{
    ---Removed (old line 147):                   "$ref":"#/components/schemas/RegistrationToken"
    +++Added (new line 142):         "responses": {
    +++Added (new line 143):           "201": {
    +++Added (new line 144):             "description": "registration token generated.",
    +++Added (new line 145):             "content": {
    +++Added (new line 146):               "application/json": {
    +++Added (new line 147):                 "schema": {
    +++Added (new line 148):                   "$ref": "#/components/schemas/DeferredResultResponseEntityRegistrationToken"
    ---Removed (old line 152):           "400":{
    ---Removed (old line 153):             "description":"Bad Request",
    ---Removed (old line 154):             "content":{
    ---Removed (old line 155):               "application/json":{
    ---Removed (old line 156):                 "schema":{
    ---Removed (old line 157):                   "$ref":"#/components/schemas/TestResult"
    ---Removed (old line 158):                 }
    ---Removed (old line 159):               }
    ---Removed (old line 160):             }
    +++Added (new line 153):           "400": {
    +++Added (new line 154):             "description": "GUID/TeleTAN already exists."
    ---Removed (old line 162):           "200":{
    ---Removed (old line 163):             "description":"Testresult retrieved",
    ---Removed (old line 164):             "content":{
    ---Removed (old line 165):               "application/json":{
    ---Removed (old line 166):                 "schema":{
    ---Removed (old line 167):                   "$ref":"#/components/schemas/TestResult"
    ---Removed (old line 168):                 }
    ---Removed (old line 169):               }
    ---Removed (old line 170):             }
    +++Added (new line 156):           "500": {
    +++Added (new line 157):             "description": "Internal Server Error"
    ---Removed (old line 175):     "/version/v1/tan/verify":{
    ---Removed (old line 176):       "post":{
    ---Removed (old line 177):         "tags":[
    ---Removed (old line 178):           "verification-controller"
    +++Added (new line 162):     "/version/v1/tan/teletan": {
    +++Added (new line 163):       "post": {
    +++Added (new line 164):         "tags": [
    +++Added (new line 165):           "internal-tan-controller"
    ---Removed (old line 180):         "summary":"Verify provided Tan",
    ---Removed (old line 181):         "description":"The provided Tan is verified to be formerly issued by the verification server",
    ---Removed (old line 182):         "operationId":"verifyTan",
    ---Removed (old line 183):         "requestBody":{
    ---Removed (old line 184):           "content":{
    ---Removed (old line 185):             "application/json":{
    ---Removed (old line 186):               "schema":{
    ---Removed (old line 187):                 "$ref":"#/components/schemas/Tan"
    ---Removed (old line 188):               }
    +++Added (new line 167):         "summary": "Request generation of a teleTAN",
    +++Added (new line 168):         "description": "A teleTAN is a human readable TAN with 7 characters which is supposed to be issued via call line",
    +++Added (new line 169):         "operationId": "createTeleTan",
    +++Added (new line 170):         "parameters": [
    +++Added (new line 171):           {
    +++Added (new line 172):             "name": "Authorization",
    +++Added (new line 173):             "in": "header",
    +++Added (new line 174):             "required": true,
    +++Added (new line 175):             "schema": {
    +++Added (new line 176):               "$ref": "#/components/schemas/AuthorizationToken"
    ---Removed (old line 190):           },
    ---Removed (old line 191):           "required":true
    ---Removed (old line 192):         },
    ---Removed (old line 193):         "responses":{
    ---Removed (old line 194):           "500":{
    ---Removed (old line 195):             "description":"Internal Server Error",
    ---Removed (old line 196):             "content":{
    ---Removed (old line 197):               "application/json":{
    ---Removed (old line 198):                 "schema":{
    ---Removed (old line 199):                   "$ref":"#/components/schemas/RegistrationToken"
    ---Removed (old line 200):                 }
    ---Removed (old line 201):               }
    ---Removed (old line 202):             }
    ---Removed (old line 203):           },
    ---Removed (old line 204):           "400":{
    ---Removed (old line 205):             "description":"Bad Request",
    ---Removed (old line 206):             "content":{
    ---Removed (old line 207):               "application/json":{
    ---Removed (old line 208):                 "schema":{
    ---Removed (old line 209):                   "$ref":"#/components/schemas/TestResult"
    +++Added (new line 178):           }
    +++Added (new line 179):         ],
    +++Added (new line 180):         "responses": {
    +++Added (new line 181):           "201": {
    +++Added (new line 182):             "description": "TeleTan created",
    +++Added (new line 183):             "content": {
    +++Added (new line 184):               "application/json": {
    +++Added (new line 185):                 "schema": {
    +++Added (new line 186):                   "$ref": "#/components/schemas/TeleTan"
    ---Removed (old line 214):           "200":{
    ---Removed (old line 215):             "description":"Tan is valid an formerly issued by the verification server"
    +++Added (new line 191):           "400": {
    +++Added (new line 192):             "description": "Bad Request"
    ---Removed (old line 217):           "404":{
    ---Removed (old line 218):             "description":"Tan could not be verified"
    +++Added (new line 194):           "500": {
    +++Added (new line 195):             "description": "Internal Server Error"
    ---Removed (old line 223):     "/version/v1/tan/teletan":{
    ---Removed (old line 224):       "post":{
    ---Removed (old line 225):         "tags":[
    ---Removed (old line 226):           "verification-controller"
    +++Added (new line 200):     "/version/v1/tan/verify": {
    +++Added (new line 201):       "post": {
    +++Added (new line 202):         "tags": [
    +++Added (new line 203):           "internal-tan-controller"
    ---Removed (old line 228):         "summary":"Request generation of a TeleTan",
    ---Removed (old line 229):         "description":"A TeleTan is a human readable TAN with 7 characters which is supposed to be issued via call line",
    ---Removed (old line 230):         "operationId":"createTeleTan",
    ---Removed (old line 231):         "responses":{
    ---Removed (old line 232):           "500":{
    ---Removed (old line 233):             "description":"Internal Server Error",
    ---Removed (old line 234):             "content":{
    ---Removed (old line 235):               "application/json":{
    ---Removed (old line 236):                 "schema":{
    ---Removed (old line 237):                   "$ref":"#/components/schemas/RegistrationToken"
    +++Added (new line 205):         "summary": "Verify provided Tan",
    +++Added (new line 206):         "description": "The provided Tan is verified to be formerly issued by the verification server",
    +++Added (new line 207):         "operationId": "verifyTan",
    +++Added (new line 208):         "requestBody": {
    +++Added (new line 209):           "content": {
    +++Added (new line 210):             "application/json": {
    +++Added (new line 211):               "schema": {
    +++Added (new line 212):                 "$ref": "#/components/schemas/Tan"
    +++Added (new line 213):               }
    +++Added (new line 214):             }
    +++Added (new line 215):           },
    +++Added (new line 216):           "required": true
    +++Added (new line 217):         },
    +++Added (new line 218):         "responses": {
    +++Added (new line 219):           "200": {
    +++Added (new line 220):             "description": "Tan is valid an formerly issued by the verification server",
    +++Added (new line 221):             "content": {
    +++Added (new line 222):               "*/*": {
    +++Added (new line 223):                 "schema": {
    +++Added (new line 224):                   "type": "object"
    ---Removed (old line 242):           "400":{
    ---Removed (old line 243):             "description":"Bad Request",
    ---Removed (old line 244):             "content":{
    ---Removed (old line 245):               "application/json":{
    ---Removed (old line 246):                 "schema":{
    ---Removed (old line 247):                   "$ref":"#/components/schemas/TestResult"
    +++Added (new line 229):           "400": {
    +++Added (new line 230):             "description": "Bad Request"
    +++Added (new line 231):           },
    +++Added (new line 232):           "404": {
    +++Added (new line 233):             "description": "Tan could not be verified",
    +++Added (new line 234):             "content": {
    +++Added (new line 235):               "*/*": {
    +++Added (new line 236):                 "schema": {
    +++Added (new line 237):                   "type": "object"
    ---Removed (old line 252):           "201":{
    ---Removed (old line 253):             "description":"TeleTan created"
    +++Added (new line 242):           "500": {
    +++Added (new line 243):             "description": "Internal Server Error"
    ---Removed (old line 259):   "components":{
    ---Removed (old line 260):     "schemas":{
    ---Removed (old line 261):       "RegistrationTokenRequest":{
    ---Removed (old line 262):         "type":"object",
    ---Removed (old line 263):         "properties":{
    ---Removed (old line 264):           "key":{
    ---Removed (old line 265):             "type":"string"
    +++Added (new line 249):   "components": {
    +++Added (new line 250):     "schemas": {
    +++Added (new line 251):       "RegistrationToken": {
    +++Added (new line 252):         "required": [
    +++Added (new line 253):           "registrationToken"
    +++Added (new line 254):         ],
    +++Added (new line 255):         "type": "object",
    +++Added (new line 256):         "properties": {
    +++Added (new line 257):           "registrationToken": {
    +++Added (new line 258):             "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
    +++Added (new line 259):             "type": "string"
    +++Added (new line 260):           },
    +++Added (new line 261):           "responsePadding": {
    +++Added (new line 262):             "type": "string"
    +++Added (new line 263):           }
    +++Added (new line 264):         },
    +++Added (new line 265):         "description": "The registration token model."
    +++Added (new line 266):       },
    +++Added (new line 267):       "DeferredResultHandler": {
    +++Added (new line 268):         "type": "object"
    +++Added (new line 269):       },
    +++Added (new line 270):       "DeferredResultResponseEntityTan": {
    +++Added (new line 271):         "type": "object",
    +++Added (new line 272):         "properties": {
    +++Added (new line 273):           "resultHandler": {
    +++Added (new line 274):             "$ref": "#/components/schemas/DeferredResultHandler"
    +++Added (new line 275):           },
    +++Added (new line 276):           "result": {
    +++Added (new line 277):             "type": "object"
    +++Added (new line 278):           },
    +++Added (new line 279):           "resultInternal": {
    +++Added (new line 280):             "type": "boolean",
    +++Added (new line 281):             "writeOnly": true
    +++Added (new line 282):           },
    +++Added (new line 283):           "setOrExpired": {
    +++Added (new line 284):             "type": "boolean"
    +++Added (new line 285):           },
    +++Added (new line 286):           "errorResult": {
    +++Added (new line 287):             "type": "boolean",
    +++Added (new line 288):             "writeOnly": true
    +++Added (new line 289):           }
    +++Added (new line 290):         }
    +++Added (new line 291):       },
    +++Added (new line 292):       "DeferredResultResponseEntityTestResult": {
    +++Added (new line 293):         "type": "object",
    +++Added (new line 294):         "properties": {
    +++Added (new line 295):           "resultHandler": {
    +++Added (new line 296):             "$ref": "#/components/schemas/DeferredResultHandler"
    +++Added (new line 297):           },
    +++Added (new line 298):           "result": {
    +++Added (new line 299):             "type": "object"
    +++Added (new line 300):           },
    +++Added (new line 301):           "resultInternal": {
    +++Added (new line 302):             "type": "boolean",
    +++Added (new line 303):             "writeOnly": true
    +++Added (new line 304):           },
    +++Added (new line 305):           "setOrExpired": {
    +++Added (new line 306):             "type": "boolean"
    +++Added (new line 307):           },
    +++Added (new line 308):           "errorResult": {
    +++Added (new line 309):             "type": "boolean",
    +++Added (new line 310):             "writeOnly": true
    +++Added (new line 311):           }
    +++Added (new line 312):         }
    +++Added (new line 313):       },
    +++Added (new line 314):       "RegistrationTokenRequest": {
    +++Added (new line 315):         "type": "object",
    +++Added (new line 316):         "properties": {
    +++Added (new line 317):           "key": {
    +++Added (new line 318):             "type": "string"
    ---Removed (old line 267):           "keyType":{
    ---Removed (old line 268):             "type":"string",
    ---Removed (old line 269):             "enum":[
    +++Added (new line 320):           "keyType": {
    +++Added (new line 321):             "type": "string",
    +++Added (new line 322):             "enum": [
    ---Removed (old line 274):         }
    +++Added (new line 327):         },
    +++Added (new line 328):         "description": "The registration token request model."
    ---Removed (old line 276):       "RegistrationToken":{
    ---Removed (old line 277):         "type":"object",
    ---Removed (old line 278):         "properties":{
    ---Removed (old line 279):           "registrationToken":{
    ---Removed (old line 280):             "type":"string"
    +++Added (new line 330):       "DeferredResultResponseEntityRegistrationToken": {
    +++Added (new line 331):         "type": "object",
    +++Added (new line 332):         "properties": {
    +++Added (new line 333):           "resultHandler": {
    +++Added (new line 334):             "$ref": "#/components/schemas/DeferredResultHandler"
    +++Added (new line 335):           },
    +++Added (new line 336):           "result": {
    +++Added (new line 337):             "type": "object"
    +++Added (new line 338):           },
    +++Added (new line 339):           "resultInternal": {
    +++Added (new line 340):             "type": "boolean",
    +++Added (new line 341):             "writeOnly": true
    +++Added (new line 342):           },
    +++Added (new line 343):           "setOrExpired": {
    +++Added (new line 344):             "type": "boolean"
    +++Added (new line 345):           },
    +++Added (new line 346):           "errorResult": {
    +++Added (new line 347):             "type": "boolean",
    +++Added (new line 348):             "writeOnly": true
    ---Removed (old line 284):       "Tan":{
    ---Removed (old line 285):         "type":"object",
    ---Removed (old line 286):         "properties":{
    ---Removed (old line 287):           "tan":{
    ---Removed (old line 288):             "type":"string"
    +++Added (new line 352):       "AuthorizationToken": {
    +++Added (new line 353):         "required": [
    +++Added (new line 354):           "token"
    +++Added (new line 355):         ],
    +++Added (new line 356):         "type": "object",
    +++Added (new line 357):         "properties": {
    +++Added (new line 358):           "token": {
    +++Added (new line 359):             "type": "string"
    ---Removed (old line 290):         }
    +++Added (new line 361):         },
    +++Added (new line 362):         "description": "The bearer jwt token header model."
    ---Removed (old line 292):       "TestResult":{
    ---Removed (old line 293):         "type":"object",
    ---Removed (old line 294):         "properties":{
    ---Removed (old line 295):           "testResult":{
    ---Removed (old line 296):             "type":"integer",
    ---Removed (old line 297):             "format":"int32"
    +++Added (new line 364):       "TeleTan": {
    +++Added (new line 365):         "type": "object",
    +++Added (new line 366):         "properties": {
    +++Added (new line 367):           "value": {
    +++Added (new line 368):             "type": "string"
    ---Removed (old line 299):         }
    +++Added (new line 370):         },
    +++Added (new line 371):         "description": "The teleTAN model."
    +++Added (new line 372):       },
    +++Added (new line 373):       "Tan": {
    +++Added (new line 374):         "required": [
    +++Added (new line 375):           "tan"
    +++Added (new line 376):         ],
    +++Added (new line 377):         "type": "object",
    +++Added (new line 378):         "properties": {
    +++Added (new line 379):           "tan": {
    +++Added (new line 380):             "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
    +++Added (new line 381):             "type": "string"
    +++Added (new line 382):           },
    +++Added (new line 383):           "responsePadding": {
    +++Added (new line 384):             "type": "string"
    +++Added (new line 385):           }
    +++Added (new line 386):         },
    +++Added (new line 387):         "description": "The transaction number model."
    ---Removed (old line 303): }
    +++Added (new line 391): }

File: docs/architecture-overview.md ======================
    - Additions: 19
    - Deletions: 1
=======================================================

    ---Removed (old line 295):   
    +++Added (new line 295): 
    +++Added (new line 296): ### Use Case Plausible Deniablity for being positivly tested
    +++Added (new line 297): To allow a client to implement Plausible Deniablity for being positivly tested the service needs to fullfill two 
    +++Added (new line 298): changes acroos all API endpoints which are called by the mobile app. The use case takes the perspective of an attacking user which watches network traffic with regards to 
    +++Added (new line 299): request/response size and timing.
    +++Added (new line 300): 
    +++Added (new line 301): Requirements:
    +++Added (new line 302): - all response sizes must be equal
    +++Added (new line 303): - response times must be similar for a time window
    +++Added (new line 304): - allowing to execute fake requests which do not change state
    +++Added (new line 305): 
    +++Added (new line 306): Implementing those requirements makes it impossible to distinguish between "real" requests and "fake" requests and between calls to different REST endpoints.
    +++Added (new line 307): 
    +++Added (new line 308): API Endpoint:
    +++Added (new line 309): - all Endpoints used by the app are affected 
    +++Added (new line 310): - adding a request header "cwa-fake", setting it to "1" indicates a fake request, the header is optional.
    +++Added (new line 311): - adding an attribute "responsePadding" to the JSON response which is used to fill up the result to the fixed "equal" size 
    +++Added (new line 312): 
    +++Added (new line 313): 

File: src/main/java/app/coronawarn/verification/config/RequestSizeLimitFilter.java ======================
    - Additions: 68
    - Deletions: 0
=======================================================

    +++Added (new line 1): /*
    +++Added (new line 2):  * Corona-Warn-App / cwa-verification
    +++Added (new line 3):  *
    +++Added (new line 4):  * (C) 2020, T-Systems International GmbH
    +++Added (new line 5):  *
    +++Added (new line 6):  * Deutsche Telekom AG, SAP AG and all other contributors /
    +++Added (new line 7):  * copyright owners license this file to you under the Apache
    +++Added (new line 8):  * License, Version 2.0 (the "License"); you may not use this
    +++Added (new line 9):  * file except in compliance with the License.
    +++Added (new line 10):  * You may obtain a copy of the License at
    +++Added (new line 11):  *
    +++Added (new line 12):  * http://www.apache.org/licenses/LICENSE-2.0
    +++Added (new line 13):  *
    +++Added (new line 14):  * Unless required by applicable law or agreed to in writing,
    +++Added (new line 15):  * software distributed under the License is distributed on an
    +++Added (new line 16):  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    +++Added (new line 17):  * KIND, either express or implied.  See the License for the
    +++Added (new line 18):  * specific language governing permissions and limitations
    +++Added (new line 19):  * under the License.
    +++Added (new line 20):  */
    +++Added (new line 21): 
    +++Added (new line 22): package app.coronawarn.verification.config;
    +++Added (new line 23): 
    +++Added (new line 24): import java.io.IOException;
    +++Added (new line 25): import javax.servlet.FilterChain;
    +++Added (new line 26): import javax.servlet.ServletException;
    +++Added (new line 27): import javax.servlet.http.HttpServletRequest;
    +++Added (new line 28): import javax.servlet.http.HttpServletResponse;
    +++Added (new line 29): import liquibase.util.StringUtils;
    +++Added (new line 30): import lombok.NonNull;
    +++Added (new line 31): import lombok.RequiredArgsConstructor;
    +++Added (new line 32): import lombok.extern.slf4j.Slf4j;
    +++Added (new line 33): import org.apache.http.HttpHeaders;
    +++Added (new line 34): import org.springframework.http.HttpStatus;
    +++Added (new line 35): import org.springframework.stereotype.Component;
    +++Added (new line 36): import org.springframework.web.filter.OncePerRequestFilter;
    +++Added (new line 37): 
    +++Added (new line 38): /**
    +++Added (new line 39):  * A filter to avoid requests with a large content and chunked requests.
    +++Added (new line 40):  */
    +++Added (new line 41): @Component
    +++Added (new line 42): @Slf4j
    +++Added (new line 43): @RequiredArgsConstructor
    +++Added (new line 44): public class RequestSizeLimitFilter extends OncePerRequestFilter {
    +++Added (new line 45): 
    +++Added (new line 46):   @NonNull
    +++Added (new line 47):   private final VerificationApplicationConfig verificationApplicationConfig;
    +++Added (new line 48): 
    +++Added (new line 49):   @Override
    +++Added (new line 50):   protected void doFilterInternal(HttpServletRequest request,
    +++Added (new line 51):                                   HttpServletResponse response, FilterChain filterChain)
    +++Added (new line 52):     throws ServletException, IOException {
    +++Added (new line 53):     long maxPostSize = verificationApplicationConfig.getRequest().getSizelimit();
    +++Added (new line 54):     if (request.getContentLengthLong() > maxPostSize || isChunkedRequest(request)) {
    +++Added (new line 55):       log.warn("The request size is too large or the request was sent via chunks.");
    +++Added (new line 56):       response.setStatus(HttpStatus.NOT_ACCEPTABLE.value());
    +++Added (new line 57):       return;
    +++Added (new line 58):     }
    +++Added (new line 59):     filterChain.doFilter(request, response);
    +++Added (new line 60):   }
    +++Added (new line 61): 
    +++Added (new line 62):   private boolean isChunkedRequest(HttpServletRequest request) {
    +++Added (new line 63):     String header = request.getHeader(HttpHeaders.TRANSFER_ENCODING);
    +++Added (new line 64): 
    +++Added (new line 65):     return !StringUtils.isEmpty(header) && header.equalsIgnoreCase("chunked");
    +++Added (new line 66):   }
    +++Added (new line 67): 
    +++Added (new line 68): }

File: src/main/java/app/coronawarn/verification/config/VerificationApplicationConfig.java ======================
    - Additions: 21
    - Deletions: 18
=======================================================

    ---Removed (old line 29):  * This class and its nested subclasses are used to read in values from configuration file application.yml,
    ---Removed (old line 30):  * which is loaded via the '@EnableConfigurationProperties' annotation from SpringBootApplication main class.
    +++Added (new line 29):  * This class and its nested subclasses are used to read in values from configuration file application.yml, which is
    +++Added (new line 30):  * loaded via the '@EnableConfigurationProperties' annotation from SpringBootApplication main class.
    +++Added (new line 48):   private Request request = new Request();
    ---Removed (old line 50):    * Configure the Tan with build property values and return the configured
    ---Removed (old line 51):    * parameters.
    +++Added (new line 51):    * Configure the Tan with build property values and return the configured parameters.
    ---Removed (old line 61):      * Configure the Tele with build property values and return the configured
    ---Removed (old line 62):      * parameters.
    +++Added (new line 61):      * Configure the Tele with build property values and return the configured parameters.
    ---Removed (old line 72):        * Configure the TeleValid with build property values and return the
    ---Removed (old line 73):        * configured parameters.
    +++Added (new line 71):        * Configure the TeleValid with build property values and return the configured parameters.
    ---Removed (old line 102):      * Configure the Valid with build property values and return the configured
    ---Removed (old line 103):      * parameters.
    +++Added (new line 100):      * Configure the Valid with build property values and return the configured parameters.
    ---Removed (old line 115):    * Configure the AppSession with build property values and return the
    ---Removed (old line 116):    * configured parameters.
    +++Added (new line 112):    * Configure the AppSession with build property values and return the configured parameters.
    ---Removed (old line 127):    * Configure the Entities with build property values and return the
    ---Removed (old line 128):    * configured parameters.
    +++Added (new line 123):    * Configure the Entities with build property values and return the configured parameters.
    ---Removed (old line 137):      * Configure the Cleanup with build property values and return the
    ---Removed (old line 138):      * configured parameters.
    +++Added (new line 132):      * Configure the Cleanup with build property values and return the configured parameters.
    ---Removed (old line 150):    * Configure the Jwt with build property values and return the configured
    ---Removed (old line 151):    * parameters.
    +++Added (new line 144):    * Configure the Jwt with build property values and return the configured parameters.
    +++Added (new line 153): 
    +++Added (new line 154):   /**
    +++Added (new line 155):    * Configure the requests with build property values and return the configured parameters.
    +++Added (new line 156):    */
    +++Added (new line 157):   @Getter
    +++Added (new line 158):   @Setter
    +++Added (new line 159):   public static class Request {
    +++Added (new line 160): 
    +++Added (new line 161):     private long sizelimit = 10000;
    +++Added (new line 162):   }

File: src/main/resources/application.yml ======================
    - Additions: 4
    - Deletions: 0
=======================================================

    +++Added (new line 17): server:
    +++Added (new line 18):   max-post-size: 10000
    +++Added (new line 80): request:
    +++Added (new line 81):   sizelimit: 10000

File: src/test/java/app/coronawarn/verification/VerificationApplicationExternalTest.java ======================
    - Additions: 54
    - Deletions: 25
=======================================================

    ---Removed (old line 26): import app.coronawarn.verification.model.*;
    +++Added (new line 26): import app.coronawarn.verification.model.AppSessionSourceOfTrust;
    +++Added (new line 27): import app.coronawarn.verification.model.HashedGuid;
    +++Added (new line 28): import app.coronawarn.verification.model.RegistrationToken;
    +++Added (new line 29): import app.coronawarn.verification.model.RegistrationTokenKeyType;
    +++Added (new line 30): import app.coronawarn.verification.model.RegistrationTokenRequest;
    ---Removed (old line 33): 
    ---Removed (old line 34): import static org.junit.Assert.*;
    ---Removed (old line 35): 
    +++Added (new line 37): import org.junit.After;
    +++Added (new line 38): import static org.junit.Assert.assertEquals;
    +++Added (new line 39): import static org.junit.Assert.assertNotNull;
    +++Added (new line 40): import static org.junit.Assert.assertNull;
    +++Added (new line 41): import org.junit.Before;
    ---Removed (old line 37): import org.junit.jupiter.api.BeforeEach;
    ---Removed (old line 39): 
    ---Removed (old line 43): 
    ---Removed (old line 44): import org.mockito.MockitoAnnotations;
    ---Removed (old line 55): 
    ---Removed (old line 84):   @BeforeEach
    ---Removed (old line 85):   void setUp() {
    ---Removed (old line 86):     MockitoAnnotations.initMocks(this);
    +++Added (new line 85):   private static long cachedRequestSize;
    +++Added (new line 86): 
    +++Added (new line 87):   @Before
    +++Added (new line 88):   public void setUp() {
    +++Added (new line 89):     // Store max request size config property to allow tests to modify it
    +++Added (new line 90):     cachedRequestSize = verificationApplicationConfig.getRequest().getSizelimit();
    +++Added (new line 91):   }
    +++Added (new line 92): 
    +++Added (new line 93):   @After
    +++Added (new line 94):   public void tearDown() {
    +++Added (new line 95):     // Reset max request size to cached value
    +++Added (new line 96):     verificationApplicationConfig.getRequest().setSizelimit(cachedRequestSize);
    ---Removed (old line 153):       .header("cwa-fake" ,"0" )
    +++Added (new line 163):       .header("cwa-fake", "0")
    +++Added (new line 216): 
    ---Removed (old line 238):       .header("cwa-fake" ,"0" )
    +++Added (new line 249):       .header("cwa-fake", "0")
    ---Removed (old line 282):       .header("cwa-fake" ,"0" )
    +++Added (new line 293):       .header("cwa-fake", "0")
    ---Removed (old line 300):       .header("cwa-fake" ,"0" )
    +++Added (new line 311):       .header("cwa-fake", "0")
    ---Removed (old line 347):       .header("cwa-fake" ,"0" )
    +++Added (new line 358):       .header("cwa-fake", "0")
    ---Removed (old line 364):       .header("cwa-fake" ,"0" )
    +++Added (new line 375):       .header("cwa-fake", "0")
    ---Removed (old line 416):       .header("cwa-fake" ,"0" )
    +++Added (new line 427):       .header("cwa-fake", "0")
    ---Removed (old line 434):       .header("cwa-fake" ,"0" )
    +++Added (new line 445):       .header("cwa-fake", "0")
    ---Removed (old line 480):       .header("cwa-fake" ,"0" )
    +++Added (new line 491):       .header("cwa-fake", "0")
    ---Removed (old line 518):       .header("cwa-fake" ,"1" )
    +++Added (new line 529):       .header("cwa-fake", "1")
    ---Removed (old line 536):       .header("cwa-fake" ,"0" )
    +++Added (new line 547):       .header("cwa-fake", "0")
    ---Removed (old line 550):       .header("cwa-fake" ,"0" ))
    +++Added (new line 561):       .header("cwa-fake", "0"))
    ---Removed (old line 561):     mockMvc.perform(post(TestUtils.PREFIX_API_VERSION + "/tan/teletan").header("cwa-fake" ,"0" )
    +++Added (new line 572):     mockMvc.perform(post(TestUtils.PREFIX_API_VERSION + "/tan/teletan").header("cwa-fake", "0")
    +++Added (new line 577):   /**
    +++Added (new line 578):    * Test get registration token by a guid with a size larger than the maxSizeLimit.
    +++Added (new line 579):    *
    +++Added (new line 580):    * @throws Exception if the test cannot be performed.
    +++Added (new line 581):    */
    +++Added (new line 582):   @Test
    +++Added (new line 583):   public void callGetRegistrationTokenByLargeRequest() throws Exception {
    +++Added (new line 584):     log.info("process callGetRegistrationTokenByLargeRequest() ");
    +++Added (new line 585):     appSessionrepository.deleteAll();
    +++Added (new line 586):     RegistrationTokenRequest request = new RegistrationTokenRequest(TestUtils.TEST_GUI_HASH, RegistrationTokenKeyType.GUID);
    +++Added (new line 587):     //Set the maxSizeLimit to 10 for testing
    +++Added (new line 588):     verificationApplicationConfig.getRequest().setSizelimit(10);
    +++Added (new line 589):     mockMvc.perform(post(TestUtils.PREFIX_API_VERSION + TestUtils.REGISTRATION_TOKEN_URI)
    +++Added (new line 590):       .contentType(MediaType.APPLICATION_JSON)
    +++Added (new line 591):       .content(TestUtils.getAsJsonFormat(request)))
    +++Added (new line 592):       .andExpect(status().isNotAcceptable());
    +++Added (new line 593):   }
    +++Added (new line 594): 

File: src/test/java/app/coronawarn/verification/VerificationApplicationExternalTestHttp.java ======================
    - Additions: 45
    - Deletions: 0
=======================================================

    +++Added (new line 1): package app.coronawarn.verification;
    +++Added (new line 2): 
    +++Added (new line 3): import java.io.BufferedReader;
    +++Added (new line 4): import java.io.IOException;
    +++Added (new line 5): import java.io.InputStreamReader;
    +++Added (new line 6): import java.io.PrintWriter;
    +++Added (new line 7): import java.net.InetAddress;
    +++Added (new line 8): import java.net.Socket;
    +++Added (new line 9): import org.junit.Assert;
    +++Added (new line 10): import org.junit.Test;
    +++Added (new line 11): import org.junit.runner.RunWith;
    +++Added (new line 12): import org.springframework.boot.test.context.SpringBootTest;
    +++Added (new line 13): import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.RANDOM_PORT;
    +++Added (new line 14): import org.springframework.boot.web.server.LocalServerPort;
    +++Added (new line 15): import org.springframework.test.context.junit4.SpringRunner;
    +++Added (new line 16): 
    +++Added (new line 17): @RunWith(SpringRunner.class)
    +++Added (new line 18): @SpringBootTest(webEnvironment = RANDOM_PORT)
    +++Added (new line 19): public class VerificationApplicationExternalTestHttp {
    +++Added (new line 20): 
    +++Added (new line 21):   @LocalServerPort
    +++Added (new line 22):   private int port;
    +++Added (new line 23): 
    +++Added (new line 24):   @Test
    +++Added (new line 25):   public void testChunkedModeIsDenied() throws IOException {
    +++Added (new line 26):     Socket socket = new Socket(InetAddress.getLocalHost(), port);
    +++Added (new line 27):     PrintWriter writer = new PrintWriter(socket.getOutputStream());
    +++Added (new line 28): 
    +++Added (new line 29):     writer.print("POST /version/v1/registrationToken HTTP/1.1\r\n");
    +++Added (new line 30):     writer.print("Host: 127.0.0.1:" + port + "\r\n");
    +++Added (new line 31):     writer.print("Content-Type: application/json\r\n");
    +++Added (new line 32):     writer.print("Transfer-Encoding: Chunked\r\n\r\n");
    +++Added (new line 33):     writer.flush();
    +++Added (new line 34): 
    +++Added (new line 35):     writer.print("{ \"randomBody\": 42 }");
    +++Added (new line 36):     writer.flush();
    +++Added (new line 37): 
    +++Added (new line 38):     BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
    +++Added (new line 39):     Assert.assertEquals("HTTP/1.1 406", reader.readLine().trim());
    +++Added (new line 40): 
    +++Added (new line 41):     reader.close();
    +++Added (new line 42):     socket.close();
    +++Added (new line 43):   }
    +++Added (new line 44): 
    +++Added (new line 45): }

File: src/test/java/app/coronawarn/verification/VerificationApplicationTest.java ======================
    - Additions: 0
    - Deletions: 0
=======================================================


