Issue #71: Update on OTC subscription/namespace structure
URL: https://github.com/corona-warn-app/cwa-verification-server/pull/71

Commit ID: 39885d752825cbb0ea6b417d75cbfbe1481fe89b

Commit Message: fix: tan_tan_pattern to include regex meta characters (#65)

* fix GUID_HASH_PATTERN to let isHashValid() return false on strings with more than 64 chars

* fix GUID_HASH_PATTERN to let isHashValid() return false on strings with more than 64 chars

* fix TAN_TAN_PATTERN to let syntaxVerification() return false on strings with more than 36 chars, even if those contain a valid UUID

* make checkstyle happy (120 chars per line limitation)

* cosmetic: add clarifying comment on the use of Tele-TAN

Files Changed (2):
File: src/main/java/app/coronawarn/verification/service/TanService.java ======================
    - Additions: 6
    - Deletions: 3
=======================================================

    ---Removed (old line 50):   private static final Integer TELE_TAN_LENGTH = 7;
    ---Removed (old line 51):   private static final String TAN_TAN_PATTERN = "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}";
    +++Added (new line 50):   // TANs are UUIDs
    +++Added (new line 51):   private static final String UUID_PATTERN = "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$";
    +++Added (new line 52):   private static final String TAN_TAN_PATTERN = UUID_PATTERN;
    +++Added (new line 53):   private static final Pattern TAN_PATTERN = Pattern.compile(TAN_TAN_PATTERN);
    +++Added (new line 55):   // Tele-TANs are a shorter, easier to communicate form of TAN
    +++Added (new line 56):   private static final Integer TELE_TAN_LENGTH = 7;
    ---Removed (old line 57):   private static final Pattern TAN_PATTERN = Pattern.compile(TAN_TAN_PATTERN);

File: src/test/java/app/coronawarn/verification/service/TanServiceTest.java ======================
    - Additions: 10
    - Deletions: 0
=======================================================

    +++Added (new line 137):   @Test
    +++Added (new line 138):   public void testTANFormat() {
    +++Added (new line 139):     assertThat(tanService.syntaxVerification("b430ce08-246d-4301-822c-c5d95f1edd13")).isTrue();
    +++Added (new line 140):     assertThat(tanService.syntaxVerification("ffc079f1-7060-4adb-93f8-6a6b95ad1124")).isTrue();
    +++Added (new line 141):     assertThat(tanService.syntaxVerification("ffc079f1")).isFalse();
    +++Added (new line 142):     assertThat(tanService.syntaxVerification("xfc079f1-7060-4adb-93f8-6a6b95ad1124")).isFalse();
    +++Added (new line 143):     assertThat(tanService.syntaxVerification("too-long-ffc079f1-7060-4adb-93f8-6a6b95ad1124")).isFalse();
    +++Added (new line 144):     assertThat(tanService.syntaxVerification("ffc079f1-7060-4adb-93f8-6a6b95ad1124-too-long")).isFalse();
    +++Added (new line 145):   }
    +++Added (new line 146): 

